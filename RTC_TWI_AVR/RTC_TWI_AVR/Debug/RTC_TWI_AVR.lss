
RTC_TWI_AVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000092  00800100  00000e2a  00000ebe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e2a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  00800192  00800192  00000f50  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000f50  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000fac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  00000fec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001790  00000000  00000000  0000110c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000afd  00000000  00000000  0000289c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a5a  00000000  00000000  00003399  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002ac  00000000  00000000  00003df4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005f4  00000000  00000000  000040a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a3e  00000000  00000000  00004694  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  000050d2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 9a 02 	jmp	0x534	; 0x534 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e2       	ldi	r30, 0x2A	; 42
  7c:	fe e0       	ldi	r31, 0x0E	; 14
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 39       	cpi	r26, 0x92	; 146
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e9       	ldi	r26, 0x92	; 146
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 3a       	cpi	r26, 0xAA	; 170
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 e7 02 	call	0x5ce	; 0x5ce <main>
  9e:	0c 94 13 07 	jmp	0xe26	; 0xe26 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <to_BCD>:
#include "ds1307.h"

uint8_t to_BCD(uint8_t n)
{
	return ((n/10) << 4) + n%10;
  a6:	9d ec       	ldi	r25, 0xCD	; 205
  a8:	89 9f       	mul	r24, r25
  aa:	91 2d       	mov	r25, r1
  ac:	11 24       	eor	r1, r1
  ae:	96 95       	lsr	r25
  b0:	96 95       	lsr	r25
  b2:	96 95       	lsr	r25
  b4:	39 2f       	mov	r19, r25
  b6:	33 0f       	add	r19, r19
  b8:	23 2f       	mov	r18, r19
  ba:	22 0f       	add	r18, r18
  bc:	22 0f       	add	r18, r18
  be:	23 0f       	add	r18, r19
  c0:	82 1b       	sub	r24, r18
}
  c2:	20 e1       	ldi	r18, 0x10	; 16
  c4:	92 9f       	mul	r25, r18
  c6:	80 0d       	add	r24, r0
  c8:	11 24       	eor	r1, r1
  ca:	08 95       	ret

000000cc <from_BCD>:

uint8_t from_BCD(uint8_t n)
{
	return 10 * (n >> 4) + (n & 0b1111);
  cc:	98 2f       	mov	r25, r24
  ce:	92 95       	swap	r25
  d0:	9f 70       	andi	r25, 0x0F	; 15
  d2:	99 0f       	add	r25, r25
  d4:	29 2f       	mov	r18, r25
  d6:	22 0f       	add	r18, r18
  d8:	22 0f       	add	r18, r18
  da:	92 0f       	add	r25, r18
  dc:	8f 70       	andi	r24, 0x0F	; 15
}
  de:	89 0f       	add	r24, r25
  e0:	08 95       	ret

000000e2 <RTC_init>:

/* Инициализация интерфейса I2C для часов */
void RTC_init(void)
{
	twi_init(F_CPU, F_I2C);
  e2:	20 ea       	ldi	r18, 0xA0	; 160
  e4:	36 e8       	ldi	r19, 0x86	; 134
  e6:	41 e0       	ldi	r20, 0x01	; 1
  e8:	50 e0       	ldi	r21, 0x00	; 0
  ea:	60 e0       	ldi	r22, 0x00	; 0
  ec:	74 e2       	ldi	r23, 0x24	; 36
  ee:	84 ef       	ldi	r24, 0xF4	; 244
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <twi_init>
  f6:	08 95       	ret

000000f8 <RTC_set_value>:
}

/* Запись значения в часы */
void RTC_set_value(uint8_t address, uint8_t data)
{
  f8:	cf 93       	push	r28
  fa:	df 93       	push	r29
  fc:	d8 2f       	mov	r29, r24
  fe:	c6 2f       	mov	r28, r22
	/* Сформировать состояние СТАРТ */
	twi(TWI_START);
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	0e 94 53 02 	call	0x4a6	; 0x4a6 <twi>
	
	/* Выдать SLA-W - ведомый в режиме приемника */
	twi_transmit((DS1307_ADR<<1)|0);
 106:	80 ed       	ldi	r24, 0xD0	; 208
 108:	0e 94 76 02 	call	0x4ec	; 0x4ec <twi_transmit>
	
	/* Передать адрес регистра часов */
	twi_transmit(address);
 10c:	8d 2f       	mov	r24, r29
 10e:	0e 94 76 02 	call	0x4ec	; 0x4ec <twi_transmit>
	
	/* При передаче указателя передается только адрес без стоп состояния */
	if (data != RTC_WRITE_POINTER)
 112:	cf 3f       	cpi	r28, 0xFF	; 255
 114:	31 f0       	breq	.+12     	; 0x122 <RTC_set_value+0x2a>
	{
		/* Передать данные */
		twi_transmit(data);
 116:	8c 2f       	mov	r24, r28
 118:	0e 94 76 02 	call	0x4ec	; 0x4ec <twi_transmit>
		
		/* Сформировать состояние СТОП */
		twi(TWI_STOP);
 11c:	82 e0       	ldi	r24, 0x02	; 2
 11e:	0e 94 53 02 	call	0x4a6	; 0x4a6 <twi>
	}
}
 122:	df 91       	pop	r29
 124:	cf 91       	pop	r28
 126:	08 95       	ret

00000128 <RTC_get_value>:

/* Получить значение с часов */
void RTC_get_value(uint8_t * data)
{
 128:	cf 93       	push	r28
 12a:	df 93       	push	r29
 12c:	ec 01       	movw	r28, r24
	/* Сформировать состояние СТАРТ */
	twi(TWI_START);
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	0e 94 53 02 	call	0x4a6	; 0x4a6 <twi>
	
	/* Выдать пакет SLA-R - ведомый в режиме передатчика */
	twi_transmit((DS1307_ADR<<1)|1);
 134:	81 ed       	ldi	r24, 0xD1	; 209
 136:	0e 94 76 02 	call	0x4ec	; 0x4ec <twi_transmit>
	
	/* считываем данные без подтверждения */
	twi_receive(data, 0);
 13a:	60 e0       	ldi	r22, 0x00	; 0
 13c:	ce 01       	movw	r24, r28
 13e:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <twi_receive>
	
	/* Сформировать состояние СТОП */
	twi(TWI_STOP);
 142:	82 e0       	ldi	r24, 0x02	; 2
 144:	0e 94 53 02 	call	0x4a6	; 0x4a6 <twi>
}
 148:	df 91       	pop	r29
 14a:	cf 91       	pop	r28
 14c:	08 95       	ret

0000014e <RTC_set_out>:

/* Настроить выход OUT */
void RTC_set_out(uint8_t out)
{
	uint8_t control_register = ((out&1)<<OUT)|(0<<SQWE);
	RTC_set_value(RTC_CNTR_ADR, control_register);
 14e:	90 e8       	ldi	r25, 0x80	; 128
 150:	89 9f       	mul	r24, r25
 152:	b0 01       	movw	r22, r0
 154:	11 24       	eor	r1, r1
 156:	87 e0       	ldi	r24, 0x07	; 7
 158:	0e 94 7c 00 	call	0xf8	; 0xf8 <RTC_set_value>
 15c:	08 95       	ret

0000015e <RTC_set_sqwe>:

/* Настроить выход SQWE */
void RTC_set_sqwe(uint8_t frequency)
{
	uint8_t control_register = (0<<OUT)|(1<<SQWE)|frequency;
	RTC_set_value(RTC_CNTR_ADR, control_register);
 15e:	68 2f       	mov	r22, r24
 160:	60 61       	ori	r22, 0x10	; 16
 162:	87 e0       	ldi	r24, 0x07	; 7
 164:	0e 94 7c 00 	call	0xf8	; 0xf8 <RTC_set_value>
 168:	08 95       	ret

0000016a <RTC_start_stop_watch>:
}

/* Запустить или остановить часы */
void RTC_start_stop_watch(uint8_t on)
{
 16a:	1f 93       	push	r17
 16c:	cf 93       	push	r28
 16e:	df 93       	push	r29
 170:	1f 92       	push	r1
 172:	cd b7       	in	r28, 0x3d	; 61
 174:	de b7       	in	r29, 0x3e	; 62
 176:	18 2f       	mov	r17, r24
	/* Сохранить последнее значение секунд */
	uint8_t seconds_register;
	RTC_set_value(RTC_SEC_ADR, RTC_WRITE_POINTER);
 178:	6f ef       	ldi	r22, 0xFF	; 255
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	0e 94 7c 00 	call	0xf8	; 0xf8 <RTC_set_value>
	RTC_get_value(&seconds_register);
 180:	ce 01       	movw	r24, r28
 182:	01 96       	adiw	r24, 0x01	; 1
 184:	0e 94 94 00 	call	0x128	; 0x128 <RTC_get_value>
	
	/* Перевернуть бит Clock Hold */
	if (on == START_CLOCK)
 188:	11 30       	cpi	r17, 0x01	; 1
 18a:	21 f4       	brne	.+8      	; 0x194 <RTC_start_stop_watch+0x2a>
	{
		seconds_register = seconds_register & ~(1<<CH); // установить бит равным 0 - запустить часы
 18c:	89 81       	ldd	r24, Y+1	; 0x01
 18e:	8f 77       	andi	r24, 0x7F	; 127
 190:	89 83       	std	Y+1, r24	; 0x01
 192:	03 c0       	rjmp	.+6      	; 0x19a <RTC_start_stop_watch+0x30>
	} else {
		seconds_register = seconds_register | (1<<CH); // установить бит равным 1 - остановить часы
 194:	89 81       	ldd	r24, Y+1	; 0x01
 196:	80 68       	ori	r24, 0x80	; 128
 198:	89 83       	std	Y+1, r24	; 0x01
	}
	
	RTC_set_value(RTC_SEC_ADR, seconds_register);
 19a:	69 81       	ldd	r22, Y+1	; 0x01
 19c:	80 e0       	ldi	r24, 0x00	; 0
 19e:	0e 94 7c 00 	call	0xf8	; 0xf8 <RTC_set_value>
}
 1a2:	0f 90       	pop	r0
 1a4:	df 91       	pop	r29
 1a6:	cf 91       	pop	r28
 1a8:	1f 91       	pop	r17
 1aa:	08 95       	ret

000001ac <RTC_set_date>:

/* Установить дату */
void RTC_set_date(Date date)
{
 1ac:	0f 93       	push	r16
 1ae:	1f 93       	push	r17
 1b0:	cf 93       	push	r28
 1b2:	df 93       	push	r29
 1b4:	16 2f       	mov	r17, r22
 1b6:	d7 2f       	mov	r29, r23
 1b8:	09 2f       	mov	r16, r25
	/* Перевести в BCD */
	date.year = to_BCD(date.year);
 1ba:	0e 94 53 00 	call	0xa6	; 0xa6 <to_BCD>
 1be:	c8 2f       	mov	r28, r24
	date.month = to_BCD(date.month);
 1c0:	8d 2f       	mov	r24, r29
 1c2:	0e 94 53 00 	call	0xa6	; 0xa6 <to_BCD>
 1c6:	d8 2f       	mov	r29, r24
	date.day = to_BCD(date.day);
 1c8:	81 2f       	mov	r24, r17
 1ca:	0e 94 53 00 	call	0xa6	; 0xa6 <to_BCD>
 1ce:	18 2f       	mov	r17, r24

	/* Сформировать состояние СТАРТ */
	twi(TWI_START);
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	0e 94 53 02 	call	0x4a6	; 0x4a6 <twi>

	/* Выдать SLA-W - ведомый в режиме приемника */
	twi_transmit((DS1307_ADR<<1)|0);
 1d6:	80 ed       	ldi	r24, 0xD0	; 208
 1d8:	0e 94 76 02 	call	0x4ec	; 0x4ec <twi_transmit>
	
	/* Передать адрес регистра, с которого начинаем запись */
	twi_transmit(RTC_DAY_WEEK_ADR);
 1dc:	83 e0       	ldi	r24, 0x03	; 3
 1de:	0e 94 76 02 	call	0x4ec	; 0x4ec <twi_transmit>
	twi_transmit(date.day_week);
 1e2:	80 2f       	mov	r24, r16
 1e4:	0e 94 76 02 	call	0x4ec	; 0x4ec <twi_transmit>
	twi_transmit(date.day);
 1e8:	81 2f       	mov	r24, r17
 1ea:	0e 94 76 02 	call	0x4ec	; 0x4ec <twi_transmit>
	twi_transmit(date.month);
 1ee:	8d 2f       	mov	r24, r29
 1f0:	0e 94 76 02 	call	0x4ec	; 0x4ec <twi_transmit>
	twi_transmit(date.year);
 1f4:	8c 2f       	mov	r24, r28
 1f6:	0e 94 76 02 	call	0x4ec	; 0x4ec <twi_transmit>
	
	/* Сформировать состояние СТОП */
	twi(TWI_STOP);
 1fa:	82 e0       	ldi	r24, 0x02	; 2
 1fc:	0e 94 53 02 	call	0x4a6	; 0x4a6 <twi>
}
 200:	df 91       	pop	r29
 202:	cf 91       	pop	r28
 204:	1f 91       	pop	r17
 206:	0f 91       	pop	r16
 208:	08 95       	ret

0000020a <RTC_set_time>:

/* Установить время */
void RTC_set_time(Time time)
{
 20a:	ef 92       	push	r14
 20c:	ff 92       	push	r15
 20e:	0f 93       	push	r16
 210:	1f 93       	push	r17
 212:	cf 93       	push	r28
 214:	df 93       	push	r29
 216:	00 d0       	rcall	.+0      	; 0x218 <RTC_set_time+0xe>
 218:	00 d0       	rcall	.+0      	; 0x21a <RTC_set_time+0x10>
 21a:	1f 92       	push	r1
 21c:	cd b7       	in	r28, 0x3d	; 61
 21e:	de b7       	in	r29, 0x3e	; 62
 220:	17 2f       	mov	r17, r23
 222:	8d 83       	std	Y+5, r24	; 0x05
 224:	04 2f       	mov	r16, r20
 226:	f5 2e       	mov	r15, r21
	/* Перевести в BCD */
	time.seconds = to_BCD(time.seconds);
 228:	86 2f       	mov	r24, r22
 22a:	0e 94 53 00 	call	0xa6	; 0xa6 <to_BCD>
 22e:	e8 2e       	mov	r14, r24
	time.minutes = to_BCD(time.minutes);
 230:	8f 2d       	mov	r24, r15
 232:	0e 94 53 00 	call	0xa6	; 0xa6 <to_BCD>
 236:	f8 2e       	mov	r15, r24
	if (time.time_format == 12)
 238:	81 2f       	mov	r24, r17
 23a:	1c 30       	cpi	r17, 0x0C	; 12
 23c:	d1 f4       	brne	.+52     	; 0x272 <RTC_set_time+0x68>
	{
		time.hours = (time.hours%12 == 0 ? 12U : time.hours%12); // на всякий случай подрежем
 23e:	9b ea       	ldi	r25, 0xAB	; 171
 240:	09 9f       	mul	r16, r25
 242:	91 2d       	mov	r25, r1
 244:	11 24       	eor	r1, r1
 246:	96 95       	lsr	r25
 248:	96 95       	lsr	r25
 24a:	96 95       	lsr	r25
 24c:	29 2f       	mov	r18, r25
 24e:	22 0f       	add	r18, r18
 250:	92 0f       	add	r25, r18
 252:	99 0f       	add	r25, r25
 254:	99 0f       	add	r25, r25
 256:	09 1b       	sub	r16, r25
 258:	09 f0       	breq	.+2      	; 0x25c <RTC_set_time+0x52>
 25a:	80 2f       	mov	r24, r16
		time.hours = to_BCD(time.hours) | (1<<TIME_FORMAT) | (time.am_pm << AM_PM); // Добавим биты для 12-часового формата
 25c:	0e 94 53 00 	call	0xa6	; 0xa6 <to_BCD>
 260:	2d 81       	ldd	r18, Y+5	; 0x05
 262:	90 e2       	ldi	r25, 0x20	; 32
 264:	29 9f       	mul	r18, r25
 266:	90 01       	movw	r18, r0
 268:	11 24       	eor	r1, r1
 26a:	20 64       	ori	r18, 0x40	; 64
 26c:	12 2f       	mov	r17, r18
 26e:	18 2b       	or	r17, r24
 270:	04 c0       	rjmp	.+8      	; 0x27a <RTC_set_time+0x70>
	} else {
		time.hours = to_BCD(time.hours); // тут настроечные биты оставляем нулевыми
 272:	80 2f       	mov	r24, r16
 274:	0e 94 53 00 	call	0xa6	; 0xa6 <to_BCD>
 278:	18 2f       	mov	r17, r24
	}
	
	/* Сформировать состояние СТАРТ */
	twi(TWI_START);
 27a:	80 e0       	ldi	r24, 0x00	; 0
 27c:	0e 94 53 02 	call	0x4a6	; 0x4a6 <twi>

	/* Выдать SLA-W - ведомый в режиме приемника */
	twi_transmit((DS1307_ADR<<1)|0);
 280:	80 ed       	ldi	r24, 0xD0	; 208
 282:	0e 94 76 02 	call	0x4ec	; 0x4ec <twi_transmit>
	
	/* Передать адрес регистра, с которого начинаем запись */
	twi_transmit(RTC_SEC_ADR);
 286:	80 e0       	ldi	r24, 0x00	; 0
 288:	0e 94 76 02 	call	0x4ec	; 0x4ec <twi_transmit>
	twi_transmit(time.seconds);
 28c:	8e 2d       	mov	r24, r14
 28e:	0e 94 76 02 	call	0x4ec	; 0x4ec <twi_transmit>
	twi_transmit(time.minutes);
 292:	8f 2d       	mov	r24, r15
 294:	0e 94 76 02 	call	0x4ec	; 0x4ec <twi_transmit>
	twi_transmit(time.hours);
 298:	81 2f       	mov	r24, r17
 29a:	0e 94 76 02 	call	0x4ec	; 0x4ec <twi_transmit>
	
	/* Сформировать состояние СТОП */
	twi(TWI_STOP);
 29e:	82 e0       	ldi	r24, 0x02	; 2
 2a0:	0e 94 53 02 	call	0x4a6	; 0x4a6 <twi>
}
 2a4:	0f 90       	pop	r0
 2a6:	0f 90       	pop	r0
 2a8:	0f 90       	pop	r0
 2aa:	0f 90       	pop	r0
 2ac:	0f 90       	pop	r0
 2ae:	df 91       	pop	r29
 2b0:	cf 91       	pop	r28
 2b2:	1f 91       	pop	r17
 2b4:	0f 91       	pop	r16
 2b6:	ff 90       	pop	r15
 2b8:	ef 90       	pop	r14
 2ba:	08 95       	ret

000002bc <RTC_get_date>:

/* Получить дату */
void RTC_get_date(Date * date)
{
 2bc:	cf 93       	push	r28
 2be:	df 93       	push	r29
 2c0:	ec 01       	movw	r28, r24
	RTC_set_value(RTC_DAY_WEEK_ADR, RTC_WRITE_POINTER);
 2c2:	6f ef       	ldi	r22, 0xFF	; 255
 2c4:	83 e0       	ldi	r24, 0x03	; 3
 2c6:	0e 94 7c 00 	call	0xf8	; 0xf8 <RTC_set_value>
	
	/*Сформировать состояние РЕСТАРТ*/
	twi(TWI_RESTART);
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	0e 94 53 02 	call	0x4a6	; 0x4a6 <twi>
	
	/*Выдать на шину пакет SLA-R*/
	twi_transmit((DS1307_ADR<<1)|1);
 2d0:	81 ed       	ldi	r24, 0xD1	; 209
 2d2:	0e 94 76 02 	call	0x4ec	; 0x4ec <twi_transmit>
	
	/*считываем данные с подтверждением, кроме последнего байта */
	twi_receive(&date->day_week, 1);
 2d6:	61 e0       	ldi	r22, 0x01	; 1
 2d8:	ce 01       	movw	r24, r28
 2da:	03 96       	adiw	r24, 0x03	; 3
 2dc:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <twi_receive>
	twi_receive(&date->day, 1);
 2e0:	61 e0       	ldi	r22, 0x01	; 1
 2e2:	ce 01       	movw	r24, r28
 2e4:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <twi_receive>
	twi_receive(&date->month, 1);
 2e8:	61 e0       	ldi	r22, 0x01	; 1
 2ea:	ce 01       	movw	r24, r28
 2ec:	01 96       	adiw	r24, 0x01	; 1
 2ee:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <twi_receive>
	twi_receive(&date->year, 0);	// завершающий прием без подтверждения
 2f2:	60 e0       	ldi	r22, 0x00	; 0
 2f4:	ce 01       	movw	r24, r28
 2f6:	02 96       	adiw	r24, 0x02	; 2
 2f8:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <twi_receive>
	
	/*Сформировать состояние СТОП*/
	twi(TWI_STOP);
 2fc:	82 e0       	ldi	r24, 0x02	; 2
 2fe:	0e 94 53 02 	call	0x4a6	; 0x4a6 <twi>
	
	/* Преобразовать из BCD в десятичное число */
	date->day	  = from_BCD(date->day);
 302:	88 81       	ld	r24, Y
 304:	0e 94 66 00 	call	0xcc	; 0xcc <from_BCD>
 308:	88 83       	st	Y, r24
	date->month	  = from_BCD(date->month);
 30a:	89 81       	ldd	r24, Y+1	; 0x01
 30c:	0e 94 66 00 	call	0xcc	; 0xcc <from_BCD>
 310:	89 83       	std	Y+1, r24	; 0x01
	date->year	  = from_BCD(date->year);
 312:	8a 81       	ldd	r24, Y+2	; 0x02
 314:	0e 94 66 00 	call	0xcc	; 0xcc <from_BCD>
 318:	8a 83       	std	Y+2, r24	; 0x02
}
 31a:	df 91       	pop	r29
 31c:	cf 91       	pop	r28
 31e:	08 95       	ret

00000320 <RTC_get_time>:

/* Получить время */
void RTC_get_time(Time * time)
{
 320:	cf 93       	push	r28
 322:	df 93       	push	r29
 324:	ec 01       	movw	r28, r24
	/* Сбрасываем на область памяти */
	RTC_set_value(RTC_SEC_ADR, RTC_WRITE_POINTER);
 326:	6f ef       	ldi	r22, 0xFF	; 255
 328:	80 e0       	ldi	r24, 0x00	; 0
 32a:	0e 94 7c 00 	call	0xf8	; 0xf8 <RTC_set_value>
	
	/*Сформировать состояние РЕСТАРТ*/
	twi(TWI_RESTART);
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	0e 94 53 02 	call	0x4a6	; 0x4a6 <twi>
	
	/*Выдать на шину пакет SLA-R*/
	twi_transmit((DS1307_ADR<<1)|1);
 334:	81 ed       	ldi	r24, 0xD1	; 209
 336:	0e 94 76 02 	call	0x4ec	; 0x4ec <twi_transmit>
	
	/*считываем данные с подтверждением, кроме последнего байта */
	twi_receive(&time->seconds, 1);
 33a:	61 e0       	ldi	r22, 0x01	; 1
 33c:	ce 01       	movw	r24, r28
 33e:	02 96       	adiw	r24, 0x02	; 2
 340:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <twi_receive>
	twi_receive(&time->minutes, 1);
 344:	61 e0       	ldi	r22, 0x01	; 1
 346:	ce 01       	movw	r24, r28
 348:	01 96       	adiw	r24, 0x01	; 1
 34a:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <twi_receive>
	twi_receive(&time->hours, 0); // завершающий прием без подтверждения
 34e:	60 e0       	ldi	r22, 0x00	; 0
 350:	ce 01       	movw	r24, r28
 352:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <twi_receive>
	
	/*Сформировать состояние СТОП*/
	twi(TWI_STOP);
 356:	82 e0       	ldi	r24, 0x02	; 2
 358:	0e 94 53 02 	call	0x4a6	; 0x4a6 <twi>
	
	/* Преобразовать из BCD в десятичное число */
	time->seconds  = from_BCD(time->seconds & SECONDS_MASK);
 35c:	8a 81       	ldd	r24, Y+2	; 0x02
 35e:	8f 77       	andi	r24, 0x7F	; 127
 360:	0e 94 66 00 	call	0xcc	; 0xcc <from_BCD>
 364:	8a 83       	std	Y+2, r24	; 0x02
	time->minutes  = from_BCD(time->minutes);
 366:	89 81       	ldd	r24, Y+1	; 0x01
 368:	0e 94 66 00 	call	0xcc	; 0xcc <from_BCD>
 36c:	89 83       	std	Y+1, r24	; 0x01
	time->time_format = (time->hours & (1<<TIME_FORMAT) ? 12 : 24);
 36e:	88 81       	ld	r24, Y
 370:	86 fd       	sbrc	r24, 6
 372:	10 c0       	rjmp	.+32     	; 0x394 <RTC_get_time+0x74>
 374:	05 c0       	rjmp	.+10     	; 0x380 <RTC_get_time+0x60>
	} else {
		time->am_pm = (time->hours & (1<<AM_PM) ? PM : AM); // В режиме 12 часов бит 5 дает 1 для PM и 0 для AM
		time->hours &= HOUR_12_MASK;						// уберем лишние биты
	}
	
	time->hours	  = from_BCD(time->hours);
 376:	88 81       	ld	r24, Y
 378:	0e 94 66 00 	call	0xcc	; 0xcc <from_BCD>
 37c:	88 83       	st	Y, r24
}
 37e:	13 c0       	rjmp	.+38     	; 0x3a6 <RTC_get_time+0x86>
	twi(TWI_STOP);
	
	/* Преобразовать из BCD в десятичное число */
	time->seconds  = from_BCD(time->seconds & SECONDS_MASK);
	time->minutes  = from_BCD(time->minutes);
	time->time_format = (time->hours & (1<<TIME_FORMAT) ? 12 : 24);
 380:	98 e1       	ldi	r25, 0x18	; 24
 382:	9b 83       	std	Y+3, r25	; 0x03
	if (time->time_format == 24)
	{
		time->am_pm = (from_BCD(time->hours) > 12U ? PM: AM);
 384:	0e 94 66 00 	call	0xcc	; 0xcc <from_BCD>
 388:	91 e0       	ldi	r25, 0x01	; 1
 38a:	8d 30       	cpi	r24, 0x0D	; 13
 38c:	08 f4       	brcc	.+2      	; 0x390 <RTC_get_time+0x70>
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	9c 83       	std	Y+4, r25	; 0x04
 392:	f1 cf       	rjmp	.-30     	; 0x376 <RTC_get_time+0x56>
	twi(TWI_STOP);
	
	/* Преобразовать из BCD в десятичное число */
	time->seconds  = from_BCD(time->seconds & SECONDS_MASK);
	time->minutes  = from_BCD(time->minutes);
	time->time_format = (time->hours & (1<<TIME_FORMAT) ? 12 : 24);
 394:	9c e0       	ldi	r25, 0x0C	; 12
 396:	9b 83       	std	Y+3, r25	; 0x03
	if (time->time_format == 24)
	{
		time->am_pm = (from_BCD(time->hours) > 12U ? PM: AM);
	} else {
		time->am_pm = (time->hours & (1<<AM_PM) ? PM : AM); // В режиме 12 часов бит 5 дает 1 для PM и 0 для AM
 398:	85 fb       	bst	r24, 5
 39a:	99 27       	eor	r25, r25
 39c:	90 f9       	bld	r25, 0
 39e:	9c 83       	std	Y+4, r25	; 0x04
		time->hours &= HOUR_12_MASK;						// уберем лишние биты
 3a0:	8f 71       	andi	r24, 0x1F	; 31
 3a2:	88 83       	st	Y, r24
 3a4:	e8 cf       	rjmp	.-48     	; 0x376 <RTC_get_time+0x56>
	}
	
	time->hours	  = from_BCD(time->hours);
}
 3a6:	df 91       	pop	r29
 3a8:	cf 91       	pop	r28
 3aa:	08 95       	ret

000003ac <RTC_write_RAM>:

/* Запись в оперативную память часов */
uint8_t RTC_write_RAM(uint8_t address, uint8_t data)
{
	if (address < RTC_RAM_ADR || address > RTC_RAM_END)
 3ac:	98 ef       	ldi	r25, 0xF8	; 248
 3ae:	98 0f       	add	r25, r24
 3b0:	98 33       	cpi	r25, 0x38	; 56
 3b2:	20 f4       	brcc	.+8      	; 0x3bc <RTC_write_RAM+0x10>
		return 0;	// ничего не записали
				
	RTC_set_value(address, data);
 3b4:	0e 94 7c 00 	call	0xf8	; 0xf8 <RTC_set_value>
	return 1;
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	08 95       	ret

/* Запись в оперативную память часов */
uint8_t RTC_write_RAM(uint8_t address, uint8_t data)
{
	if (address < RTC_RAM_ADR || address > RTC_RAM_END)
		return 0;	// ничего не записали
 3bc:	80 e0       	ldi	r24, 0x00	; 0
				
	RTC_set_value(address, data);
	return 1;
}
 3be:	08 95       	ret

000003c0 <RTC_get_RAM>:

uint8_t RTC_get_RAM(uint8_t address, uint8_t * data)
{
 3c0:	cf 93       	push	r28
 3c2:	df 93       	push	r29
	if (address < RTC_RAM_ADR || address > RTC_RAM_END)
 3c4:	98 ef       	ldi	r25, 0xF8	; 248
 3c6:	98 0f       	add	r25, r24
 3c8:	98 33       	cpi	r25, 0x38	; 56
 3ca:	48 f4       	brcc	.+18     	; 0x3de <RTC_get_RAM+0x1e>
 3cc:	eb 01       	movw	r28, r22
		return 0;	// ничего не считали

	// Устанавливаем указатель на нужный адрес и считываем данные
	RTC_set_value(address, RTC_WRITE_POINTER);
 3ce:	6f ef       	ldi	r22, 0xFF	; 255
 3d0:	0e 94 7c 00 	call	0xf8	; 0xf8 <RTC_set_value>
	RTC_get_value(data);
 3d4:	ce 01       	movw	r24, r28
 3d6:	0e 94 94 00 	call	0x128	; 0x128 <RTC_get_value>
	return 1;
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	01 c0       	rjmp	.+2      	; 0x3e0 <RTC_get_RAM+0x20>
}

uint8_t RTC_get_RAM(uint8_t address, uint8_t * data)
{
	if (address < RTC_RAM_ADR || address > RTC_RAM_END)
		return 0;	// ничего не считали
 3de:	80 e0       	ldi	r24, 0x00	; 0

	// Устанавливаем указатель на нужный адрес и считываем данные
	RTC_set_value(address, RTC_WRITE_POINTER);
	RTC_get_value(data);
	return 1;
}
 3e0:	df 91       	pop	r29
 3e2:	cf 91       	pop	r28
 3e4:	08 95       	ret

000003e6 <twi_init>:
#include "twi.h"

/* Инициализация скорости и делителя I2C */
uint8_t twi_init(uint32_t cpu_frequency, uint32_t frequency)
{
	uint32_t twbr = (cpu_frequency/frequency - 16)/2;
 3e6:	0e 94 07 04 	call	0x80e	; 0x80e <__udivmodsi4>
 3ea:	da 01       	movw	r26, r20
 3ec:	c9 01       	movw	r24, r18
 3ee:	40 97       	sbiw	r24, 0x10	; 16
 3f0:	a1 09       	sbc	r26, r1
 3f2:	b1 09       	sbc	r27, r1
 3f4:	ac 01       	movw	r20, r24
 3f6:	bd 01       	movw	r22, r26
 3f8:	76 95       	lsr	r23
 3fa:	67 95       	ror	r22
 3fc:	57 95       	ror	r21
 3fe:	47 95       	ror	r20
	// Делитель не требуется
	if (twbr <= 0xFF)
 400:	4f 3f       	cpi	r20, 0xFF	; 255
 402:	51 05       	cpc	r21, r1
 404:	61 05       	cpc	r22, r1
 406:	71 05       	cpc	r23, r1
 408:	09 f0       	breq	.+2      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 40a:	30 f4       	brcc	.+12     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
	{
		TWSR = (0<<TWPS1)|(0<<TWPS0);
 40c:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
		TWBR = twbr;
 410:	40 93 b8 00 	sts	0x00B8, r20	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
	else
	{
		return 0;
	}

	return 1;
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	08 95       	ret
	{
		TWSR = (0<<TWPS1)|(0<<TWPS0);
		TWBR = twbr;
	}
	// Делитель 4
	else if (twbr <= 0x3FC)
 418:	4d 3f       	cpi	r20, 0xFD	; 253
 41a:	83 e0       	ldi	r24, 0x03	; 3
 41c:	58 07       	cpc	r21, r24
 41e:	61 05       	cpc	r22, r1
 420:	71 05       	cpc	r23, r1
 422:	88 f4       	brcc	.+34     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
	{
		TWSR = (0<<TWPS1)|(1<<TWPS0);
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
		TWBR = twbr>>2; // Делим на 4
 42a:	db 01       	movw	r26, r22
 42c:	ca 01       	movw	r24, r20
 42e:	b6 95       	lsr	r27
 430:	a7 95       	ror	r26
 432:	97 95       	ror	r25
 434:	87 95       	ror	r24
 436:	b6 95       	lsr	r27
 438:	a7 95       	ror	r26
 43a:	97 95       	ror	r25
 43c:	87 95       	ror	r24
 43e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
	else
	{
		return 0;
	}

	return 1;
 442:	81 e0       	ldi	r24, 0x01	; 1
 444:	08 95       	ret
	{
		TWSR = (0<<TWPS1)|(1<<TWPS0);
		TWBR = twbr>>2; // Делим на 4
	}
	// Делитель 16
	else if (twbr <= 0xFF0)
 446:	41 3f       	cpi	r20, 0xF1	; 241
 448:	8f e0       	ldi	r24, 0x0F	; 15
 44a:	58 07       	cpc	r21, r24
 44c:	61 05       	cpc	r22, r1
 44e:	71 05       	cpc	r23, r1
 450:	88 f4       	brcc	.+34     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
	{
		TWSR = (1<<TWPS1)|(0<<TWPS0);
 452:	82 e0       	ldi	r24, 0x02	; 2
 454:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
		TWBR = twbr>>4; // Делим на 16
 458:	db 01       	movw	r26, r22
 45a:	ca 01       	movw	r24, r20
 45c:	68 94       	set
 45e:	13 f8       	bld	r1, 3
 460:	b6 95       	lsr	r27
 462:	a7 95       	ror	r26
 464:	97 95       	ror	r25
 466:	87 95       	ror	r24
 468:	16 94       	lsr	r1
 46a:	d1 f7       	brne	.-12     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 46c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
	else
	{
		return 0;
	}

	return 1;
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	08 95       	ret
	{
		TWSR = (1<<TWPS1)|(0<<TWPS0);
		TWBR = twbr>>4; // Делим на 16
	}
	// Делитель 64
	else if (twbr <= 0x3FC0)
 474:	41 3c       	cpi	r20, 0xC1	; 193
 476:	8f e3       	ldi	r24, 0x3F	; 63
 478:	58 07       	cpc	r21, r24
 47a:	61 05       	cpc	r22, r1
 47c:	71 05       	cpc	r23, r1
 47e:	88 f4       	brcc	.+34     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
	{
		TWSR = (1<<TWPS1)|(1<<TWPS0);
 480:	83 e0       	ldi	r24, 0x03	; 3
 482:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
		TWBR = twbr>>6; // Делим на 64
 486:	db 01       	movw	r26, r22
 488:	ca 01       	movw	r24, r20
 48a:	68 94       	set
 48c:	15 f8       	bld	r1, 5
 48e:	b6 95       	lsr	r27
 490:	a7 95       	ror	r26
 492:	97 95       	ror	r25
 494:	87 95       	ror	r24
 496:	16 94       	lsr	r1
 498:	d1 f7       	brne	.-12     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
 49a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
	else
	{
		return 0;
	}

	return 1;
 49e:	81 e0       	ldi	r24, 0x01	; 1
 4a0:	08 95       	ret
		TWBR = twbr>>6; // Делим на 64
	}
	// Ничего не получилось, статус 0
	else
	{
		return 0;
 4a2:	80 e0       	ldi	r24, 0x00	; 0
	}

	return 1;
}
 4a4:	08 95       	ret

000004a6 <twi>:

/* Команды I2C */
uint8_t twi(uint8_t action)
{
	switch(action){
 4a6:	82 30       	cpi	r24, 0x02	; 2
 4a8:	59 f0       	breq	.+22     	; 0x4c0 <twi+0x1a>
 4aa:	30 f0       	brcs	.+12     	; 0x4b8 <twi+0x12>
 4ac:	84 30       	cpi	r24, 0x04	; 4
 4ae:	81 f0       	breq	.+32     	; 0x4d0 <twi+0x2a>
 4b0:	58 f0       	brcs	.+22     	; 0x4c8 <twi+0x22>
 4b2:	85 30       	cpi	r24, 0x05	; 5
 4b4:	81 f4       	brne	.+32     	; 0x4d6 <twi+0x30>
 4b6:	08 c0       	rjmp	.+16     	; 0x4c8 <twi+0x22>
		case TWI_START:
		case TWI_RESTART:
			TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
 4b8:	94 ea       	ldi	r25, 0xA4	; 164
 4ba:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			break;
 4be:	0b c0       	rjmp	.+22     	; 0x4d6 <twi+0x30>
		case TWI_STOP:
			TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
 4c0:	84 e9       	ldi	r24, 0x94	; 148
 4c2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 4c6:	0e c0       	rjmp	.+28     	; 0x4e4 <twi+0x3e>
			break;
		case TWI_TRANSMIT:
		case TWI_RECEIVE_NACK:
			TWCR = (1<<TWINT)|(1<<TWEN);
 4c8:	94 e8       	ldi	r25, 0x84	; 132
 4ca:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			break;
 4ce:	03 c0       	rjmp	.+6      	; 0x4d6 <twi+0x30>
		case TWI_RECEIVE_ACK:
			TWCR = (1<<TWINT)|(1<<TWEA)|(1<<TWEN);
 4d0:	94 ec       	ldi	r25, 0xC4	; 196
 4d2:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			break;
		default:
			break;
	}
	
	if (action != TWI_STOP)
 4d6:	82 30       	cpi	r24, 0x02	; 2
 4d8:	29 f0       	breq	.+10     	; 0x4e4 <twi+0x3e>
	{
		while (!(TWCR & (1<<TWINT)));
 4da:	ec eb       	ldi	r30, 0xBC	; 188
 4dc:	f0 e0       	ldi	r31, 0x00	; 0
 4de:	80 81       	ld	r24, Z
 4e0:	88 23       	and	r24, r24
 4e2:	ec f7       	brge	.-6      	; 0x4de <twi+0x38>
	}
	
	uint8_t status = TWSR & 0xF8; // Статус выполнения (0xF8 = 11111000 - без двух настроечных и одного зарезервивованного бита)
 4e4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	return status;
}
 4e8:	88 7f       	andi	r24, 0xF8	; 248
 4ea:	08 95       	ret

000004ec <twi_transmit>:

/* Передать данные */
uint8_t twi_transmit(uint8_t data)
{
	TWDR = data;
 4ec:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	return twi(TWI_TRANSMIT);
 4f0:	83 e0       	ldi	r24, 0x03	; 3
 4f2:	0e 94 53 02 	call	0x4a6	; 0x4a6 <twi>
}
 4f6:	08 95       	ret

000004f8 <twi_receive>:

/* Получить данные */
uint8_t twi_receive(uint8_t * data, uint8_t with_ack)
{
 4f8:	cf 93       	push	r28
 4fa:	df 93       	push	r29
 4fc:	ec 01       	movw	r28, r24
	uint8_t status = twi(with_ack > 0 ? TWI_RECEIVE_ACK : TWI_RECEIVE_NACK);
 4fe:	61 11       	cpse	r22, r1
 500:	02 c0       	rjmp	.+4      	; 0x506 <twi_receive+0xe>
 502:	85 e0       	ldi	r24, 0x05	; 5
 504:	01 c0       	rjmp	.+2      	; 0x508 <twi_receive+0x10>
 506:	84 e0       	ldi	r24, 0x04	; 4
 508:	0e 94 53 02 	call	0x4a6	; 0x4a6 <twi>
	*data = TWDR;
 50c:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 510:	98 83       	st	Y, r25
	return status;
 512:	df 91       	pop	r29
 514:	cf 91       	pop	r28
 516:	08 95       	ret

00000518 <init_UART>:
{
	data = buffer;		// Переносим буфер
	data_to_send = sz;	// Переносим размер
	data_i = 0;		// Инициализируем счетчик
	sei();			// Разрешаем прерывания
	UCSR0B |= (1<<UDRIE0);	// Разрешаем прерывание по "пустому" UDRE
 518:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 51c:	88 e0       	ldi	r24, 0x08	; 8
 51e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 522:	86 e0       	ldi	r24, 0x06	; 6
 524:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 528:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 52c:	87 e6       	ldi	r24, 0x67	; 103
 52e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 532:	08 95       	ret

00000534 <__vector_19>:
 534:	1f 92       	push	r1
 536:	0f 92       	push	r0
 538:	0f b6       	in	r0, 0x3f	; 63
 53a:	0f 92       	push	r0
 53c:	11 24       	eor	r1, r1
 53e:	8f 93       	push	r24
 540:	9f 93       	push	r25
 542:	ef 93       	push	r30
 544:	ff 93       	push	r31
 546:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <data_i>
 54a:	e0 91 94 01 	lds	r30, 0x0194	; 0x800194 <data>
 54e:	f0 91 95 01 	lds	r31, 0x0195	; 0x800195 <data+0x1>
 552:	e8 0f       	add	r30, r24
 554:	f1 1d       	adc	r31, r1
 556:	80 81       	ld	r24, Z
 558:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 55c:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <data_i>
 560:	8f 5f       	subi	r24, 0xFF	; 255
 562:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <data_i>
 566:	90 91 92 01 	lds	r25, 0x0192	; 0x800192 <__data_end>
 56a:	89 13       	cpse	r24, r25
 56c:	06 c0       	rjmp	.+12     	; 0x57a <__vector_19+0x46>
 56e:	e1 ec       	ldi	r30, 0xC1	; 193
 570:	f0 e0       	ldi	r31, 0x00	; 0
 572:	80 81       	ld	r24, Z
 574:	8f 7d       	andi	r24, 0xDF	; 223
 576:	80 83       	st	Z, r24
 578:	f8 94       	cli
 57a:	ff 91       	pop	r31
 57c:	ef 91       	pop	r30
 57e:	9f 91       	pop	r25
 580:	8f 91       	pop	r24
 582:	0f 90       	pop	r0
 584:	0f be       	out	0x3f, r0	; 63
 586:	0f 90       	pop	r0
 588:	1f 90       	pop	r1
 58a:	18 95       	reti

0000058c <send_byte>:
}

/* Функция для передачи байта без прерываний */
void send_byte(uint8_t byte)
{
	while(!( UCSR0A & (1 << UDRE0))) ;	// ожидаем, пока UDR0 не будет нулевым (не закончится передача)
 58c:	e0 ec       	ldi	r30, 0xC0	; 192
 58e:	f0 e0       	ldi	r31, 0x00	; 0
 590:	90 81       	ld	r25, Z
 592:	95 ff       	sbrs	r25, 5
 594:	fd cf       	rjmp	.-6      	; 0x590 <send_byte+0x4>
	UDR0 = byte;				// записываем байт в порт
 596:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 59a:	08 95       	ret

0000059c <send_buffer>:
}

/* Функция для передачи строки без прерываний */
void send_buffer(char * buffer, uint8_t sz)
{
 59c:	0f 93       	push	r16
 59e:	1f 93       	push	r17
 5a0:	cf 93       	push	r28
 5a2:	df 93       	push	r29
	for (uint8_t i = 0; i < sz; ++i)
 5a4:	66 23       	and	r22, r22
 5a6:	71 f0       	breq	.+28     	; 0x5c4 <send_buffer+0x28>
 5a8:	ec 01       	movw	r28, r24
 5aa:	61 50       	subi	r22, 0x01	; 1
 5ac:	06 2f       	mov	r16, r22
 5ae:	10 e0       	ldi	r17, 0x00	; 0
 5b0:	0f 5f       	subi	r16, 0xFF	; 255
 5b2:	1f 4f       	sbci	r17, 0xFF	; 255
 5b4:	08 0f       	add	r16, r24
 5b6:	19 1f       	adc	r17, r25
	send_byte(buffer[i]);
 5b8:	89 91       	ld	r24, Y+
 5ba:	0e 94 c6 02 	call	0x58c	; 0x58c <send_byte>
}

/* Функция для передачи строки без прерываний */
void send_buffer(char * buffer, uint8_t sz)
{
	for (uint8_t i = 0; i < sz; ++i)
 5be:	c0 17       	cp	r28, r16
 5c0:	d1 07       	cpc	r29, r17
 5c2:	d1 f7       	brne	.-12     	; 0x5b8 <send_buffer+0x1c>
	send_byte(buffer[i]);
 5c4:	df 91       	pop	r29
 5c6:	cf 91       	pop	r28
 5c8:	1f 91       	pop	r17
 5ca:	0f 91       	pop	r16
 5cc:	08 95       	ret

000005ce <main>:

const char * weekdays[7] =
	{"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"};

int main(void)
{
 5ce:	cf 93       	push	r28
 5d0:	df 93       	push	r29
 5d2:	cd b7       	in	r28, 0x3d	; 61
 5d4:	de b7       	in	r29, 0x3e	; 62
 5d6:	2e 97       	sbiw	r28, 0x0e	; 14
 5d8:	0f b6       	in	r0, 0x3f	; 63
 5da:	f8 94       	cli
 5dc:	de bf       	out	0x3e, r29	; 62
 5de:	0f be       	out	0x3f, r0	; 63
 5e0:	cd bf       	out	0x3d, r28	; 61
	// Предделитель частоты 1
	CLKPR=(1<<CLKPCE);
 5e2:	e1 e6       	ldi	r30, 0x61	; 97
 5e4:	f0 e0       	ldi	r31, 0x00	; 0
 5e6:	80 e8       	ldi	r24, 0x80	; 128
 5e8:	80 83       	st	Z, r24
	CLKPR=0;
 5ea:	10 82       	st	Z, r1
	
	init_UART();
 5ec:	0e 94 8c 02 	call	0x518	; 0x518 <init_UART>
	
	RTC_init();
 5f0:	0e 94 71 00 	call	0xe2	; 0xe2 <RTC_init>
	
	// Запись во второй байт памяти числа 136
	uint8_t ram_status = RTC_write_RAM(RTC_RAM_ADR+1, 136);
 5f4:	68 e8       	ldi	r22, 0x88	; 136
 5f6:	89 e0       	ldi	r24, 0x09	; 9
 5f8:	0e 94 d6 01 	call	0x3ac	; 0x3ac <RTC_write_RAM>
	
	if (ram_status)
 5fc:	88 23       	and	r24, r24
 5fe:	19 f1       	breq	.+70     	; 0x646 <main+0x78>
	{
		// Чтение из RAM
		uint8_t ram_data;
		ram_status = RTC_get_RAM(RTC_RAM_ADR+1, &ram_data);
 600:	be 01       	movw	r22, r28
 602:	66 5f       	subi	r22, 0xF6	; 246
 604:	7f 4f       	sbci	r23, 0xFF	; 255
 606:	89 e0       	ldi	r24, 0x09	; 9
 608:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <RTC_get_RAM>
		
		if (ram_status)
 60c:	88 23       	and	r24, r24
 60e:	d9 f0       	breq	.+54     	; 0x646 <main+0x78>
		{
			sprintf(mes, "read from RAM: %u", ram_data);
 610:	8a 85       	ldd	r24, Y+10	; 0x0a
 612:	1f 92       	push	r1
 614:	8f 93       	push	r24
 616:	8e e1       	ldi	r24, 0x1E	; 30
 618:	91 e0       	ldi	r25, 0x01	; 1
 61a:	9f 93       	push	r25
 61c:	8f 93       	push	r24
 61e:	86 e9       	ldi	r24, 0x96	; 150
 620:	91 e0       	ldi	r25, 0x01	; 1
 622:	9f 93       	push	r25
 624:	8f 93       	push	r24
 626:	0e 94 29 04 	call	0x852	; 0x852 <sprintf>
			send_buffer(mes, sizeof(mes) / sizeof(char));
 62a:	64 e1       	ldi	r22, 0x14	; 20
 62c:	86 e9       	ldi	r24, 0x96	; 150
 62e:	91 e0       	ldi	r25, 0x01	; 1
 630:	0e 94 ce 02 	call	0x59c	; 0x59c <send_buffer>
			send_byte('\r');
 634:	8d e0       	ldi	r24, 0x0D	; 13
 636:	0e 94 c6 02 	call	0x58c	; 0x58c <send_byte>
 63a:	0f 90       	pop	r0
 63c:	0f 90       	pop	r0
 63e:	0f 90       	pop	r0
 640:	0f 90       	pop	r0
 642:	0f 90       	pop	r0
 644:	0f 90       	pop	r0
		}
	}
	
	RTC_set_out(1); // На выходе OUT=1
 646:	81 e0       	ldi	r24, 0x01	; 1
 648:	0e 94 a7 00 	call	0x14e	; 0x14e <RTC_set_out>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 64c:	2f ef       	ldi	r18, 0xFF	; 255
 64e:	83 ec       	ldi	r24, 0xC3	; 195
 650:	99 e0       	ldi	r25, 0x09	; 9
 652:	21 50       	subi	r18, 0x01	; 1
 654:	80 40       	sbci	r24, 0x00	; 0
 656:	90 40       	sbci	r25, 0x00	; 0
 658:	e1 f7       	brne	.-8      	; 0x652 <main+0x84>
 65a:	00 c0       	rjmp	.+0      	; 0x65c <main+0x8e>
 65c:	00 00       	nop
	_delay_ms(200);
	
	RTC_set_out(0); // На выходе OUT=0
 65e:	80 e0       	ldi	r24, 0x00	; 0
 660:	0e 94 a7 00 	call	0x14e	; 0x14e <RTC_set_out>
 664:	2f ef       	ldi	r18, 0xFF	; 255
 666:	83 ec       	ldi	r24, 0xC3	; 195
 668:	99 e0       	ldi	r25, 0x09	; 9
 66a:	21 50       	subi	r18, 0x01	; 1
 66c:	80 40       	sbci	r24, 0x00	; 0
 66e:	90 40       	sbci	r25, 0x00	; 0
 670:	e1 f7       	brne	.-8      	; 0x66a <main+0x9c>
 672:	00 c0       	rjmp	.+0      	; 0x674 <main+0xa6>
 674:	00 00       	nop
	_delay_ms(200);
	
	RTC_set_sqwe(F_1HZ); // Включить сигнал частотой 1 Гц
 676:	80 e0       	ldi	r24, 0x00	; 0
 678:	0e 94 af 00 	call	0x15e	; 0x15e <RTC_set_sqwe>
	
	Date date = {28, 12, 24, 7}; // установить дату 28.12.2024 Суббота
 67c:	8c e1       	ldi	r24, 0x1C	; 28
 67e:	89 83       	std	Y+1, r24	; 0x01
 680:	8c e0       	ldi	r24, 0x0C	; 12
 682:	8a 83       	std	Y+2, r24	; 0x02
 684:	88 e1       	ldi	r24, 0x18	; 24
 686:	8b 83       	std	Y+3, r24	; 0x03
 688:	87 e0       	ldi	r24, 0x07	; 7
 68a:	8c 83       	std	Y+4, r24	; 0x04
	RTC_set_date(date);
 68c:	69 81       	ldd	r22, Y+1	; 0x01
 68e:	7a 81       	ldd	r23, Y+2	; 0x02
 690:	8b 81       	ldd	r24, Y+3	; 0x03
 692:	9c 81       	ldd	r25, Y+4	; 0x04
 694:	0e 94 d6 00 	call	0x1ac	; 0x1ac <RTC_set_date>
	
	Time time = { 13, 45, 37, 24, PM }; // установить время 13:45:37 в формате 24 часа PM
 698:	85 e0       	ldi	r24, 0x05	; 5
 69a:	ee e0       	ldi	r30, 0x0E	; 14
 69c:	f1 e0       	ldi	r31, 0x01	; 1
 69e:	de 01       	movw	r26, r28
 6a0:	15 96       	adiw	r26, 0x05	; 5
 6a2:	01 90       	ld	r0, Z+
 6a4:	0d 92       	st	X+, r0
 6a6:	8a 95       	dec	r24
 6a8:	e1 f7       	brne	.-8      	; 0x6a2 <main+0xd4>
	RTC_set_time(time);	 
 6aa:	4d 81       	ldd	r20, Y+5	; 0x05
 6ac:	5e 81       	ldd	r21, Y+6	; 0x06
 6ae:	6f 81       	ldd	r22, Y+7	; 0x07
 6b0:	78 85       	ldd	r23, Y+8	; 0x08
 6b2:	89 85       	ldd	r24, Y+9	; 0x09
 6b4:	0e 94 05 01 	call	0x20a	; 0x20a <RTC_set_time>
	
	RTC_start_stop_watch(STOP_CLOCK);	// выключить часы
 6b8:	80 e0       	ldi	r24, 0x00	; 0
 6ba:	0e 94 b5 00 	call	0x16a	; 0x16a <RTC_start_stop_watch>

	int ticks = 0;
 6be:	e1 2c       	mov	r14, r1
 6c0:	f1 2c       	mov	r15, r1
			Date new_date = { 6, 1, 25, 2 }; // установить дату 06.01.2025 Понедельник
			RTC_set_date(new_date);
		}
		
		RTC_get_time(&time);
		sprintf(mes, "%02u:%02u:%02u %u %s\r", time.hours, time.minutes, time.seconds, time.time_format, time.am_pm == AM ? "AM" : "PM");
 6c2:	0f 2e       	mov	r0, r31
 6c4:	f8 e1       	ldi	r31, 0x18	; 24
 6c6:	8f 2e       	mov	r8, r31
 6c8:	f1 e0       	ldi	r31, 0x01	; 1
 6ca:	9f 2e       	mov	r9, r31
 6cc:	f0 2d       	mov	r31, r0
 6ce:	0f 2e       	mov	r0, r31
 6d0:	fb e1       	ldi	r31, 0x1B	; 27
 6d2:	6f 2e       	mov	r6, r31
 6d4:	f1 e0       	ldi	r31, 0x01	; 1
 6d6:	7f 2e       	mov	r7, r31
 6d8:	f0 2d       	mov	r31, r0
 6da:	0f 2e       	mov	r0, r31
 6dc:	f0 e3       	ldi	r31, 0x30	; 48
 6de:	af 2e       	mov	r10, r31
 6e0:	f1 e0       	ldi	r31, 0x01	; 1
 6e2:	bf 2e       	mov	r11, r31
 6e4:	f0 2d       	mov	r31, r0
 6e6:	06 e9       	ldi	r16, 0x96	; 150
 6e8:	11 e0       	ldi	r17, 0x01	; 1
		send_buffer(mes, strlen(mes));
		//send_byte('\r');
		
		RTC_get_date(&date);
		sprintf(mes, "%02u.%02u.%02u %s\r", date.day, date.month, date.year, weekdays[date.day_week-1]);
 6ea:	0f 2e       	mov	r0, r31
 6ec:	f6 e4       	ldi	r31, 0x46	; 70
 6ee:	cf 2e       	mov	r12, r31
 6f0:	f1 e0       	ldi	r31, 0x01	; 1
 6f2:	df 2e       	mov	r13, r31
 6f4:	f0 2d       	mov	r31, r0
	
	/* Пишем в порт дату и время */
	while (1)
	{
		// Через 2 секунды включить часы
		if (ticks < 2)
 6f6:	22 e0       	ldi	r18, 0x02	; 2
 6f8:	e2 16       	cp	r14, r18
 6fa:	f1 04       	cpc	r15, r1
 6fc:	24 f4       	brge	.+8      	; 0x706 <main+0x138>
		{
			++ticks;
 6fe:	8f ef       	ldi	r24, 0xFF	; 255
 700:	e8 1a       	sub	r14, r24
 702:	f8 0a       	sbc	r15, r24
 704:	22 c0       	rjmp	.+68     	; 0x74a <main+0x17c>
			} else if (ticks == 2) {
 706:	92 e0       	ldi	r25, 0x02	; 2
 708:	e9 16       	cp	r14, r25
 70a:	f1 04       	cpc	r15, r1
 70c:	f1 f4       	brne	.+60     	; 0x74a <main+0x17c>
			RTC_start_stop_watch(START_CLOCK);
 70e:	81 e0       	ldi	r24, 0x01	; 1
 710:	0e 94 b5 00 	call	0x16a	; 0x16a <RTC_start_stop_watch>
			++ticks;
			
			Time new_time = { 11, 59, 58, 12, AM }; // установить время 11:59:58 в формате 12 часов AM
 714:	85 e0       	ldi	r24, 0x05	; 5
 716:	e3 e1       	ldi	r30, 0x13	; 19
 718:	f1 e0       	ldi	r31, 0x01	; 1
 71a:	de 01       	movw	r26, r28
 71c:	1a 96       	adiw	r26, 0x0a	; 10
 71e:	01 90       	ld	r0, Z+
 720:	0d 92       	st	X+, r0
 722:	8a 95       	dec	r24
 724:	e1 f7       	brne	.-8      	; 0x71e <main+0x150>
			RTC_set_time(new_time);
 726:	4a 85       	ldd	r20, Y+10	; 0x0a
 728:	5b 85       	ldd	r21, Y+11	; 0x0b
 72a:	6c 85       	ldd	r22, Y+12	; 0x0c
 72c:	7d 85       	ldd	r23, Y+13	; 0x0d
 72e:	8e 85       	ldd	r24, Y+14	; 0x0e
 730:	0e 94 05 01 	call	0x20a	; 0x20a <RTC_set_time>
			
			Date new_date = { 6, 1, 25, 2 }; // установить дату 06.01.2025 Понедельник
			RTC_set_date(new_date);
 734:	66 e0       	ldi	r22, 0x06	; 6
 736:	71 e0       	ldi	r23, 0x01	; 1
 738:	89 e1       	ldi	r24, 0x19	; 25
 73a:	92 e0       	ldi	r25, 0x02	; 2
 73c:	0e 94 d6 00 	call	0x1ac	; 0x1ac <RTC_set_date>
		if (ticks < 2)
		{
			++ticks;
			} else if (ticks == 2) {
			RTC_start_stop_watch(START_CLOCK);
			++ticks;
 740:	0f 2e       	mov	r0, r31
 742:	f3 e0       	ldi	r31, 0x03	; 3
 744:	ef 2e       	mov	r14, r31
 746:	f1 2c       	mov	r15, r1
 748:	f0 2d       	mov	r31, r0
			
			Date new_date = { 6, 1, 25, 2 }; // установить дату 06.01.2025 Понедельник
			RTC_set_date(new_date);
		}
		
		RTC_get_time(&time);
 74a:	ce 01       	movw	r24, r28
 74c:	05 96       	adiw	r24, 0x05	; 5
 74e:	0e 94 90 01 	call	0x320	; 0x320 <RTC_get_time>
		sprintf(mes, "%02u:%02u:%02u %u %s\r", time.hours, time.minutes, time.seconds, time.time_format, time.am_pm == AM ? "AM" : "PM");
 752:	89 85       	ldd	r24, Y+9	; 0x09
 754:	88 23       	and	r24, r24
 756:	19 f0       	breq	.+6      	; 0x75e <main+0x190>
 758:	86 2d       	mov	r24, r6
 75a:	97 2d       	mov	r25, r7
 75c:	02 c0       	rjmp	.+4      	; 0x762 <main+0x194>
 75e:	88 2d       	mov	r24, r8
 760:	99 2d       	mov	r25, r9
 762:	9f 93       	push	r25
 764:	8f 93       	push	r24
 766:	88 85       	ldd	r24, Y+8	; 0x08
 768:	1f 92       	push	r1
 76a:	8f 93       	push	r24
 76c:	8f 81       	ldd	r24, Y+7	; 0x07
 76e:	1f 92       	push	r1
 770:	8f 93       	push	r24
 772:	8e 81       	ldd	r24, Y+6	; 0x06
 774:	1f 92       	push	r1
 776:	8f 93       	push	r24
 778:	8d 81       	ldd	r24, Y+5	; 0x05
 77a:	1f 92       	push	r1
 77c:	8f 93       	push	r24
 77e:	bf 92       	push	r11
 780:	af 92       	push	r10
 782:	1f 93       	push	r17
 784:	0f 93       	push	r16
 786:	0e 94 29 04 	call	0x852	; 0x852 <sprintf>
		send_buffer(mes, strlen(mes));
 78a:	f8 01       	movw	r30, r16
 78c:	01 90       	ld	r0, Z+
 78e:	00 20       	and	r0, r0
 790:	e9 f7       	brne	.-6      	; 0x78c <main+0x1be>
 792:	31 97       	sbiw	r30, 0x01	; 1
 794:	bf 01       	movw	r22, r30
 796:	66 59       	subi	r22, 0x96	; 150
 798:	71 40       	sbci	r23, 0x01	; 1
 79a:	c8 01       	movw	r24, r16
 79c:	0e 94 ce 02 	call	0x59c	; 0x59c <send_buffer>
		//send_byte('\r');
		
		RTC_get_date(&date);
 7a0:	ce 01       	movw	r24, r28
 7a2:	01 96       	adiw	r24, 0x01	; 1
 7a4:	0e 94 5e 01 	call	0x2bc	; 0x2bc <RTC_get_date>
		sprintf(mes, "%02u.%02u.%02u %s\r", date.day, date.month, date.year, weekdays[date.day_week-1]);
 7a8:	ec 81       	ldd	r30, Y+4	; 0x04
 7aa:	f0 e0       	ldi	r31, 0x00	; 0
 7ac:	ee 0f       	add	r30, r30
 7ae:	ff 1f       	adc	r31, r31
 7b0:	e2 50       	subi	r30, 0x02	; 2
 7b2:	ff 4f       	sbci	r31, 0xFF	; 255
 7b4:	81 81       	ldd	r24, Z+1	; 0x01
 7b6:	8f 93       	push	r24
 7b8:	80 81       	ld	r24, Z
 7ba:	8f 93       	push	r24
 7bc:	8b 81       	ldd	r24, Y+3	; 0x03
 7be:	1f 92       	push	r1
 7c0:	8f 93       	push	r24
 7c2:	8a 81       	ldd	r24, Y+2	; 0x02
 7c4:	1f 92       	push	r1
 7c6:	8f 93       	push	r24
 7c8:	89 81       	ldd	r24, Y+1	; 0x01
 7ca:	1f 92       	push	r1
 7cc:	8f 93       	push	r24
 7ce:	df 92       	push	r13
 7d0:	cf 92       	push	r12
 7d2:	1f 93       	push	r17
 7d4:	0f 93       	push	r16
 7d6:	0e 94 29 04 	call	0x852	; 0x852 <sprintf>
		send_buffer(mes, strlen(mes));
 7da:	f8 01       	movw	r30, r16
 7dc:	01 90       	ld	r0, Z+
 7de:	00 20       	and	r0, r0
 7e0:	e9 f7       	brne	.-6      	; 0x7dc <main+0x20e>
 7e2:	31 97       	sbiw	r30, 0x01	; 1
 7e4:	bf 01       	movw	r22, r30
 7e6:	66 59       	subi	r22, 0x96	; 150
 7e8:	71 40       	sbci	r23, 0x01	; 1
 7ea:	c8 01       	movw	r24, r16
 7ec:	0e 94 ce 02 	call	0x59c	; 0x59c <send_buffer>
 7f0:	2f ef       	ldi	r18, 0xFF	; 255
 7f2:	83 ed       	ldi	r24, 0xD3	; 211
 7f4:	90 e3       	ldi	r25, 0x30	; 48
 7f6:	21 50       	subi	r18, 0x01	; 1
 7f8:	80 40       	sbci	r24, 0x00	; 0
 7fa:	90 40       	sbci	r25, 0x00	; 0
 7fc:	e1 f7       	brne	.-8      	; 0x7f6 <main+0x228>
 7fe:	00 c0       	rjmp	.+0      	; 0x800 <main+0x232>
 800:	00 00       	nop
 802:	0f b6       	in	r0, 0x3f	; 63
 804:	f8 94       	cli
 806:	de bf       	out	0x3e, r29	; 62
 808:	0f be       	out	0x3f, r0	; 63
 80a:	cd bf       	out	0x3d, r28	; 61
 80c:	74 cf       	rjmp	.-280    	; 0x6f6 <main+0x128>

0000080e <__udivmodsi4>:
 80e:	a1 e2       	ldi	r26, 0x21	; 33
 810:	1a 2e       	mov	r1, r26
 812:	aa 1b       	sub	r26, r26
 814:	bb 1b       	sub	r27, r27
 816:	fd 01       	movw	r30, r26
 818:	0d c0       	rjmp	.+26     	; 0x834 <__udivmodsi4_ep>

0000081a <__udivmodsi4_loop>:
 81a:	aa 1f       	adc	r26, r26
 81c:	bb 1f       	adc	r27, r27
 81e:	ee 1f       	adc	r30, r30
 820:	ff 1f       	adc	r31, r31
 822:	a2 17       	cp	r26, r18
 824:	b3 07       	cpc	r27, r19
 826:	e4 07       	cpc	r30, r20
 828:	f5 07       	cpc	r31, r21
 82a:	20 f0       	brcs	.+8      	; 0x834 <__udivmodsi4_ep>
 82c:	a2 1b       	sub	r26, r18
 82e:	b3 0b       	sbc	r27, r19
 830:	e4 0b       	sbc	r30, r20
 832:	f5 0b       	sbc	r31, r21

00000834 <__udivmodsi4_ep>:
 834:	66 1f       	adc	r22, r22
 836:	77 1f       	adc	r23, r23
 838:	88 1f       	adc	r24, r24
 83a:	99 1f       	adc	r25, r25
 83c:	1a 94       	dec	r1
 83e:	69 f7       	brne	.-38     	; 0x81a <__udivmodsi4_loop>
 840:	60 95       	com	r22
 842:	70 95       	com	r23
 844:	80 95       	com	r24
 846:	90 95       	com	r25
 848:	9b 01       	movw	r18, r22
 84a:	ac 01       	movw	r20, r24
 84c:	bd 01       	movw	r22, r26
 84e:	cf 01       	movw	r24, r30
 850:	08 95       	ret

00000852 <sprintf>:
 852:	ae e0       	ldi	r26, 0x0E	; 14
 854:	b0 e0       	ldi	r27, 0x00	; 0
 856:	ef e2       	ldi	r30, 0x2F	; 47
 858:	f4 e0       	ldi	r31, 0x04	; 4
 85a:	0c 94 ea 06 	jmp	0xdd4	; 0xdd4 <__prologue_saves__+0x1c>
 85e:	0d 89       	ldd	r16, Y+21	; 0x15
 860:	1e 89       	ldd	r17, Y+22	; 0x16
 862:	86 e0       	ldi	r24, 0x06	; 6
 864:	8c 83       	std	Y+4, r24	; 0x04
 866:	1a 83       	std	Y+2, r17	; 0x02
 868:	09 83       	std	Y+1, r16	; 0x01
 86a:	8f ef       	ldi	r24, 0xFF	; 255
 86c:	9f e7       	ldi	r25, 0x7F	; 127
 86e:	9e 83       	std	Y+6, r25	; 0x06
 870:	8d 83       	std	Y+5, r24	; 0x05
 872:	ae 01       	movw	r20, r28
 874:	47 5e       	subi	r20, 0xE7	; 231
 876:	5f 4f       	sbci	r21, 0xFF	; 255
 878:	6f 89       	ldd	r22, Y+23	; 0x17
 87a:	78 8d       	ldd	r23, Y+24	; 0x18
 87c:	ce 01       	movw	r24, r28
 87e:	01 96       	adiw	r24, 0x01	; 1
 880:	0e 94 4b 04 	call	0x896	; 0x896 <vfprintf>
 884:	ef 81       	ldd	r30, Y+7	; 0x07
 886:	f8 85       	ldd	r31, Y+8	; 0x08
 888:	e0 0f       	add	r30, r16
 88a:	f1 1f       	adc	r31, r17
 88c:	10 82       	st	Z, r1
 88e:	2e 96       	adiw	r28, 0x0e	; 14
 890:	e4 e0       	ldi	r30, 0x04	; 4
 892:	0c 94 06 07 	jmp	0xe0c	; 0xe0c <__epilogue_restores__+0x1c>

00000896 <vfprintf>:
 896:	ab e0       	ldi	r26, 0x0B	; 11
 898:	b0 e0       	ldi	r27, 0x00	; 0
 89a:	e1 e5       	ldi	r30, 0x51	; 81
 89c:	f4 e0       	ldi	r31, 0x04	; 4
 89e:	0c 94 dc 06 	jmp	0xdb8	; 0xdb8 <__prologue_saves__>
 8a2:	6c 01       	movw	r12, r24
 8a4:	7b 01       	movw	r14, r22
 8a6:	8a 01       	movw	r16, r20
 8a8:	fc 01       	movw	r30, r24
 8aa:	17 82       	std	Z+7, r1	; 0x07
 8ac:	16 82       	std	Z+6, r1	; 0x06
 8ae:	83 81       	ldd	r24, Z+3	; 0x03
 8b0:	81 ff       	sbrs	r24, 1
 8b2:	cc c1       	rjmp	.+920    	; 0xc4c <__stack+0x34d>
 8b4:	ce 01       	movw	r24, r28
 8b6:	01 96       	adiw	r24, 0x01	; 1
 8b8:	3c 01       	movw	r6, r24
 8ba:	f6 01       	movw	r30, r12
 8bc:	93 81       	ldd	r25, Z+3	; 0x03
 8be:	f7 01       	movw	r30, r14
 8c0:	93 fd       	sbrc	r25, 3
 8c2:	85 91       	lpm	r24, Z+
 8c4:	93 ff       	sbrs	r25, 3
 8c6:	81 91       	ld	r24, Z+
 8c8:	7f 01       	movw	r14, r30
 8ca:	88 23       	and	r24, r24
 8cc:	09 f4       	brne	.+2      	; 0x8d0 <vfprintf+0x3a>
 8ce:	ba c1       	rjmp	.+884    	; 0xc44 <__stack+0x345>
 8d0:	85 32       	cpi	r24, 0x25	; 37
 8d2:	39 f4       	brne	.+14     	; 0x8e2 <vfprintf+0x4c>
 8d4:	93 fd       	sbrc	r25, 3
 8d6:	85 91       	lpm	r24, Z+
 8d8:	93 ff       	sbrs	r25, 3
 8da:	81 91       	ld	r24, Z+
 8dc:	7f 01       	movw	r14, r30
 8de:	85 32       	cpi	r24, 0x25	; 37
 8e0:	29 f4       	brne	.+10     	; 0x8ec <vfprintf+0x56>
 8e2:	b6 01       	movw	r22, r12
 8e4:	90 e0       	ldi	r25, 0x00	; 0
 8e6:	0e 94 42 06 	call	0xc84	; 0xc84 <fputc>
 8ea:	e7 cf       	rjmp	.-50     	; 0x8ba <vfprintf+0x24>
 8ec:	91 2c       	mov	r9, r1
 8ee:	21 2c       	mov	r2, r1
 8f0:	31 2c       	mov	r3, r1
 8f2:	ff e1       	ldi	r31, 0x1F	; 31
 8f4:	f3 15       	cp	r31, r3
 8f6:	d8 f0       	brcs	.+54     	; 0x92e <__stack+0x2f>
 8f8:	8b 32       	cpi	r24, 0x2B	; 43
 8fa:	79 f0       	breq	.+30     	; 0x91a <__stack+0x1b>
 8fc:	38 f4       	brcc	.+14     	; 0x90c <__stack+0xd>
 8fe:	80 32       	cpi	r24, 0x20	; 32
 900:	79 f0       	breq	.+30     	; 0x920 <__stack+0x21>
 902:	83 32       	cpi	r24, 0x23	; 35
 904:	a1 f4       	brne	.+40     	; 0x92e <__stack+0x2f>
 906:	23 2d       	mov	r18, r3
 908:	20 61       	ori	r18, 0x10	; 16
 90a:	1d c0       	rjmp	.+58     	; 0x946 <__stack+0x47>
 90c:	8d 32       	cpi	r24, 0x2D	; 45
 90e:	61 f0       	breq	.+24     	; 0x928 <__stack+0x29>
 910:	80 33       	cpi	r24, 0x30	; 48
 912:	69 f4       	brne	.+26     	; 0x92e <__stack+0x2f>
 914:	23 2d       	mov	r18, r3
 916:	21 60       	ori	r18, 0x01	; 1
 918:	16 c0       	rjmp	.+44     	; 0x946 <__stack+0x47>
 91a:	83 2d       	mov	r24, r3
 91c:	82 60       	ori	r24, 0x02	; 2
 91e:	38 2e       	mov	r3, r24
 920:	e3 2d       	mov	r30, r3
 922:	e4 60       	ori	r30, 0x04	; 4
 924:	3e 2e       	mov	r3, r30
 926:	2a c0       	rjmp	.+84     	; 0x97c <__stack+0x7d>
 928:	f3 2d       	mov	r31, r3
 92a:	f8 60       	ori	r31, 0x08	; 8
 92c:	1d c0       	rjmp	.+58     	; 0x968 <__stack+0x69>
 92e:	37 fc       	sbrc	r3, 7
 930:	2d c0       	rjmp	.+90     	; 0x98c <__stack+0x8d>
 932:	20 ed       	ldi	r18, 0xD0	; 208
 934:	28 0f       	add	r18, r24
 936:	2a 30       	cpi	r18, 0x0A	; 10
 938:	40 f0       	brcs	.+16     	; 0x94a <__stack+0x4b>
 93a:	8e 32       	cpi	r24, 0x2E	; 46
 93c:	b9 f4       	brne	.+46     	; 0x96c <__stack+0x6d>
 93e:	36 fc       	sbrc	r3, 6
 940:	81 c1       	rjmp	.+770    	; 0xc44 <__stack+0x345>
 942:	23 2d       	mov	r18, r3
 944:	20 64       	ori	r18, 0x40	; 64
 946:	32 2e       	mov	r3, r18
 948:	19 c0       	rjmp	.+50     	; 0x97c <__stack+0x7d>
 94a:	36 fe       	sbrs	r3, 6
 94c:	06 c0       	rjmp	.+12     	; 0x95a <__stack+0x5b>
 94e:	8a e0       	ldi	r24, 0x0A	; 10
 950:	98 9e       	mul	r9, r24
 952:	20 0d       	add	r18, r0
 954:	11 24       	eor	r1, r1
 956:	92 2e       	mov	r9, r18
 958:	11 c0       	rjmp	.+34     	; 0x97c <__stack+0x7d>
 95a:	ea e0       	ldi	r30, 0x0A	; 10
 95c:	2e 9e       	mul	r2, r30
 95e:	20 0d       	add	r18, r0
 960:	11 24       	eor	r1, r1
 962:	22 2e       	mov	r2, r18
 964:	f3 2d       	mov	r31, r3
 966:	f0 62       	ori	r31, 0x20	; 32
 968:	3f 2e       	mov	r3, r31
 96a:	08 c0       	rjmp	.+16     	; 0x97c <__stack+0x7d>
 96c:	8c 36       	cpi	r24, 0x6C	; 108
 96e:	21 f4       	brne	.+8      	; 0x978 <__stack+0x79>
 970:	83 2d       	mov	r24, r3
 972:	80 68       	ori	r24, 0x80	; 128
 974:	38 2e       	mov	r3, r24
 976:	02 c0       	rjmp	.+4      	; 0x97c <__stack+0x7d>
 978:	88 36       	cpi	r24, 0x68	; 104
 97a:	41 f4       	brne	.+16     	; 0x98c <__stack+0x8d>
 97c:	f7 01       	movw	r30, r14
 97e:	93 fd       	sbrc	r25, 3
 980:	85 91       	lpm	r24, Z+
 982:	93 ff       	sbrs	r25, 3
 984:	81 91       	ld	r24, Z+
 986:	7f 01       	movw	r14, r30
 988:	81 11       	cpse	r24, r1
 98a:	b3 cf       	rjmp	.-154    	; 0x8f2 <vfprintf+0x5c>
 98c:	98 2f       	mov	r25, r24
 98e:	9f 7d       	andi	r25, 0xDF	; 223
 990:	95 54       	subi	r25, 0x45	; 69
 992:	93 30       	cpi	r25, 0x03	; 3
 994:	28 f4       	brcc	.+10     	; 0x9a0 <__stack+0xa1>
 996:	0c 5f       	subi	r16, 0xFC	; 252
 998:	1f 4f       	sbci	r17, 0xFF	; 255
 99a:	9f e3       	ldi	r25, 0x3F	; 63
 99c:	99 83       	std	Y+1, r25	; 0x01
 99e:	0d c0       	rjmp	.+26     	; 0x9ba <__stack+0xbb>
 9a0:	83 36       	cpi	r24, 0x63	; 99
 9a2:	31 f0       	breq	.+12     	; 0x9b0 <__stack+0xb1>
 9a4:	83 37       	cpi	r24, 0x73	; 115
 9a6:	71 f0       	breq	.+28     	; 0x9c4 <__stack+0xc5>
 9a8:	83 35       	cpi	r24, 0x53	; 83
 9aa:	09 f0       	breq	.+2      	; 0x9ae <__stack+0xaf>
 9ac:	59 c0       	rjmp	.+178    	; 0xa60 <__stack+0x161>
 9ae:	21 c0       	rjmp	.+66     	; 0x9f2 <__stack+0xf3>
 9b0:	f8 01       	movw	r30, r16
 9b2:	80 81       	ld	r24, Z
 9b4:	89 83       	std	Y+1, r24	; 0x01
 9b6:	0e 5f       	subi	r16, 0xFE	; 254
 9b8:	1f 4f       	sbci	r17, 0xFF	; 255
 9ba:	88 24       	eor	r8, r8
 9bc:	83 94       	inc	r8
 9be:	91 2c       	mov	r9, r1
 9c0:	53 01       	movw	r10, r6
 9c2:	13 c0       	rjmp	.+38     	; 0x9ea <__stack+0xeb>
 9c4:	28 01       	movw	r4, r16
 9c6:	f2 e0       	ldi	r31, 0x02	; 2
 9c8:	4f 0e       	add	r4, r31
 9ca:	51 1c       	adc	r5, r1
 9cc:	f8 01       	movw	r30, r16
 9ce:	a0 80       	ld	r10, Z
 9d0:	b1 80       	ldd	r11, Z+1	; 0x01
 9d2:	36 fe       	sbrs	r3, 6
 9d4:	03 c0       	rjmp	.+6      	; 0x9dc <__stack+0xdd>
 9d6:	69 2d       	mov	r22, r9
 9d8:	70 e0       	ldi	r23, 0x00	; 0
 9da:	02 c0       	rjmp	.+4      	; 0x9e0 <__stack+0xe1>
 9dc:	6f ef       	ldi	r22, 0xFF	; 255
 9de:	7f ef       	ldi	r23, 0xFF	; 255
 9e0:	c5 01       	movw	r24, r10
 9e2:	0e 94 37 06 	call	0xc6e	; 0xc6e <strnlen>
 9e6:	4c 01       	movw	r8, r24
 9e8:	82 01       	movw	r16, r4
 9ea:	f3 2d       	mov	r31, r3
 9ec:	ff 77       	andi	r31, 0x7F	; 127
 9ee:	3f 2e       	mov	r3, r31
 9f0:	16 c0       	rjmp	.+44     	; 0xa1e <__stack+0x11f>
 9f2:	28 01       	movw	r4, r16
 9f4:	22 e0       	ldi	r18, 0x02	; 2
 9f6:	42 0e       	add	r4, r18
 9f8:	51 1c       	adc	r5, r1
 9fa:	f8 01       	movw	r30, r16
 9fc:	a0 80       	ld	r10, Z
 9fe:	b1 80       	ldd	r11, Z+1	; 0x01
 a00:	36 fe       	sbrs	r3, 6
 a02:	03 c0       	rjmp	.+6      	; 0xa0a <__stack+0x10b>
 a04:	69 2d       	mov	r22, r9
 a06:	70 e0       	ldi	r23, 0x00	; 0
 a08:	02 c0       	rjmp	.+4      	; 0xa0e <__stack+0x10f>
 a0a:	6f ef       	ldi	r22, 0xFF	; 255
 a0c:	7f ef       	ldi	r23, 0xFF	; 255
 a0e:	c5 01       	movw	r24, r10
 a10:	0e 94 2c 06 	call	0xc58	; 0xc58 <strnlen_P>
 a14:	4c 01       	movw	r8, r24
 a16:	f3 2d       	mov	r31, r3
 a18:	f0 68       	ori	r31, 0x80	; 128
 a1a:	3f 2e       	mov	r3, r31
 a1c:	82 01       	movw	r16, r4
 a1e:	33 fc       	sbrc	r3, 3
 a20:	1b c0       	rjmp	.+54     	; 0xa58 <__stack+0x159>
 a22:	82 2d       	mov	r24, r2
 a24:	90 e0       	ldi	r25, 0x00	; 0
 a26:	88 16       	cp	r8, r24
 a28:	99 06       	cpc	r9, r25
 a2a:	b0 f4       	brcc	.+44     	; 0xa58 <__stack+0x159>
 a2c:	b6 01       	movw	r22, r12
 a2e:	80 e2       	ldi	r24, 0x20	; 32
 a30:	90 e0       	ldi	r25, 0x00	; 0
 a32:	0e 94 42 06 	call	0xc84	; 0xc84 <fputc>
 a36:	2a 94       	dec	r2
 a38:	f4 cf       	rjmp	.-24     	; 0xa22 <__stack+0x123>
 a3a:	f5 01       	movw	r30, r10
 a3c:	37 fc       	sbrc	r3, 7
 a3e:	85 91       	lpm	r24, Z+
 a40:	37 fe       	sbrs	r3, 7
 a42:	81 91       	ld	r24, Z+
 a44:	5f 01       	movw	r10, r30
 a46:	b6 01       	movw	r22, r12
 a48:	90 e0       	ldi	r25, 0x00	; 0
 a4a:	0e 94 42 06 	call	0xc84	; 0xc84 <fputc>
 a4e:	21 10       	cpse	r2, r1
 a50:	2a 94       	dec	r2
 a52:	21 e0       	ldi	r18, 0x01	; 1
 a54:	82 1a       	sub	r8, r18
 a56:	91 08       	sbc	r9, r1
 a58:	81 14       	cp	r8, r1
 a5a:	91 04       	cpc	r9, r1
 a5c:	71 f7       	brne	.-36     	; 0xa3a <__stack+0x13b>
 a5e:	e8 c0       	rjmp	.+464    	; 0xc30 <__stack+0x331>
 a60:	84 36       	cpi	r24, 0x64	; 100
 a62:	11 f0       	breq	.+4      	; 0xa68 <__stack+0x169>
 a64:	89 36       	cpi	r24, 0x69	; 105
 a66:	41 f5       	brne	.+80     	; 0xab8 <__stack+0x1b9>
 a68:	f8 01       	movw	r30, r16
 a6a:	37 fe       	sbrs	r3, 7
 a6c:	07 c0       	rjmp	.+14     	; 0xa7c <__stack+0x17d>
 a6e:	60 81       	ld	r22, Z
 a70:	71 81       	ldd	r23, Z+1	; 0x01
 a72:	82 81       	ldd	r24, Z+2	; 0x02
 a74:	93 81       	ldd	r25, Z+3	; 0x03
 a76:	0c 5f       	subi	r16, 0xFC	; 252
 a78:	1f 4f       	sbci	r17, 0xFF	; 255
 a7a:	08 c0       	rjmp	.+16     	; 0xa8c <__stack+0x18d>
 a7c:	60 81       	ld	r22, Z
 a7e:	71 81       	ldd	r23, Z+1	; 0x01
 a80:	07 2e       	mov	r0, r23
 a82:	00 0c       	add	r0, r0
 a84:	88 0b       	sbc	r24, r24
 a86:	99 0b       	sbc	r25, r25
 a88:	0e 5f       	subi	r16, 0xFE	; 254
 a8a:	1f 4f       	sbci	r17, 0xFF	; 255
 a8c:	f3 2d       	mov	r31, r3
 a8e:	ff 76       	andi	r31, 0x6F	; 111
 a90:	3f 2e       	mov	r3, r31
 a92:	97 ff       	sbrs	r25, 7
 a94:	09 c0       	rjmp	.+18     	; 0xaa8 <__stack+0x1a9>
 a96:	90 95       	com	r25
 a98:	80 95       	com	r24
 a9a:	70 95       	com	r23
 a9c:	61 95       	neg	r22
 a9e:	7f 4f       	sbci	r23, 0xFF	; 255
 aa0:	8f 4f       	sbci	r24, 0xFF	; 255
 aa2:	9f 4f       	sbci	r25, 0xFF	; 255
 aa4:	f0 68       	ori	r31, 0x80	; 128
 aa6:	3f 2e       	mov	r3, r31
 aa8:	2a e0       	ldi	r18, 0x0A	; 10
 aaa:	30 e0       	ldi	r19, 0x00	; 0
 aac:	a3 01       	movw	r20, r6
 aae:	0e 94 7e 06 	call	0xcfc	; 0xcfc <__ultoa_invert>
 ab2:	88 2e       	mov	r8, r24
 ab4:	86 18       	sub	r8, r6
 ab6:	45 c0       	rjmp	.+138    	; 0xb42 <__stack+0x243>
 ab8:	85 37       	cpi	r24, 0x75	; 117
 aba:	31 f4       	brne	.+12     	; 0xac8 <__stack+0x1c9>
 abc:	23 2d       	mov	r18, r3
 abe:	2f 7e       	andi	r18, 0xEF	; 239
 ac0:	b2 2e       	mov	r11, r18
 ac2:	2a e0       	ldi	r18, 0x0A	; 10
 ac4:	30 e0       	ldi	r19, 0x00	; 0
 ac6:	25 c0       	rjmp	.+74     	; 0xb12 <__stack+0x213>
 ac8:	93 2d       	mov	r25, r3
 aca:	99 7f       	andi	r25, 0xF9	; 249
 acc:	b9 2e       	mov	r11, r25
 ace:	8f 36       	cpi	r24, 0x6F	; 111
 ad0:	c1 f0       	breq	.+48     	; 0xb02 <__stack+0x203>
 ad2:	18 f4       	brcc	.+6      	; 0xada <__stack+0x1db>
 ad4:	88 35       	cpi	r24, 0x58	; 88
 ad6:	79 f0       	breq	.+30     	; 0xaf6 <__stack+0x1f7>
 ad8:	b5 c0       	rjmp	.+362    	; 0xc44 <__stack+0x345>
 ada:	80 37       	cpi	r24, 0x70	; 112
 adc:	19 f0       	breq	.+6      	; 0xae4 <__stack+0x1e5>
 ade:	88 37       	cpi	r24, 0x78	; 120
 ae0:	21 f0       	breq	.+8      	; 0xaea <__stack+0x1eb>
 ae2:	b0 c0       	rjmp	.+352    	; 0xc44 <__stack+0x345>
 ae4:	e9 2f       	mov	r30, r25
 ae6:	e0 61       	ori	r30, 0x10	; 16
 ae8:	be 2e       	mov	r11, r30
 aea:	b4 fe       	sbrs	r11, 4
 aec:	0d c0       	rjmp	.+26     	; 0xb08 <__stack+0x209>
 aee:	fb 2d       	mov	r31, r11
 af0:	f4 60       	ori	r31, 0x04	; 4
 af2:	bf 2e       	mov	r11, r31
 af4:	09 c0       	rjmp	.+18     	; 0xb08 <__stack+0x209>
 af6:	34 fe       	sbrs	r3, 4
 af8:	0a c0       	rjmp	.+20     	; 0xb0e <__stack+0x20f>
 afa:	29 2f       	mov	r18, r25
 afc:	26 60       	ori	r18, 0x06	; 6
 afe:	b2 2e       	mov	r11, r18
 b00:	06 c0       	rjmp	.+12     	; 0xb0e <__stack+0x20f>
 b02:	28 e0       	ldi	r18, 0x08	; 8
 b04:	30 e0       	ldi	r19, 0x00	; 0
 b06:	05 c0       	rjmp	.+10     	; 0xb12 <__stack+0x213>
 b08:	20 e1       	ldi	r18, 0x10	; 16
 b0a:	30 e0       	ldi	r19, 0x00	; 0
 b0c:	02 c0       	rjmp	.+4      	; 0xb12 <__stack+0x213>
 b0e:	20 e1       	ldi	r18, 0x10	; 16
 b10:	32 e0       	ldi	r19, 0x02	; 2
 b12:	f8 01       	movw	r30, r16
 b14:	b7 fe       	sbrs	r11, 7
 b16:	07 c0       	rjmp	.+14     	; 0xb26 <__stack+0x227>
 b18:	60 81       	ld	r22, Z
 b1a:	71 81       	ldd	r23, Z+1	; 0x01
 b1c:	82 81       	ldd	r24, Z+2	; 0x02
 b1e:	93 81       	ldd	r25, Z+3	; 0x03
 b20:	0c 5f       	subi	r16, 0xFC	; 252
 b22:	1f 4f       	sbci	r17, 0xFF	; 255
 b24:	06 c0       	rjmp	.+12     	; 0xb32 <__stack+0x233>
 b26:	60 81       	ld	r22, Z
 b28:	71 81       	ldd	r23, Z+1	; 0x01
 b2a:	80 e0       	ldi	r24, 0x00	; 0
 b2c:	90 e0       	ldi	r25, 0x00	; 0
 b2e:	0e 5f       	subi	r16, 0xFE	; 254
 b30:	1f 4f       	sbci	r17, 0xFF	; 255
 b32:	a3 01       	movw	r20, r6
 b34:	0e 94 7e 06 	call	0xcfc	; 0xcfc <__ultoa_invert>
 b38:	88 2e       	mov	r8, r24
 b3a:	86 18       	sub	r8, r6
 b3c:	fb 2d       	mov	r31, r11
 b3e:	ff 77       	andi	r31, 0x7F	; 127
 b40:	3f 2e       	mov	r3, r31
 b42:	36 fe       	sbrs	r3, 6
 b44:	0d c0       	rjmp	.+26     	; 0xb60 <__stack+0x261>
 b46:	23 2d       	mov	r18, r3
 b48:	2e 7f       	andi	r18, 0xFE	; 254
 b4a:	a2 2e       	mov	r10, r18
 b4c:	89 14       	cp	r8, r9
 b4e:	58 f4       	brcc	.+22     	; 0xb66 <__stack+0x267>
 b50:	34 fe       	sbrs	r3, 4
 b52:	0b c0       	rjmp	.+22     	; 0xb6a <__stack+0x26b>
 b54:	32 fc       	sbrc	r3, 2
 b56:	09 c0       	rjmp	.+18     	; 0xb6a <__stack+0x26b>
 b58:	83 2d       	mov	r24, r3
 b5a:	8e 7e       	andi	r24, 0xEE	; 238
 b5c:	a8 2e       	mov	r10, r24
 b5e:	05 c0       	rjmp	.+10     	; 0xb6a <__stack+0x26b>
 b60:	b8 2c       	mov	r11, r8
 b62:	a3 2c       	mov	r10, r3
 b64:	03 c0       	rjmp	.+6      	; 0xb6c <__stack+0x26d>
 b66:	b8 2c       	mov	r11, r8
 b68:	01 c0       	rjmp	.+2      	; 0xb6c <__stack+0x26d>
 b6a:	b9 2c       	mov	r11, r9
 b6c:	a4 fe       	sbrs	r10, 4
 b6e:	0f c0       	rjmp	.+30     	; 0xb8e <__stack+0x28f>
 b70:	fe 01       	movw	r30, r28
 b72:	e8 0d       	add	r30, r8
 b74:	f1 1d       	adc	r31, r1
 b76:	80 81       	ld	r24, Z
 b78:	80 33       	cpi	r24, 0x30	; 48
 b7a:	21 f4       	brne	.+8      	; 0xb84 <__stack+0x285>
 b7c:	9a 2d       	mov	r25, r10
 b7e:	99 7e       	andi	r25, 0xE9	; 233
 b80:	a9 2e       	mov	r10, r25
 b82:	09 c0       	rjmp	.+18     	; 0xb96 <__stack+0x297>
 b84:	a2 fe       	sbrs	r10, 2
 b86:	06 c0       	rjmp	.+12     	; 0xb94 <__stack+0x295>
 b88:	b3 94       	inc	r11
 b8a:	b3 94       	inc	r11
 b8c:	04 c0       	rjmp	.+8      	; 0xb96 <__stack+0x297>
 b8e:	8a 2d       	mov	r24, r10
 b90:	86 78       	andi	r24, 0x86	; 134
 b92:	09 f0       	breq	.+2      	; 0xb96 <__stack+0x297>
 b94:	b3 94       	inc	r11
 b96:	a3 fc       	sbrc	r10, 3
 b98:	11 c0       	rjmp	.+34     	; 0xbbc <__stack+0x2bd>
 b9a:	a0 fe       	sbrs	r10, 0
 b9c:	06 c0       	rjmp	.+12     	; 0xbaa <__stack+0x2ab>
 b9e:	b2 14       	cp	r11, r2
 ba0:	88 f4       	brcc	.+34     	; 0xbc4 <__stack+0x2c5>
 ba2:	28 0c       	add	r2, r8
 ba4:	92 2c       	mov	r9, r2
 ba6:	9b 18       	sub	r9, r11
 ba8:	0e c0       	rjmp	.+28     	; 0xbc6 <__stack+0x2c7>
 baa:	b2 14       	cp	r11, r2
 bac:	60 f4       	brcc	.+24     	; 0xbc6 <__stack+0x2c7>
 bae:	b6 01       	movw	r22, r12
 bb0:	80 e2       	ldi	r24, 0x20	; 32
 bb2:	90 e0       	ldi	r25, 0x00	; 0
 bb4:	0e 94 42 06 	call	0xc84	; 0xc84 <fputc>
 bb8:	b3 94       	inc	r11
 bba:	f7 cf       	rjmp	.-18     	; 0xbaa <__stack+0x2ab>
 bbc:	b2 14       	cp	r11, r2
 bbe:	18 f4       	brcc	.+6      	; 0xbc6 <__stack+0x2c7>
 bc0:	2b 18       	sub	r2, r11
 bc2:	02 c0       	rjmp	.+4      	; 0xbc8 <__stack+0x2c9>
 bc4:	98 2c       	mov	r9, r8
 bc6:	21 2c       	mov	r2, r1
 bc8:	a4 fe       	sbrs	r10, 4
 bca:	10 c0       	rjmp	.+32     	; 0xbec <__stack+0x2ed>
 bcc:	b6 01       	movw	r22, r12
 bce:	80 e3       	ldi	r24, 0x30	; 48
 bd0:	90 e0       	ldi	r25, 0x00	; 0
 bd2:	0e 94 42 06 	call	0xc84	; 0xc84 <fputc>
 bd6:	a2 fe       	sbrs	r10, 2
 bd8:	17 c0       	rjmp	.+46     	; 0xc08 <__stack+0x309>
 bda:	a1 fc       	sbrc	r10, 1
 bdc:	03 c0       	rjmp	.+6      	; 0xbe4 <__stack+0x2e5>
 bde:	88 e7       	ldi	r24, 0x78	; 120
 be0:	90 e0       	ldi	r25, 0x00	; 0
 be2:	02 c0       	rjmp	.+4      	; 0xbe8 <__stack+0x2e9>
 be4:	88 e5       	ldi	r24, 0x58	; 88
 be6:	90 e0       	ldi	r25, 0x00	; 0
 be8:	b6 01       	movw	r22, r12
 bea:	0c c0       	rjmp	.+24     	; 0xc04 <__stack+0x305>
 bec:	8a 2d       	mov	r24, r10
 bee:	86 78       	andi	r24, 0x86	; 134
 bf0:	59 f0       	breq	.+22     	; 0xc08 <__stack+0x309>
 bf2:	a1 fe       	sbrs	r10, 1
 bf4:	02 c0       	rjmp	.+4      	; 0xbfa <__stack+0x2fb>
 bf6:	8b e2       	ldi	r24, 0x2B	; 43
 bf8:	01 c0       	rjmp	.+2      	; 0xbfc <__stack+0x2fd>
 bfa:	80 e2       	ldi	r24, 0x20	; 32
 bfc:	a7 fc       	sbrc	r10, 7
 bfe:	8d e2       	ldi	r24, 0x2D	; 45
 c00:	b6 01       	movw	r22, r12
 c02:	90 e0       	ldi	r25, 0x00	; 0
 c04:	0e 94 42 06 	call	0xc84	; 0xc84 <fputc>
 c08:	89 14       	cp	r8, r9
 c0a:	38 f4       	brcc	.+14     	; 0xc1a <__stack+0x31b>
 c0c:	b6 01       	movw	r22, r12
 c0e:	80 e3       	ldi	r24, 0x30	; 48
 c10:	90 e0       	ldi	r25, 0x00	; 0
 c12:	0e 94 42 06 	call	0xc84	; 0xc84 <fputc>
 c16:	9a 94       	dec	r9
 c18:	f7 cf       	rjmp	.-18     	; 0xc08 <__stack+0x309>
 c1a:	8a 94       	dec	r8
 c1c:	f3 01       	movw	r30, r6
 c1e:	e8 0d       	add	r30, r8
 c20:	f1 1d       	adc	r31, r1
 c22:	80 81       	ld	r24, Z
 c24:	b6 01       	movw	r22, r12
 c26:	90 e0       	ldi	r25, 0x00	; 0
 c28:	0e 94 42 06 	call	0xc84	; 0xc84 <fputc>
 c2c:	81 10       	cpse	r8, r1
 c2e:	f5 cf       	rjmp	.-22     	; 0xc1a <__stack+0x31b>
 c30:	22 20       	and	r2, r2
 c32:	09 f4       	brne	.+2      	; 0xc36 <__stack+0x337>
 c34:	42 ce       	rjmp	.-892    	; 0x8ba <vfprintf+0x24>
 c36:	b6 01       	movw	r22, r12
 c38:	80 e2       	ldi	r24, 0x20	; 32
 c3a:	90 e0       	ldi	r25, 0x00	; 0
 c3c:	0e 94 42 06 	call	0xc84	; 0xc84 <fputc>
 c40:	2a 94       	dec	r2
 c42:	f6 cf       	rjmp	.-20     	; 0xc30 <__stack+0x331>
 c44:	f6 01       	movw	r30, r12
 c46:	86 81       	ldd	r24, Z+6	; 0x06
 c48:	97 81       	ldd	r25, Z+7	; 0x07
 c4a:	02 c0       	rjmp	.+4      	; 0xc50 <__stack+0x351>
 c4c:	8f ef       	ldi	r24, 0xFF	; 255
 c4e:	9f ef       	ldi	r25, 0xFF	; 255
 c50:	2b 96       	adiw	r28, 0x0b	; 11
 c52:	e2 e1       	ldi	r30, 0x12	; 18
 c54:	0c 94 f8 06 	jmp	0xdf0	; 0xdf0 <__epilogue_restores__>

00000c58 <strnlen_P>:
 c58:	fc 01       	movw	r30, r24
 c5a:	05 90       	lpm	r0, Z+
 c5c:	61 50       	subi	r22, 0x01	; 1
 c5e:	70 40       	sbci	r23, 0x00	; 0
 c60:	01 10       	cpse	r0, r1
 c62:	d8 f7       	brcc	.-10     	; 0xc5a <strnlen_P+0x2>
 c64:	80 95       	com	r24
 c66:	90 95       	com	r25
 c68:	8e 0f       	add	r24, r30
 c6a:	9f 1f       	adc	r25, r31
 c6c:	08 95       	ret

00000c6e <strnlen>:
 c6e:	fc 01       	movw	r30, r24
 c70:	61 50       	subi	r22, 0x01	; 1
 c72:	70 40       	sbci	r23, 0x00	; 0
 c74:	01 90       	ld	r0, Z+
 c76:	01 10       	cpse	r0, r1
 c78:	d8 f7       	brcc	.-10     	; 0xc70 <strnlen+0x2>
 c7a:	80 95       	com	r24
 c7c:	90 95       	com	r25
 c7e:	8e 0f       	add	r24, r30
 c80:	9f 1f       	adc	r25, r31
 c82:	08 95       	ret

00000c84 <fputc>:
 c84:	0f 93       	push	r16
 c86:	1f 93       	push	r17
 c88:	cf 93       	push	r28
 c8a:	df 93       	push	r29
 c8c:	fb 01       	movw	r30, r22
 c8e:	23 81       	ldd	r18, Z+3	; 0x03
 c90:	21 fd       	sbrc	r18, 1
 c92:	03 c0       	rjmp	.+6      	; 0xc9a <fputc+0x16>
 c94:	8f ef       	ldi	r24, 0xFF	; 255
 c96:	9f ef       	ldi	r25, 0xFF	; 255
 c98:	2c c0       	rjmp	.+88     	; 0xcf2 <fputc+0x6e>
 c9a:	22 ff       	sbrs	r18, 2
 c9c:	16 c0       	rjmp	.+44     	; 0xcca <fputc+0x46>
 c9e:	46 81       	ldd	r20, Z+6	; 0x06
 ca0:	57 81       	ldd	r21, Z+7	; 0x07
 ca2:	24 81       	ldd	r18, Z+4	; 0x04
 ca4:	35 81       	ldd	r19, Z+5	; 0x05
 ca6:	42 17       	cp	r20, r18
 ca8:	53 07       	cpc	r21, r19
 caa:	44 f4       	brge	.+16     	; 0xcbc <fputc+0x38>
 cac:	a0 81       	ld	r26, Z
 cae:	b1 81       	ldd	r27, Z+1	; 0x01
 cb0:	9d 01       	movw	r18, r26
 cb2:	2f 5f       	subi	r18, 0xFF	; 255
 cb4:	3f 4f       	sbci	r19, 0xFF	; 255
 cb6:	31 83       	std	Z+1, r19	; 0x01
 cb8:	20 83       	st	Z, r18
 cba:	8c 93       	st	X, r24
 cbc:	26 81       	ldd	r18, Z+6	; 0x06
 cbe:	37 81       	ldd	r19, Z+7	; 0x07
 cc0:	2f 5f       	subi	r18, 0xFF	; 255
 cc2:	3f 4f       	sbci	r19, 0xFF	; 255
 cc4:	37 83       	std	Z+7, r19	; 0x07
 cc6:	26 83       	std	Z+6, r18	; 0x06
 cc8:	14 c0       	rjmp	.+40     	; 0xcf2 <fputc+0x6e>
 cca:	8b 01       	movw	r16, r22
 ccc:	ec 01       	movw	r28, r24
 cce:	fb 01       	movw	r30, r22
 cd0:	00 84       	ldd	r0, Z+8	; 0x08
 cd2:	f1 85       	ldd	r31, Z+9	; 0x09
 cd4:	e0 2d       	mov	r30, r0
 cd6:	09 95       	icall
 cd8:	89 2b       	or	r24, r25
 cda:	e1 f6       	brne	.-72     	; 0xc94 <fputc+0x10>
 cdc:	d8 01       	movw	r26, r16
 cde:	16 96       	adiw	r26, 0x06	; 6
 ce0:	8d 91       	ld	r24, X+
 ce2:	9c 91       	ld	r25, X
 ce4:	17 97       	sbiw	r26, 0x07	; 7
 ce6:	01 96       	adiw	r24, 0x01	; 1
 ce8:	17 96       	adiw	r26, 0x07	; 7
 cea:	9c 93       	st	X, r25
 cec:	8e 93       	st	-X, r24
 cee:	16 97       	sbiw	r26, 0x06	; 6
 cf0:	ce 01       	movw	r24, r28
 cf2:	df 91       	pop	r29
 cf4:	cf 91       	pop	r28
 cf6:	1f 91       	pop	r17
 cf8:	0f 91       	pop	r16
 cfa:	08 95       	ret

00000cfc <__ultoa_invert>:
 cfc:	fa 01       	movw	r30, r20
 cfe:	aa 27       	eor	r26, r26
 d00:	28 30       	cpi	r18, 0x08	; 8
 d02:	51 f1       	breq	.+84     	; 0xd58 <__ultoa_invert+0x5c>
 d04:	20 31       	cpi	r18, 0x10	; 16
 d06:	81 f1       	breq	.+96     	; 0xd68 <__ultoa_invert+0x6c>
 d08:	e8 94       	clt
 d0a:	6f 93       	push	r22
 d0c:	6e 7f       	andi	r22, 0xFE	; 254
 d0e:	6e 5f       	subi	r22, 0xFE	; 254
 d10:	7f 4f       	sbci	r23, 0xFF	; 255
 d12:	8f 4f       	sbci	r24, 0xFF	; 255
 d14:	9f 4f       	sbci	r25, 0xFF	; 255
 d16:	af 4f       	sbci	r26, 0xFF	; 255
 d18:	b1 e0       	ldi	r27, 0x01	; 1
 d1a:	3e d0       	rcall	.+124    	; 0xd98 <__ultoa_invert+0x9c>
 d1c:	b4 e0       	ldi	r27, 0x04	; 4
 d1e:	3c d0       	rcall	.+120    	; 0xd98 <__ultoa_invert+0x9c>
 d20:	67 0f       	add	r22, r23
 d22:	78 1f       	adc	r23, r24
 d24:	89 1f       	adc	r24, r25
 d26:	9a 1f       	adc	r25, r26
 d28:	a1 1d       	adc	r26, r1
 d2a:	68 0f       	add	r22, r24
 d2c:	79 1f       	adc	r23, r25
 d2e:	8a 1f       	adc	r24, r26
 d30:	91 1d       	adc	r25, r1
 d32:	a1 1d       	adc	r26, r1
 d34:	6a 0f       	add	r22, r26
 d36:	71 1d       	adc	r23, r1
 d38:	81 1d       	adc	r24, r1
 d3a:	91 1d       	adc	r25, r1
 d3c:	a1 1d       	adc	r26, r1
 d3e:	20 d0       	rcall	.+64     	; 0xd80 <__ultoa_invert+0x84>
 d40:	09 f4       	brne	.+2      	; 0xd44 <__ultoa_invert+0x48>
 d42:	68 94       	set
 d44:	3f 91       	pop	r19
 d46:	2a e0       	ldi	r18, 0x0A	; 10
 d48:	26 9f       	mul	r18, r22
 d4a:	11 24       	eor	r1, r1
 d4c:	30 19       	sub	r19, r0
 d4e:	30 5d       	subi	r19, 0xD0	; 208
 d50:	31 93       	st	Z+, r19
 d52:	de f6       	brtc	.-74     	; 0xd0a <__ultoa_invert+0xe>
 d54:	cf 01       	movw	r24, r30
 d56:	08 95       	ret
 d58:	46 2f       	mov	r20, r22
 d5a:	47 70       	andi	r20, 0x07	; 7
 d5c:	40 5d       	subi	r20, 0xD0	; 208
 d5e:	41 93       	st	Z+, r20
 d60:	b3 e0       	ldi	r27, 0x03	; 3
 d62:	0f d0       	rcall	.+30     	; 0xd82 <__ultoa_invert+0x86>
 d64:	c9 f7       	brne	.-14     	; 0xd58 <__ultoa_invert+0x5c>
 d66:	f6 cf       	rjmp	.-20     	; 0xd54 <__ultoa_invert+0x58>
 d68:	46 2f       	mov	r20, r22
 d6a:	4f 70       	andi	r20, 0x0F	; 15
 d6c:	40 5d       	subi	r20, 0xD0	; 208
 d6e:	4a 33       	cpi	r20, 0x3A	; 58
 d70:	18 f0       	brcs	.+6      	; 0xd78 <__ultoa_invert+0x7c>
 d72:	49 5d       	subi	r20, 0xD9	; 217
 d74:	31 fd       	sbrc	r19, 1
 d76:	40 52       	subi	r20, 0x20	; 32
 d78:	41 93       	st	Z+, r20
 d7a:	02 d0       	rcall	.+4      	; 0xd80 <__ultoa_invert+0x84>
 d7c:	a9 f7       	brne	.-22     	; 0xd68 <__ultoa_invert+0x6c>
 d7e:	ea cf       	rjmp	.-44     	; 0xd54 <__ultoa_invert+0x58>
 d80:	b4 e0       	ldi	r27, 0x04	; 4
 d82:	a6 95       	lsr	r26
 d84:	97 95       	ror	r25
 d86:	87 95       	ror	r24
 d88:	77 95       	ror	r23
 d8a:	67 95       	ror	r22
 d8c:	ba 95       	dec	r27
 d8e:	c9 f7       	brne	.-14     	; 0xd82 <__ultoa_invert+0x86>
 d90:	00 97       	sbiw	r24, 0x00	; 0
 d92:	61 05       	cpc	r22, r1
 d94:	71 05       	cpc	r23, r1
 d96:	08 95       	ret
 d98:	9b 01       	movw	r18, r22
 d9a:	ac 01       	movw	r20, r24
 d9c:	0a 2e       	mov	r0, r26
 d9e:	06 94       	lsr	r0
 da0:	57 95       	ror	r21
 da2:	47 95       	ror	r20
 da4:	37 95       	ror	r19
 da6:	27 95       	ror	r18
 da8:	ba 95       	dec	r27
 daa:	c9 f7       	brne	.-14     	; 0xd9e <__ultoa_invert+0xa2>
 dac:	62 0f       	add	r22, r18
 dae:	73 1f       	adc	r23, r19
 db0:	84 1f       	adc	r24, r20
 db2:	95 1f       	adc	r25, r21
 db4:	a0 1d       	adc	r26, r0
 db6:	08 95       	ret

00000db8 <__prologue_saves__>:
 db8:	2f 92       	push	r2
 dba:	3f 92       	push	r3
 dbc:	4f 92       	push	r4
 dbe:	5f 92       	push	r5
 dc0:	6f 92       	push	r6
 dc2:	7f 92       	push	r7
 dc4:	8f 92       	push	r8
 dc6:	9f 92       	push	r9
 dc8:	af 92       	push	r10
 dca:	bf 92       	push	r11
 dcc:	cf 92       	push	r12
 dce:	df 92       	push	r13
 dd0:	ef 92       	push	r14
 dd2:	ff 92       	push	r15
 dd4:	0f 93       	push	r16
 dd6:	1f 93       	push	r17
 dd8:	cf 93       	push	r28
 dda:	df 93       	push	r29
 ddc:	cd b7       	in	r28, 0x3d	; 61
 dde:	de b7       	in	r29, 0x3e	; 62
 de0:	ca 1b       	sub	r28, r26
 de2:	db 0b       	sbc	r29, r27
 de4:	0f b6       	in	r0, 0x3f	; 63
 de6:	f8 94       	cli
 de8:	de bf       	out	0x3e, r29	; 62
 dea:	0f be       	out	0x3f, r0	; 63
 dec:	cd bf       	out	0x3d, r28	; 61
 dee:	09 94       	ijmp

00000df0 <__epilogue_restores__>:
 df0:	2a 88       	ldd	r2, Y+18	; 0x12
 df2:	39 88       	ldd	r3, Y+17	; 0x11
 df4:	48 88       	ldd	r4, Y+16	; 0x10
 df6:	5f 84       	ldd	r5, Y+15	; 0x0f
 df8:	6e 84       	ldd	r6, Y+14	; 0x0e
 dfa:	7d 84       	ldd	r7, Y+13	; 0x0d
 dfc:	8c 84       	ldd	r8, Y+12	; 0x0c
 dfe:	9b 84       	ldd	r9, Y+11	; 0x0b
 e00:	aa 84       	ldd	r10, Y+10	; 0x0a
 e02:	b9 84       	ldd	r11, Y+9	; 0x09
 e04:	c8 84       	ldd	r12, Y+8	; 0x08
 e06:	df 80       	ldd	r13, Y+7	; 0x07
 e08:	ee 80       	ldd	r14, Y+6	; 0x06
 e0a:	fd 80       	ldd	r15, Y+5	; 0x05
 e0c:	0c 81       	ldd	r16, Y+4	; 0x04
 e0e:	1b 81       	ldd	r17, Y+3	; 0x03
 e10:	aa 81       	ldd	r26, Y+2	; 0x02
 e12:	b9 81       	ldd	r27, Y+1	; 0x01
 e14:	ce 0f       	add	r28, r30
 e16:	d1 1d       	adc	r29, r1
 e18:	0f b6       	in	r0, 0x3f	; 63
 e1a:	f8 94       	cli
 e1c:	de bf       	out	0x3e, r29	; 62
 e1e:	0f be       	out	0x3f, r0	; 63
 e20:	cd bf       	out	0x3d, r28	; 61
 e22:	ed 01       	movw	r28, r26
 e24:	08 95       	ret

00000e26 <_exit>:
 e26:	f8 94       	cli

00000e28 <__stop_program>:
 e28:	ff cf       	rjmp	.-2      	; 0xe28 <__stop_program>
