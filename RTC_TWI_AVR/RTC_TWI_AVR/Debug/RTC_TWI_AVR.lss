
RTC_TWI_AVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007a  00800100  00000cf8  00000d8c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cf8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001f  0080017a  0080017a  00000e06  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000e06  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e64  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  00000ea4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017b9  00000000  00000000  00000fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aa7  00000000  00000000  0000277d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000998  00000000  00000000  00003224  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002e4  00000000  00000000  00003bbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005fa  00000000  00000000  00003ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c59  00000000  00000000  0000449a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  000050f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 3f 02 	jmp	0x47e	; 0x47e <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ef       	ldi	r30, 0xF8	; 248
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 37       	cpi	r26, 0x7A	; 122
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e7       	ldi	r26, 0x7A	; 122
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 39       	cpi	r26, 0x99	; 153
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 8c 02 	call	0x518	; 0x518 <main>
  9e:	0c 94 7a 06 	jmp	0xcf4	; 0xcf4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <to_BCD>:
#include "ds1307.h"

uint8_t to_BCD(uint8_t n)
{
	return ((n/10) << 4) + n%10;
  a6:	9d ec       	ldi	r25, 0xCD	; 205
  a8:	89 9f       	mul	r24, r25
  aa:	91 2d       	mov	r25, r1
  ac:	11 24       	eor	r1, r1
  ae:	96 95       	lsr	r25
  b0:	96 95       	lsr	r25
  b2:	96 95       	lsr	r25
  b4:	39 2f       	mov	r19, r25
  b6:	33 0f       	add	r19, r19
  b8:	23 2f       	mov	r18, r19
  ba:	22 0f       	add	r18, r18
  bc:	22 0f       	add	r18, r18
  be:	23 0f       	add	r18, r19
  c0:	82 1b       	sub	r24, r18
}
  c2:	20 e1       	ldi	r18, 0x10	; 16
  c4:	92 9f       	mul	r25, r18
  c6:	80 0d       	add	r24, r0
  c8:	11 24       	eor	r1, r1
  ca:	08 95       	ret

000000cc <from_BCD>:

uint8_t from_BCD(uint8_t n)
{
	return 10 * (n >> 4) + (n & 0b1111);
  cc:	98 2f       	mov	r25, r24
  ce:	92 95       	swap	r25
  d0:	9f 70       	andi	r25, 0x0F	; 15
  d2:	99 0f       	add	r25, r25
  d4:	29 2f       	mov	r18, r25
  d6:	22 0f       	add	r18, r18
  d8:	22 0f       	add	r18, r18
  da:	92 0f       	add	r25, r18
  dc:	8f 70       	andi	r24, 0x0F	; 15
}
  de:	89 0f       	add	r24, r25
  e0:	08 95       	ret

000000e2 <RTC_init>:

/* Инициализация интерфейса I2C для часов */
void RTC_init(void)
{
  e2:	0f 93       	push	r16
  e4:	1f 93       	push	r17
	twi_init(0, F_CPU, F_I2C);
  e6:	00 ea       	ldi	r16, 0xA0	; 160
  e8:	16 e8       	ldi	r17, 0x86	; 134
  ea:	21 e0       	ldi	r18, 0x01	; 1
  ec:	30 e0       	ldi	r19, 0x00	; 0
  ee:	40 e0       	ldi	r20, 0x00	; 0
  f0:	54 e2       	ldi	r21, 0x24	; 36
  f2:	64 ef       	ldi	r22, 0xF4	; 244
  f4:	70 e0       	ldi	r23, 0x00	; 0
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	0e 94 ce 01 	call	0x39c	; 0x39c <twi_init>
}
  fc:	1f 91       	pop	r17
  fe:	0f 91       	pop	r16
 100:	08 95       	ret

00000102 <RTC_set_value>:

/* Запись значения в часы */
void RTC_set_value(uint8_t address, uint8_t data)
{
 102:	cf 93       	push	r28
 104:	df 93       	push	r29
 106:	d8 2f       	mov	r29, r24
 108:	c6 2f       	mov	r28, r22
	/* Сформировать состояние СТАРТ */
	twi(TWI_START);
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <twi>
	
	/* Выдать SLA-W - ведомый в режиме приемника */
	twi_transmit((DS1307_ADR<<1)|0);
 110:	80 ed       	ldi	r24, 0xD0	; 208
 112:	0e 94 1b 02 	call	0x436	; 0x436 <twi_transmit>
	
	/* Передать адрес регистра часов */
	twi_transmit(address);
 116:	8d 2f       	mov	r24, r29
 118:	0e 94 1b 02 	call	0x436	; 0x436 <twi_transmit>
	
	/* При передаче указателя передается только адрес без стоп состояния */
	if (data != RTC_WRITE_POINTER)
 11c:	cf 3f       	cpi	r28, 0xFF	; 255
 11e:	31 f0       	breq	.+12     	; 0x12c <RTC_set_value+0x2a>
	{
		/* Передать данные */
		twi_transmit(data);
 120:	8c 2f       	mov	r24, r28
 122:	0e 94 1b 02 	call	0x436	; 0x436 <twi_transmit>
		
		/* Сформировать состояние СТОП */
		twi(TWI_STOP);
 126:	82 e0       	ldi	r24, 0x02	; 2
 128:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <twi>
	}
}
 12c:	df 91       	pop	r29
 12e:	cf 91       	pop	r28
 130:	08 95       	ret

00000132 <RTC_get_value>:

/* Получить значение с часов */
void RTC_get_value(uint8_t * data)
{
 132:	cf 93       	push	r28
 134:	df 93       	push	r29
 136:	ec 01       	movw	r28, r24
	/* Сформировать состояние СТАРТ */
	twi(TWI_START);
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <twi>
	
	/* Выдать пакет SLA-R - ведомый в режиме передатчика */
	twi_transmit((DS1307_ADR<<1)|1);
 13e:	81 ed       	ldi	r24, 0xD1	; 209
 140:	0e 94 1b 02 	call	0x436	; 0x436 <twi_transmit>
	
	/* считываем данные без подтверждения */
	twi_receive(data, 0);
 144:	60 e0       	ldi	r22, 0x00	; 0
 146:	ce 01       	movw	r24, r28
 148:	0e 94 21 02 	call	0x442	; 0x442 <twi_receive>
	
	/* Сформировать состояние СТОП */
	twi(TWI_STOP);
 14c:	82 e0       	ldi	r24, 0x02	; 2
 14e:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <twi>
}
 152:	df 91       	pop	r29
 154:	cf 91       	pop	r28
 156:	08 95       	ret

00000158 <RTC_set_date>:

/* Установить дату */
void RTC_set_date(uint8_t day, uint8_t month, uint8_t year, uint8_t day_week)
{
 158:	0f 93       	push	r16
 15a:	1f 93       	push	r17
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
 160:	18 2f       	mov	r17, r24
 162:	d6 2f       	mov	r29, r22
 164:	84 2f       	mov	r24, r20
 166:	02 2f       	mov	r16, r18
	/* Перевести в BCD */
	year = to_BCD(year);
 168:	0e 94 53 00 	call	0xa6	; 0xa6 <to_BCD>
 16c:	c8 2f       	mov	r28, r24
	month = to_BCD(month);
 16e:	8d 2f       	mov	r24, r29
 170:	0e 94 53 00 	call	0xa6	; 0xa6 <to_BCD>
 174:	d8 2f       	mov	r29, r24
	day = to_BCD(day);
 176:	81 2f       	mov	r24, r17
 178:	0e 94 53 00 	call	0xa6	; 0xa6 <to_BCD>
 17c:	18 2f       	mov	r17, r24

	/* Сформировать состояние СТАРТ */
	twi(TWI_START);
 17e:	80 e0       	ldi	r24, 0x00	; 0
 180:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <twi>

	/* Выдать SLA-W - ведомый в режиме приемника */
	twi_transmit((DS1307_ADR<<1)|0);
 184:	80 ed       	ldi	r24, 0xD0	; 208
 186:	0e 94 1b 02 	call	0x436	; 0x436 <twi_transmit>
	
	/* Передать адрес регистра, с которого начинаем запись */
	twi_transmit(RTC_DAY_WEEK_ADR);
 18a:	83 e0       	ldi	r24, 0x03	; 3
 18c:	0e 94 1b 02 	call	0x436	; 0x436 <twi_transmit>
	twi_transmit(day_week);
 190:	80 2f       	mov	r24, r16
 192:	0e 94 1b 02 	call	0x436	; 0x436 <twi_transmit>
	twi_transmit(day);
 196:	81 2f       	mov	r24, r17
 198:	0e 94 1b 02 	call	0x436	; 0x436 <twi_transmit>
	twi_transmit(month);
 19c:	8d 2f       	mov	r24, r29
 19e:	0e 94 1b 02 	call	0x436	; 0x436 <twi_transmit>
	twi_transmit(year);
 1a2:	8c 2f       	mov	r24, r28
 1a4:	0e 94 1b 02 	call	0x436	; 0x436 <twi_transmit>
	
	/* Сформировать состояние СТОП */
	twi(TWI_STOP);
 1a8:	82 e0       	ldi	r24, 0x02	; 2
 1aa:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <twi>
}
 1ae:	df 91       	pop	r29
 1b0:	cf 91       	pop	r28
 1b2:	1f 91       	pop	r17
 1b4:	0f 91       	pop	r16
 1b6:	08 95       	ret

000001b8 <RTC_set_time>:

/* Установить время */
void RTC_set_time(uint8_t hours, uint8_t minutes, uint8_t seconds)
{
 1b8:	1f 93       	push	r17
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
 1be:	c8 2f       	mov	r28, r24
 1c0:	d6 2f       	mov	r29, r22
 1c2:	84 2f       	mov	r24, r20
	/* Перевести в BCD */
	seconds = to_BCD(seconds);
 1c4:	0e 94 53 00 	call	0xa6	; 0xa6 <to_BCD>
 1c8:	18 2f       	mov	r17, r24
	minutes = to_BCD(minutes);
 1ca:	8d 2f       	mov	r24, r29
 1cc:	0e 94 53 00 	call	0xa6	; 0xa6 <to_BCD>
 1d0:	d8 2f       	mov	r29, r24
	hours = to_BCD(hours);
 1d2:	8c 2f       	mov	r24, r28
 1d4:	0e 94 53 00 	call	0xa6	; 0xa6 <to_BCD>
 1d8:	c8 2f       	mov	r28, r24
	
	/* Сформировать состояние СТАРТ */
	twi(TWI_START);
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <twi>

	/* Выдать SLA-W - ведомый в режиме приемника */
	twi_transmit((DS1307_ADR<<1)|0);
 1e0:	80 ed       	ldi	r24, 0xD0	; 208
 1e2:	0e 94 1b 02 	call	0x436	; 0x436 <twi_transmit>
	
	/* Передать адрес регистра, с которого начинаем запись */
	twi_transmit(RTC_SEC_ADR);
 1e6:	80 e0       	ldi	r24, 0x00	; 0
 1e8:	0e 94 1b 02 	call	0x436	; 0x436 <twi_transmit>
	twi_transmit(seconds);
 1ec:	81 2f       	mov	r24, r17
 1ee:	0e 94 1b 02 	call	0x436	; 0x436 <twi_transmit>
	twi_transmit(minutes);
 1f2:	8d 2f       	mov	r24, r29
 1f4:	0e 94 1b 02 	call	0x436	; 0x436 <twi_transmit>
	twi_transmit(hours);
 1f8:	8c 2f       	mov	r24, r28
 1fa:	0e 94 1b 02 	call	0x436	; 0x436 <twi_transmit>
	
	/* Сформировать состояние СТОП */
	twi(TWI_STOP);
 1fe:	82 e0       	ldi	r24, 0x02	; 2
 200:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <twi>
}
 204:	df 91       	pop	r29
 206:	cf 91       	pop	r28
 208:	1f 91       	pop	r17
 20a:	08 95       	ret

0000020c <RTC_set_out>:

/* Настроить выход OUT */
void RTC_set_out(uint8_t out)
{
	uint8_t control_register = ((out&1)<<OUT)|(0<<SQWE);
	RTC_set_value(RTC_CNTR_ADR, control_register);
 20c:	90 e8       	ldi	r25, 0x80	; 128
 20e:	89 9f       	mul	r24, r25
 210:	b0 01       	movw	r22, r0
 212:	11 24       	eor	r1, r1
 214:	87 e0       	ldi	r24, 0x07	; 7
 216:	0e 94 81 00 	call	0x102	; 0x102 <RTC_set_value>
 21a:	08 95       	ret

0000021c <RTC_set_sqwe>:

/* Настроить выход SQWE */
void RTC_set_sqwe(uint8_t frequency)
{
	uint8_t control_register = (0<<OUT)|(1<<SQWE)|frequency;
	RTC_set_value(RTC_CNTR_ADR, control_register);
 21c:	68 2f       	mov	r22, r24
 21e:	60 61       	ori	r22, 0x10	; 16
 220:	87 e0       	ldi	r24, 0x07	; 7
 222:	0e 94 81 00 	call	0x102	; 0x102 <RTC_set_value>
 226:	08 95       	ret

00000228 <RTC_start_stop_watch>:
}

/* Запустить или остановить часы */
void RTC_start_stop_watch(uint8_t on)
{
 228:	1f 93       	push	r17
 22a:	cf 93       	push	r28
 22c:	df 93       	push	r29
 22e:	1f 92       	push	r1
 230:	cd b7       	in	r28, 0x3d	; 61
 232:	de b7       	in	r29, 0x3e	; 62
 234:	18 2f       	mov	r17, r24
	/* Сохранить последнее значение секунд */
	uint8_t seconds_register;
	RTC_set_value(RTC_SEC_ADR, RTC_WRITE_POINTER);
 236:	6f ef       	ldi	r22, 0xFF	; 255
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	0e 94 81 00 	call	0x102	; 0x102 <RTC_set_value>
	RTC_get_value(&seconds_register);
 23e:	ce 01       	movw	r24, r28
 240:	01 96       	adiw	r24, 0x01	; 1
 242:	0e 94 99 00 	call	0x132	; 0x132 <RTC_get_value>
	
	/* Перевернуть бит Clock Hold */
	if (on)
 246:	11 23       	and	r17, r17
 248:	21 f0       	breq	.+8      	; 0x252 <RTC_start_stop_watch+0x2a>
	{
		seconds_register = seconds_register & ~(1<<CH);
 24a:	89 81       	ldd	r24, Y+1	; 0x01
 24c:	8f 77       	andi	r24, 0x7F	; 127
 24e:	89 83       	std	Y+1, r24	; 0x01
 250:	03 c0       	rjmp	.+6      	; 0x258 <RTC_start_stop_watch+0x30>
	} else {
		seconds_register = seconds_register | (1<<CH); // установить бит равным 1 - остановить часы
 252:	89 81       	ldd	r24, Y+1	; 0x01
 254:	80 68       	ori	r24, 0x80	; 128
 256:	89 83       	std	Y+1, r24	; 0x01
	}
	
	RTC_set_value(RTC_SEC_ADR, seconds_register);
 258:	69 81       	ldd	r22, Y+1	; 0x01
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	0e 94 81 00 	call	0x102	; 0x102 <RTC_set_value>
}
 260:	0f 90       	pop	r0
 262:	df 91       	pop	r29
 264:	cf 91       	pop	r28
 266:	1f 91       	pop	r17
 268:	08 95       	ret

0000026a <RTC_get_date>:

/* Получить дату */
void RTC_get_date(uint8_t * year, uint8_t * month, uint8_t * day, uint8_t * day_week)
{
 26a:	cf 92       	push	r12
 26c:	df 92       	push	r13
 26e:	ef 92       	push	r14
 270:	ff 92       	push	r15
 272:	0f 93       	push	r16
 274:	1f 93       	push	r17
 276:	cf 93       	push	r28
 278:	df 93       	push	r29
 27a:	ec 01       	movw	r28, r24
 27c:	8b 01       	movw	r16, r22
 27e:	7a 01       	movw	r14, r20
 280:	69 01       	movw	r12, r18
	RTC_set_value(RTC_DAY_WEEK_ADR, RTC_WRITE_POINTER);
 282:	6f ef       	ldi	r22, 0xFF	; 255
 284:	83 e0       	ldi	r24, 0x03	; 3
 286:	0e 94 81 00 	call	0x102	; 0x102 <RTC_set_value>
	
	/*Сформировать состояние РЕСТАРТ*/
	twi(TWI_RESTART);
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <twi>
	
	/*Выдать на шину пакет SLA-R*/
	twi_transmit((DS1307_ADR<<1)|1);
 290:	81 ed       	ldi	r24, 0xD1	; 209
 292:	0e 94 1b 02 	call	0x436	; 0x436 <twi_transmit>
	
	/*считываем данные с подтверждением, кроме последнего байта */
	twi_receive(day_week, 1);
 296:	61 e0       	ldi	r22, 0x01	; 1
 298:	c6 01       	movw	r24, r12
 29a:	0e 94 21 02 	call	0x442	; 0x442 <twi_receive>
	twi_receive(day, 1);
 29e:	61 e0       	ldi	r22, 0x01	; 1
 2a0:	c7 01       	movw	r24, r14
 2a2:	0e 94 21 02 	call	0x442	; 0x442 <twi_receive>
	twi_receive(month, 1);
 2a6:	61 e0       	ldi	r22, 0x01	; 1
 2a8:	c8 01       	movw	r24, r16
 2aa:	0e 94 21 02 	call	0x442	; 0x442 <twi_receive>
	twi_receive(year, 0);
 2ae:	60 e0       	ldi	r22, 0x00	; 0
 2b0:	ce 01       	movw	r24, r28
 2b2:	0e 94 21 02 	call	0x442	; 0x442 <twi_receive>
	
	/*Сформировать состояние СТОП*/
	twi(TWI_STOP);
 2b6:	82 e0       	ldi	r24, 0x02	; 2
 2b8:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <twi>
	
	/* Преобразовать из BCD в десятичное число */
	*day	  = from_BCD(*day);
 2bc:	f7 01       	movw	r30, r14
 2be:	80 81       	ld	r24, Z
 2c0:	0e 94 66 00 	call	0xcc	; 0xcc <from_BCD>
 2c4:	f7 01       	movw	r30, r14
 2c6:	80 83       	st	Z, r24
	*month	  = from_BCD(*month);
 2c8:	f8 01       	movw	r30, r16
 2ca:	80 81       	ld	r24, Z
 2cc:	0e 94 66 00 	call	0xcc	; 0xcc <from_BCD>
 2d0:	f8 01       	movw	r30, r16
 2d2:	80 83       	st	Z, r24
	*year	  = from_BCD(*year);
 2d4:	88 81       	ld	r24, Y
 2d6:	0e 94 66 00 	call	0xcc	; 0xcc <from_BCD>
 2da:	88 83       	st	Y, r24
}
 2dc:	df 91       	pop	r29
 2de:	cf 91       	pop	r28
 2e0:	1f 91       	pop	r17
 2e2:	0f 91       	pop	r16
 2e4:	ff 90       	pop	r15
 2e6:	ef 90       	pop	r14
 2e8:	df 90       	pop	r13
 2ea:	cf 90       	pop	r12
 2ec:	08 95       	ret

000002ee <RTC_get_time>:

/* Получить время */
void RTC_get_time(uint8_t * hours, uint8_t * minutes, uint8_t * seconds)
{
 2ee:	ef 92       	push	r14
 2f0:	ff 92       	push	r15
 2f2:	0f 93       	push	r16
 2f4:	1f 93       	push	r17
 2f6:	cf 93       	push	r28
 2f8:	df 93       	push	r29
 2fa:	ec 01       	movw	r28, r24
 2fc:	8b 01       	movw	r16, r22
 2fe:	7a 01       	movw	r14, r20
	/* Сбрасываем на область памяти */
	RTC_set_value(RTC_SEC_ADR, RTC_WRITE_POINTER);
 300:	6f ef       	ldi	r22, 0xFF	; 255
 302:	80 e0       	ldi	r24, 0x00	; 0
 304:	0e 94 81 00 	call	0x102	; 0x102 <RTC_set_value>
	
	/*Сформировать состояние РЕСТАРТ*/
	twi(TWI_RESTART);
 308:	81 e0       	ldi	r24, 0x01	; 1
 30a:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <twi>
	
	/*Выдать на шину пакет SLA-R*/
	twi_transmit((DS1307_ADR<<1)|1);
 30e:	81 ed       	ldi	r24, 0xD1	; 209
 310:	0e 94 1b 02 	call	0x436	; 0x436 <twi_transmit>
	
	/*считываем данные с подтверждением, кроме последнего байта */
	twi_receive(seconds, 1);
 314:	61 e0       	ldi	r22, 0x01	; 1
 316:	c7 01       	movw	r24, r14
 318:	0e 94 21 02 	call	0x442	; 0x442 <twi_receive>
	twi_receive(minutes, 1);
 31c:	61 e0       	ldi	r22, 0x01	; 1
 31e:	c8 01       	movw	r24, r16
 320:	0e 94 21 02 	call	0x442	; 0x442 <twi_receive>
	twi_receive(hours, 0);
 324:	60 e0       	ldi	r22, 0x00	; 0
 326:	ce 01       	movw	r24, r28
 328:	0e 94 21 02 	call	0x442	; 0x442 <twi_receive>
	
	/*Сформировать состояние СТОП*/
	twi(TWI_STOP);
 32c:	82 e0       	ldi	r24, 0x02	; 2
 32e:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <twi>
	
	/* Преобразовать из BCD в десятичное число */
	*seconds  = from_BCD(*seconds & 0x7F);
 332:	f7 01       	movw	r30, r14
 334:	80 81       	ld	r24, Z
 336:	8f 77       	andi	r24, 0x7F	; 127
 338:	0e 94 66 00 	call	0xcc	; 0xcc <from_BCD>
 33c:	f7 01       	movw	r30, r14
 33e:	80 83       	st	Z, r24
	*minutes  = from_BCD(*minutes);
 340:	f8 01       	movw	r30, r16
 342:	80 81       	ld	r24, Z
 344:	0e 94 66 00 	call	0xcc	; 0xcc <from_BCD>
 348:	f8 01       	movw	r30, r16
 34a:	80 83       	st	Z, r24
	*hours	  = from_BCD(*hours);
 34c:	88 81       	ld	r24, Y
 34e:	0e 94 66 00 	call	0xcc	; 0xcc <from_BCD>
 352:	88 83       	st	Y, r24
}
 354:	df 91       	pop	r29
 356:	cf 91       	pop	r28
 358:	1f 91       	pop	r17
 35a:	0f 91       	pop	r16
 35c:	ff 90       	pop	r15
 35e:	ef 90       	pop	r14
 360:	08 95       	ret

00000362 <RTC_write_RAM>:

/* Запись в оперативную память часов */
uint8_t RTC_write_RAM(uint8_t address, uint8_t data){
	if (address < RTC_RAM_ADR || address > RTC_RAM_END)
 362:	98 ef       	ldi	r25, 0xF8	; 248
 364:	98 0f       	add	r25, r24
 366:	98 33       	cpi	r25, 0x38	; 56
 368:	20 f4       	brcc	.+8      	; 0x372 <RTC_write_RAM+0x10>
		return 0;	// ничего не записали
				
	RTC_set_value(address, data);
 36a:	0e 94 81 00 	call	0x102	; 0x102 <RTC_set_value>
	return 1;
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	08 95       	ret
}

/* Запись в оперативную память часов */
uint8_t RTC_write_RAM(uint8_t address, uint8_t data){
	if (address < RTC_RAM_ADR || address > RTC_RAM_END)
		return 0;	// ничего не записали
 372:	80 e0       	ldi	r24, 0x00	; 0
				
	RTC_set_value(address, data);
	return 1;
}
 374:	08 95       	ret

00000376 <RTC_get_RAM>:

uint8_t RTC_get_RAM(uint8_t address, uint8_t * data)
{
 376:	cf 93       	push	r28
 378:	df 93       	push	r29
	if (address < RTC_RAM_ADR || address > RTC_RAM_END)
 37a:	98 ef       	ldi	r25, 0xF8	; 248
 37c:	98 0f       	add	r25, r24
 37e:	98 33       	cpi	r25, 0x38	; 56
 380:	48 f4       	brcc	.+18     	; 0x394 <RTC_get_RAM+0x1e>
 382:	eb 01       	movw	r28, r22
		return 0;	// ничего не считали

	// Устанавливаем указатель на нужный адрес и считываем данные
	RTC_set_value(address, RTC_WRITE_POINTER);
 384:	6f ef       	ldi	r22, 0xFF	; 255
 386:	0e 94 81 00 	call	0x102	; 0x102 <RTC_set_value>
	RTC_get_value(data);
 38a:	ce 01       	movw	r24, r28
 38c:	0e 94 99 00 	call	0x132	; 0x132 <RTC_get_value>
	return 1;
 390:	81 e0       	ldi	r24, 0x01	; 1
 392:	01 c0       	rjmp	.+2      	; 0x396 <RTC_get_RAM+0x20>
}

uint8_t RTC_get_RAM(uint8_t address, uint8_t * data)
{
	if (address < RTC_RAM_ADR || address > RTC_RAM_END)
		return 0;	// ничего не считали
 394:	80 e0       	ldi	r24, 0x00	; 0

	// Устанавливаем указатель на нужный адрес и считываем данные
	RTC_set_value(address, RTC_WRITE_POINTER);
	RTC_get_value(data);
	return 1;
}
 396:	df 91       	pop	r29
 398:	cf 91       	pop	r28
 39a:	08 95       	ret

0000039c <twi_init>:
#include "twi.h"

/* Инициализация скорости и делителя I2C */
uint8_t twi_init(uint8_t prescaler, uint32_t cpu_frequency, uint32_t frequency)
{
 39c:	0f 93       	push	r16
 39e:	1f 93       	push	r17
 3a0:	cf 93       	push	r28
 3a2:	c8 2f       	mov	r28, r24
	uint32_t twbr = (cpu_frequency/frequency-16)/2;
 3a4:	cb 01       	movw	r24, r22
 3a6:	ba 01       	movw	r22, r20
 3a8:	a9 01       	movw	r20, r18
 3aa:	98 01       	movw	r18, r16
 3ac:	0e 94 6e 03 	call	0x6dc	; 0x6dc <__udivmodsi4>
 3b0:	da 01       	movw	r26, r20
 3b2:	c9 01       	movw	r24, r18
 3b4:	40 97       	sbiw	r24, 0x10	; 16
 3b6:	a1 09       	sbc	r26, r1
 3b8:	b1 09       	sbc	r27, r1
 3ba:	ac 01       	movw	r20, r24
 3bc:	bd 01       	movw	r22, r26
 3be:	76 95       	lsr	r23
 3c0:	67 95       	ror	r22
 3c2:	57 95       	ror	r21
 3c4:	47 95       	ror	r20
	if ((twbr > 0xFF) || (twbr == 0))
 3c6:	db 01       	movw	r26, r22
 3c8:	ca 01       	movw	r24, r20
 3ca:	01 97       	sbiw	r24, 0x01	; 1
 3cc:	a1 09       	sbc	r26, r1
 3ce:	b1 09       	sbc	r27, r1
 3d0:	8f 3f       	cpi	r24, 0xFF	; 255
 3d2:	91 05       	cpc	r25, r1
 3d4:	a1 05       	cpc	r26, r1
 3d6:	b1 05       	cpc	r27, r1
 3d8:	30 f4       	brcc	.+12     	; 0x3e6 <twi_init+0x4a>
	{
		return 0;
	}
	TWBR = twbr;
 3da:	40 93 b8 00 	sts	0x00B8, r20	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
	TWSR = prescaler;
 3de:	c0 93 b9 00 	sts	0x00B9, r28	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	return 1;
 3e2:	81 e0       	ldi	r24, 0x01	; 1
 3e4:	01 c0       	rjmp	.+2      	; 0x3e8 <twi_init+0x4c>
uint8_t twi_init(uint8_t prescaler, uint32_t cpu_frequency, uint32_t frequency)
{
	uint32_t twbr = (cpu_frequency/frequency-16)/2;
	if ((twbr > 0xFF) || (twbr == 0))
	{
		return 0;
 3e6:	80 e0       	ldi	r24, 0x00	; 0
	}
	TWBR = twbr;
	TWSR = prescaler;
	return 1;
}
 3e8:	cf 91       	pop	r28
 3ea:	1f 91       	pop	r17
 3ec:	0f 91       	pop	r16
 3ee:	08 95       	ret

000003f0 <twi>:

/* Команды I2C */
uint8_t twi(uint8_t action)
{
	switch(action){
 3f0:	82 30       	cpi	r24, 0x02	; 2
 3f2:	59 f0       	breq	.+22     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 3f4:	30 f0       	brcs	.+12     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3f6:	84 30       	cpi	r24, 0x04	; 4
 3f8:	81 f0       	breq	.+32     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 3fa:	58 f0       	brcs	.+22     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 3fc:	85 30       	cpi	r24, 0x05	; 5
 3fe:	81 f4       	brne	.+32     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 400:	08 c0       	rjmp	.+16     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
		case TWI_START:
		case TWI_RESTART:
			TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
 402:	94 ea       	ldi	r25, 0xA4	; 164
 404:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			break;
 408:	0b c0       	rjmp	.+22     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
		case TWI_STOP:
			TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
 40a:	84 e9       	ldi	r24, 0x94	; 148
 40c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 410:	0e c0       	rjmp	.+28     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
			break;
		case TWI_TRANSMIT:
		case TWI_RECEIVE_NACK:
			TWCR = (1<<TWINT)|(1<<TWEN);
 412:	94 e8       	ldi	r25, 0x84	; 132
 414:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			break;
 418:	03 c0       	rjmp	.+6      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
		case TWI_RECEIVE_ACK:
			TWCR = (1<<TWINT)|(1<<TWEA)|(1<<TWEN);
 41a:	94 ec       	ldi	r25, 0xC4	; 196
 41c:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			break;
		default:
			break;
	}
	
	if (action != TWI_STOP)
 420:	82 30       	cpi	r24, 0x02	; 2
 422:	29 f0       	breq	.+10     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
	{
		while (!(TWCR & (1<<TWINT)));
 424:	ec eb       	ldi	r30, 0xBC	; 188
 426:	f0 e0       	ldi	r31, 0x00	; 0
 428:	80 81       	ld	r24, Z
 42a:	88 23       	and	r24, r24
 42c:	ec f7       	brge	.-6      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
	}
	
	uint8_t status = TWSR & 0xF8; // Статус выполнения (0xF8 = 11111000 - без двух настроечных и одного зарезервивованного бита)
 42e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	return status;
}
 432:	88 7f       	andi	r24, 0xF8	; 248
 434:	08 95       	ret

00000436 <twi_transmit>:

/* Передать данные */
uint8_t twi_transmit(uint8_t data)
{
	TWDR = data;
 436:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	return twi(TWI_TRANSMIT);
 43a:	83 e0       	ldi	r24, 0x03	; 3
 43c:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <twi>
}
 440:	08 95       	ret

00000442 <twi_receive>:

/* Получить данные */
uint8_t twi_receive(uint8_t * data, uint8_t with_ack)
{
 442:	cf 93       	push	r28
 444:	df 93       	push	r29
 446:	ec 01       	movw	r28, r24
	uint8_t status = twi(with_ack > 0 ? TWI_RECEIVE_ACK : TWI_RECEIVE_NACK);
 448:	61 11       	cpse	r22, r1
 44a:	02 c0       	rjmp	.+4      	; 0x450 <twi_receive+0xe>
 44c:	85 e0       	ldi	r24, 0x05	; 5
 44e:	01 c0       	rjmp	.+2      	; 0x452 <twi_receive+0x10>
 450:	84 e0       	ldi	r24, 0x04	; 4
 452:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <twi>
	*data = TWDR;
 456:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 45a:	98 83       	st	Y, r25
	return status;
 45c:	df 91       	pop	r29
 45e:	cf 91       	pop	r28
 460:	08 95       	ret

00000462 <init_UART>:
{
	data = buffer;		// Переносим буфер
	data_to_send = sz;	// Переносим размер
	data_i = 0;		// Инициализируем счетчик
	sei();			// Разрешаем прерывания
	UCSR0B |= (1<<UDRIE0);	// Разрешаем прерывание по "пустому" UDRE
 462:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 466:	88 e0       	ldi	r24, 0x08	; 8
 468:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 46c:	86 e0       	ldi	r24, 0x06	; 6
 46e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 472:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 476:	87 e6       	ldi	r24, 0x67	; 103
 478:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 47c:	08 95       	ret

0000047e <__vector_19>:
 47e:	1f 92       	push	r1
 480:	0f 92       	push	r0
 482:	0f b6       	in	r0, 0x3f	; 63
 484:	0f 92       	push	r0
 486:	11 24       	eor	r1, r1
 488:	8f 93       	push	r24
 48a:	9f 93       	push	r25
 48c:	ef 93       	push	r30
 48e:	ff 93       	push	r31
 490:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <data_i>
 494:	e0 91 7c 01 	lds	r30, 0x017C	; 0x80017c <data>
 498:	f0 91 7d 01 	lds	r31, 0x017D	; 0x80017d <data+0x1>
 49c:	e8 0f       	add	r30, r24
 49e:	f1 1d       	adc	r31, r1
 4a0:	80 81       	ld	r24, Z
 4a2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 4a6:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <data_i>
 4aa:	8f 5f       	subi	r24, 0xFF	; 255
 4ac:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <data_i>
 4b0:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <__data_end>
 4b4:	89 13       	cpse	r24, r25
 4b6:	06 c0       	rjmp	.+12     	; 0x4c4 <__vector_19+0x46>
 4b8:	e1 ec       	ldi	r30, 0xC1	; 193
 4ba:	f0 e0       	ldi	r31, 0x00	; 0
 4bc:	80 81       	ld	r24, Z
 4be:	8f 7d       	andi	r24, 0xDF	; 223
 4c0:	80 83       	st	Z, r24
 4c2:	f8 94       	cli
 4c4:	ff 91       	pop	r31
 4c6:	ef 91       	pop	r30
 4c8:	9f 91       	pop	r25
 4ca:	8f 91       	pop	r24
 4cc:	0f 90       	pop	r0
 4ce:	0f be       	out	0x3f, r0	; 63
 4d0:	0f 90       	pop	r0
 4d2:	1f 90       	pop	r1
 4d4:	18 95       	reti

000004d6 <send_byte>:
}

/* Функция для передачи байта без прерываний */
void send_byte(uint8_t byte)
{
	while(!( UCSR0A & (1 << UDRE0))) ;	// ожидаем, пока UDR0 не будет нулевым (не закончится передача)
 4d6:	e0 ec       	ldi	r30, 0xC0	; 192
 4d8:	f0 e0       	ldi	r31, 0x00	; 0
 4da:	90 81       	ld	r25, Z
 4dc:	95 ff       	sbrs	r25, 5
 4de:	fd cf       	rjmp	.-6      	; 0x4da <send_byte+0x4>
	UDR0 = byte;				// записываем байт в порт
 4e0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 4e4:	08 95       	ret

000004e6 <send_buffer>:
}

/* Функция для передачи строки без прерываний */
void send_buffer(char * buffer, uint8_t sz)
{
 4e6:	0f 93       	push	r16
 4e8:	1f 93       	push	r17
 4ea:	cf 93       	push	r28
 4ec:	df 93       	push	r29
	for (uint8_t i = 0; i < sz; ++i)
 4ee:	66 23       	and	r22, r22
 4f0:	71 f0       	breq	.+28     	; 0x50e <send_buffer+0x28>
 4f2:	ec 01       	movw	r28, r24
 4f4:	61 50       	subi	r22, 0x01	; 1
 4f6:	06 2f       	mov	r16, r22
 4f8:	10 e0       	ldi	r17, 0x00	; 0
 4fa:	0f 5f       	subi	r16, 0xFF	; 255
 4fc:	1f 4f       	sbci	r17, 0xFF	; 255
 4fe:	08 0f       	add	r16, r24
 500:	19 1f       	adc	r17, r25
	send_byte(buffer[i]);
 502:	89 91       	ld	r24, Y+
 504:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <send_byte>
}

/* Функция для передачи строки без прерываний */
void send_buffer(char * buffer, uint8_t sz)
{
	for (uint8_t i = 0; i < sz; ++i)
 508:	c0 17       	cp	r28, r16
 50a:	d1 07       	cpc	r29, r17
 50c:	d1 f7       	brne	.-12     	; 0x502 <send_buffer+0x1c>
	send_byte(buffer[i]);
 50e:	df 91       	pop	r29
 510:	cf 91       	pop	r28
 512:	1f 91       	pop	r17
 514:	0f 91       	pop	r16
 516:	08 95       	ret

00000518 <main>:

const char * weekdays[7] =
{"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"};

int main(void)
{
 518:	cf 93       	push	r28
 51a:	df 93       	push	r29
 51c:	1f 92       	push	r1
 51e:	cd b7       	in	r28, 0x3d	; 61
 520:	de b7       	in	r29, 0x3e	; 62
	// Предделитель частоты 1
	CLKPR=(1<<CLKPCE);
 522:	e1 e6       	ldi	r30, 0x61	; 97
 524:	f0 e0       	ldi	r31, 0x00	; 0
 526:	80 e8       	ldi	r24, 0x80	; 128
 528:	80 83       	st	Z, r24
	CLKPR=0;
 52a:	10 82       	st	Z, r1
	
	init_UART();
 52c:	0e 94 31 02 	call	0x462	; 0x462 <init_UART>
	
	RTC_init();
 530:	0e 94 71 00 	call	0xe2	; 0xe2 <RTC_init>
	
	// Запись во второй байт памяти числа 136
	uint8_t ram_status = RTC_write_RAM(RTC_RAM_ADR+1, 136);
 534:	68 e8       	ldi	r22, 0x88	; 136
 536:	89 e0       	ldi	r24, 0x09	; 9
 538:	0e 94 b1 01 	call	0x362	; 0x362 <RTC_write_RAM>
	
	if (ram_status)
 53c:	88 23       	and	r24, r24
 53e:	19 f1       	breq	.+70     	; 0x586 <main+0x6e>
	{
		// Чтение из RAM
		uint8_t ram_data;
		ram_status = RTC_get_RAM(RTC_RAM_ADR+1, &ram_data);
 540:	be 01       	movw	r22, r28
 542:	6f 5f       	subi	r22, 0xFF	; 255
 544:	7f 4f       	sbci	r23, 0xFF	; 255
 546:	89 e0       	ldi	r24, 0x09	; 9
 548:	0e 94 bb 01 	call	0x376	; 0x376 <RTC_get_RAM>
		
		if (ram_status)
 54c:	88 23       	and	r24, r24
 54e:	d9 f0       	breq	.+54     	; 0x586 <main+0x6e>
		{
			sprintf(mes, "read from RAM: %u", ram_data);
 550:	89 81       	ldd	r24, Y+1	; 0x01
 552:	1f 92       	push	r1
 554:	8f 93       	push	r24
 556:	8e e0       	ldi	r24, 0x0E	; 14
 558:	91 e0       	ldi	r25, 0x01	; 1
 55a:	9f 93       	push	r25
 55c:	8f 93       	push	r24
 55e:	84 e8       	ldi	r24, 0x84	; 132
 560:	91 e0       	ldi	r25, 0x01	; 1
 562:	9f 93       	push	r25
 564:	8f 93       	push	r24
 566:	0e 94 90 03 	call	0x720	; 0x720 <sprintf>
			send_buffer(mes, sizeof(mes) / sizeof(char));
 56a:	64 e1       	ldi	r22, 0x14	; 20
 56c:	84 e8       	ldi	r24, 0x84	; 132
 56e:	91 e0       	ldi	r25, 0x01	; 1
 570:	0e 94 73 02 	call	0x4e6	; 0x4e6 <send_buffer>
			send_byte('\r');
 574:	8d e0       	ldi	r24, 0x0D	; 13
 576:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <send_byte>
 57a:	0f 90       	pop	r0
 57c:	0f 90       	pop	r0
 57e:	0f 90       	pop	r0
 580:	0f 90       	pop	r0
 582:	0f 90       	pop	r0
 584:	0f 90       	pop	r0
		}
	}
	
	RTC_set_out(1); // На выходе OUT=1
 586:	81 e0       	ldi	r24, 0x01	; 1
 588:	0e 94 06 01 	call	0x20c	; 0x20c <RTC_set_out>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 58c:	2f ef       	ldi	r18, 0xFF	; 255
 58e:	87 ea       	ldi	r24, 0xA7	; 167
 590:	91 e6       	ldi	r25, 0x61	; 97
 592:	21 50       	subi	r18, 0x01	; 1
 594:	80 40       	sbci	r24, 0x00	; 0
 596:	90 40       	sbci	r25, 0x00	; 0
 598:	e1 f7       	brne	.-8      	; 0x592 <main+0x7a>
 59a:	00 c0       	rjmp	.+0      	; 0x59c <main+0x84>
 59c:	00 00       	nop
	_delay_ms(2000);
	
	RTC_set_out(0); // На выходе OUT=0
 59e:	80 e0       	ldi	r24, 0x00	; 0
 5a0:	0e 94 06 01 	call	0x20c	; 0x20c <RTC_set_out>
 5a4:	2f ef       	ldi	r18, 0xFF	; 255
 5a6:	87 ea       	ldi	r24, 0xA7	; 167
 5a8:	91 e6       	ldi	r25, 0x61	; 97
 5aa:	21 50       	subi	r18, 0x01	; 1
 5ac:	80 40       	sbci	r24, 0x00	; 0
 5ae:	90 40       	sbci	r25, 0x00	; 0
 5b0:	e1 f7       	brne	.-8      	; 0x5aa <main+0x92>
 5b2:	00 c0       	rjmp	.+0      	; 0x5b4 <main+0x9c>
 5b4:	00 00       	nop
	_delay_ms(2000);
	
	RTC_set_sqwe(F_1HZ); // Включить сигнал частотой 1 Гц
 5b6:	80 e0       	ldi	r24, 0x00	; 0
 5b8:	0e 94 0e 01 	call	0x21c	; 0x21c <RTC_set_sqwe>
	
	RTC_set_date(28, 12, 24, 7); // установить дату 28.12.2024 Суббота
 5bc:	27 e0       	ldi	r18, 0x07	; 7
 5be:	48 e1       	ldi	r20, 0x18	; 24
 5c0:	6c e0       	ldi	r22, 0x0C	; 12
 5c2:	8c e1       	ldi	r24, 0x1C	; 28
 5c4:	0e 94 ac 00 	call	0x158	; 0x158 <RTC_set_date>
	RTC_set_time(13, 45, 32);	 // установить время 13:45:32
 5c8:	40 e2       	ldi	r20, 0x20	; 32
 5ca:	6d e2       	ldi	r22, 0x2D	; 45
 5cc:	8d e0       	ldi	r24, 0x0D	; 13
 5ce:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <RTC_set_time>
	
	RTC_start_stop_watch(0);	// выключить часы
 5d2:	80 e0       	ldi	r24, 0x00	; 0
 5d4:	0e 94 14 01 	call	0x228	; 0x228 <RTC_start_stop_watch>

	int ticks = 0;
 5d8:	e1 2c       	mov	r14, r1
 5da:	f1 2c       	mov	r15, r1
	
	/* Пишем в порт разными способами */
	while (1)
	{
		RTC_get_time(&hours, &minutes, &seconds);
		sprintf(mes, "%02u:%02u:%02u", hours, minutes, seconds);
 5dc:	0f 2e       	mov	r0, r31
 5de:	f0 e2       	ldi	r31, 0x20	; 32
 5e0:	af 2e       	mov	r10, r31
 5e2:	f1 e0       	ldi	r31, 0x01	; 1
 5e4:	bf 2e       	mov	r11, r31
 5e6:	f0 2d       	mov	r31, r0
 5e8:	04 e8       	ldi	r16, 0x84	; 132
 5ea:	11 e0       	ldi	r17, 0x01	; 1
		send_buffer(mes, 8);
		send_byte('\r');
		
		RTC_get_date(&year, &month, &day, &day_week);
		sprintf(mes, "%02u.%02u.%u %s ", day, month, year, weekdays[day_week-1]);
 5ec:	0f 2e       	mov	r0, r31
 5ee:	ff e2       	ldi	r31, 0x2F	; 47
 5f0:	cf 2e       	mov	r12, r31
 5f2:	f1 e0       	ldi	r31, 0x01	; 1
 5f4:	df 2e       	mov	r13, r31
 5f6:	f0 2d       	mov	r31, r0
	int ticks = 0;
	
	/* Пишем в порт разными способами */
	while (1)
	{
		RTC_get_time(&hours, &minutes, &seconds);
 5f8:	4f e7       	ldi	r20, 0x7F	; 127
 5fa:	51 e0       	ldi	r21, 0x01	; 1
 5fc:	63 e8       	ldi	r22, 0x83	; 131
 5fe:	71 e0       	ldi	r23, 0x01	; 1
 600:	88 e9       	ldi	r24, 0x98	; 152
 602:	91 e0       	ldi	r25, 0x01	; 1
 604:	0e 94 77 01 	call	0x2ee	; 0x2ee <RTC_get_time>
		sprintf(mes, "%02u:%02u:%02u", hours, minutes, seconds);
 608:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <seconds>
 60c:	1f 92       	push	r1
 60e:	8f 93       	push	r24
 610:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <minutes>
 614:	1f 92       	push	r1
 616:	8f 93       	push	r24
 618:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <hours>
 61c:	1f 92       	push	r1
 61e:	8f 93       	push	r24
 620:	bf 92       	push	r11
 622:	af 92       	push	r10
 624:	1f 93       	push	r17
 626:	0f 93       	push	r16
 628:	0e 94 90 03 	call	0x720	; 0x720 <sprintf>
		send_buffer(mes, 8);
 62c:	68 e0       	ldi	r22, 0x08	; 8
 62e:	c8 01       	movw	r24, r16
 630:	0e 94 73 02 	call	0x4e6	; 0x4e6 <send_buffer>
		send_byte('\r');
 634:	8d e0       	ldi	r24, 0x0D	; 13
 636:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <send_byte>
		
		RTC_get_date(&year, &month, &day, &day_week);
 63a:	22 e8       	ldi	r18, 0x82	; 130
 63c:	31 e0       	ldi	r19, 0x01	; 1
 63e:	41 e8       	ldi	r20, 0x81	; 129
 640:	51 e0       	ldi	r21, 0x01	; 1
 642:	6e e7       	ldi	r22, 0x7E	; 126
 644:	71 e0       	ldi	r23, 0x01	; 1
 646:	80 e8       	ldi	r24, 0x80	; 128
 648:	91 e0       	ldi	r25, 0x01	; 1
 64a:	0e 94 35 01 	call	0x26a	; 0x26a <RTC_get_date>
		sprintf(mes, "%02u.%02u.%u %s ", day, month, year, weekdays[day_week-1]);
 64e:	e0 91 82 01 	lds	r30, 0x0182	; 0x800182 <day_week>
 652:	f0 e0       	ldi	r31, 0x00	; 0
 654:	ee 0f       	add	r30, r30
 656:	ff 1f       	adc	r31, r31
 658:	e2 50       	subi	r30, 0x02	; 2
 65a:	ff 4f       	sbci	r31, 0xFF	; 255
 65c:	81 81       	ldd	r24, Z+1	; 0x01
 65e:	8f 93       	push	r24
 660:	80 81       	ld	r24, Z
 662:	8f 93       	push	r24
 664:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <year>
 668:	1f 92       	push	r1
 66a:	8f 93       	push	r24
 66c:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <month>
 670:	1f 92       	push	r1
 672:	8f 93       	push	r24
 674:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <day>
 678:	1f 92       	push	r1
 67a:	8f 93       	push	r24
 67c:	df 92       	push	r13
 67e:	cf 92       	push	r12
 680:	1f 93       	push	r17
 682:	0f 93       	push	r16
 684:	0e 94 90 03 	call	0x720	; 0x720 <sprintf>
		send_buffer(mes, sizeof(mes) / sizeof(char));
 688:	64 e1       	ldi	r22, 0x14	; 20
 68a:	c8 01       	movw	r24, r16
 68c:	0e 94 73 02 	call	0x4e6	; 0x4e6 <send_buffer>
		send_byte('\r');
 690:	8d e0       	ldi	r24, 0x0D	; 13
 692:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <send_byte>
		
		// Через 5 секунд включить часы
		if (ticks < 10)
 696:	0f b6       	in	r0, 0x3f	; 63
 698:	f8 94       	cli
 69a:	de bf       	out	0x3e, r29	; 62
 69c:	0f be       	out	0x3f, r0	; 63
 69e:	cd bf       	out	0x3d, r28	; 61
 6a0:	9a e0       	ldi	r25, 0x0A	; 10
 6a2:	e9 16       	cp	r14, r25
 6a4:	f1 04       	cpc	r15, r1
 6a6:	24 f4       	brge	.+8      	; 0x6b0 <main+0x198>
		{
			++ticks;
 6a8:	2f ef       	ldi	r18, 0xFF	; 255
 6aa:	e2 1a       	sub	r14, r18
 6ac:	f2 0a       	sbc	r15, r18
 6ae:	0c c0       	rjmp	.+24     	; 0x6c8 <main+0x1b0>
		} else if (ticks == 10) {
 6b0:	8a e0       	ldi	r24, 0x0A	; 10
 6b2:	e8 16       	cp	r14, r24
 6b4:	f1 04       	cpc	r15, r1
 6b6:	41 f4       	brne	.+16     	; 0x6c8 <main+0x1b0>
			RTC_start_stop_watch(1);
 6b8:	81 e0       	ldi	r24, 0x01	; 1
 6ba:	0e 94 14 01 	call	0x228	; 0x228 <RTC_start_stop_watch>
			++ticks;
 6be:	0f 2e       	mov	r0, r31
 6c0:	fb e0       	ldi	r31, 0x0B	; 11
 6c2:	ef 2e       	mov	r14, r31
 6c4:	f1 2c       	mov	r15, r1
 6c6:	f0 2d       	mov	r31, r0
 6c8:	9f ef       	ldi	r25, 0xFF	; 255
 6ca:	29 e6       	ldi	r18, 0x69	; 105
 6cc:	88 e1       	ldi	r24, 0x18	; 24
 6ce:	91 50       	subi	r25, 0x01	; 1
 6d0:	20 40       	sbci	r18, 0x00	; 0
 6d2:	80 40       	sbci	r24, 0x00	; 0
 6d4:	e1 f7       	brne	.-8      	; 0x6ce <main+0x1b6>
 6d6:	00 c0       	rjmp	.+0      	; 0x6d8 <main+0x1c0>
 6d8:	00 00       	nop
 6da:	8e cf       	rjmp	.-228    	; 0x5f8 <main+0xe0>

000006dc <__udivmodsi4>:
 6dc:	a1 e2       	ldi	r26, 0x21	; 33
 6de:	1a 2e       	mov	r1, r26
 6e0:	aa 1b       	sub	r26, r26
 6e2:	bb 1b       	sub	r27, r27
 6e4:	fd 01       	movw	r30, r26
 6e6:	0d c0       	rjmp	.+26     	; 0x702 <__udivmodsi4_ep>

000006e8 <__udivmodsi4_loop>:
 6e8:	aa 1f       	adc	r26, r26
 6ea:	bb 1f       	adc	r27, r27
 6ec:	ee 1f       	adc	r30, r30
 6ee:	ff 1f       	adc	r31, r31
 6f0:	a2 17       	cp	r26, r18
 6f2:	b3 07       	cpc	r27, r19
 6f4:	e4 07       	cpc	r30, r20
 6f6:	f5 07       	cpc	r31, r21
 6f8:	20 f0       	brcs	.+8      	; 0x702 <__udivmodsi4_ep>
 6fa:	a2 1b       	sub	r26, r18
 6fc:	b3 0b       	sbc	r27, r19
 6fe:	e4 0b       	sbc	r30, r20
 700:	f5 0b       	sbc	r31, r21

00000702 <__udivmodsi4_ep>:
 702:	66 1f       	adc	r22, r22
 704:	77 1f       	adc	r23, r23
 706:	88 1f       	adc	r24, r24
 708:	99 1f       	adc	r25, r25
 70a:	1a 94       	dec	r1
 70c:	69 f7       	brne	.-38     	; 0x6e8 <__udivmodsi4_loop>
 70e:	60 95       	com	r22
 710:	70 95       	com	r23
 712:	80 95       	com	r24
 714:	90 95       	com	r25
 716:	9b 01       	movw	r18, r22
 718:	ac 01       	movw	r20, r24
 71a:	bd 01       	movw	r22, r26
 71c:	cf 01       	movw	r24, r30
 71e:	08 95       	ret

00000720 <sprintf>:
 720:	ae e0       	ldi	r26, 0x0E	; 14
 722:	b0 e0       	ldi	r27, 0x00	; 0
 724:	e6 e9       	ldi	r30, 0x96	; 150
 726:	f3 e0       	ldi	r31, 0x03	; 3
 728:	0c 94 51 06 	jmp	0xca2	; 0xca2 <__prologue_saves__+0x1c>
 72c:	0d 89       	ldd	r16, Y+21	; 0x15
 72e:	1e 89       	ldd	r17, Y+22	; 0x16
 730:	86 e0       	ldi	r24, 0x06	; 6
 732:	8c 83       	std	Y+4, r24	; 0x04
 734:	1a 83       	std	Y+2, r17	; 0x02
 736:	09 83       	std	Y+1, r16	; 0x01
 738:	8f ef       	ldi	r24, 0xFF	; 255
 73a:	9f e7       	ldi	r25, 0x7F	; 127
 73c:	9e 83       	std	Y+6, r25	; 0x06
 73e:	8d 83       	std	Y+5, r24	; 0x05
 740:	ae 01       	movw	r20, r28
 742:	47 5e       	subi	r20, 0xE7	; 231
 744:	5f 4f       	sbci	r21, 0xFF	; 255
 746:	6f 89       	ldd	r22, Y+23	; 0x17
 748:	78 8d       	ldd	r23, Y+24	; 0x18
 74a:	ce 01       	movw	r24, r28
 74c:	01 96       	adiw	r24, 0x01	; 1
 74e:	0e 94 b2 03 	call	0x764	; 0x764 <vfprintf>
 752:	ef 81       	ldd	r30, Y+7	; 0x07
 754:	f8 85       	ldd	r31, Y+8	; 0x08
 756:	e0 0f       	add	r30, r16
 758:	f1 1f       	adc	r31, r17
 75a:	10 82       	st	Z, r1
 75c:	2e 96       	adiw	r28, 0x0e	; 14
 75e:	e4 e0       	ldi	r30, 0x04	; 4
 760:	0c 94 6d 06 	jmp	0xcda	; 0xcda <__epilogue_restores__+0x1c>

00000764 <vfprintf>:
 764:	ab e0       	ldi	r26, 0x0B	; 11
 766:	b0 e0       	ldi	r27, 0x00	; 0
 768:	e8 eb       	ldi	r30, 0xB8	; 184
 76a:	f3 e0       	ldi	r31, 0x03	; 3
 76c:	0c 94 43 06 	jmp	0xc86	; 0xc86 <__prologue_saves__>
 770:	6c 01       	movw	r12, r24
 772:	7b 01       	movw	r14, r22
 774:	8a 01       	movw	r16, r20
 776:	fc 01       	movw	r30, r24
 778:	17 82       	std	Z+7, r1	; 0x07
 77a:	16 82       	std	Z+6, r1	; 0x06
 77c:	83 81       	ldd	r24, Z+3	; 0x03
 77e:	81 ff       	sbrs	r24, 1
 780:	cc c1       	rjmp	.+920    	; 0xb1a <__stack+0x21b>
 782:	ce 01       	movw	r24, r28
 784:	01 96       	adiw	r24, 0x01	; 1
 786:	3c 01       	movw	r6, r24
 788:	f6 01       	movw	r30, r12
 78a:	93 81       	ldd	r25, Z+3	; 0x03
 78c:	f7 01       	movw	r30, r14
 78e:	93 fd       	sbrc	r25, 3
 790:	85 91       	lpm	r24, Z+
 792:	93 ff       	sbrs	r25, 3
 794:	81 91       	ld	r24, Z+
 796:	7f 01       	movw	r14, r30
 798:	88 23       	and	r24, r24
 79a:	09 f4       	brne	.+2      	; 0x79e <vfprintf+0x3a>
 79c:	ba c1       	rjmp	.+884    	; 0xb12 <__stack+0x213>
 79e:	85 32       	cpi	r24, 0x25	; 37
 7a0:	39 f4       	brne	.+14     	; 0x7b0 <vfprintf+0x4c>
 7a2:	93 fd       	sbrc	r25, 3
 7a4:	85 91       	lpm	r24, Z+
 7a6:	93 ff       	sbrs	r25, 3
 7a8:	81 91       	ld	r24, Z+
 7aa:	7f 01       	movw	r14, r30
 7ac:	85 32       	cpi	r24, 0x25	; 37
 7ae:	29 f4       	brne	.+10     	; 0x7ba <vfprintf+0x56>
 7b0:	b6 01       	movw	r22, r12
 7b2:	90 e0       	ldi	r25, 0x00	; 0
 7b4:	0e 94 a9 05 	call	0xb52	; 0xb52 <fputc>
 7b8:	e7 cf       	rjmp	.-50     	; 0x788 <vfprintf+0x24>
 7ba:	91 2c       	mov	r9, r1
 7bc:	21 2c       	mov	r2, r1
 7be:	31 2c       	mov	r3, r1
 7c0:	ff e1       	ldi	r31, 0x1F	; 31
 7c2:	f3 15       	cp	r31, r3
 7c4:	d8 f0       	brcs	.+54     	; 0x7fc <vfprintf+0x98>
 7c6:	8b 32       	cpi	r24, 0x2B	; 43
 7c8:	79 f0       	breq	.+30     	; 0x7e8 <vfprintf+0x84>
 7ca:	38 f4       	brcc	.+14     	; 0x7da <vfprintf+0x76>
 7cc:	80 32       	cpi	r24, 0x20	; 32
 7ce:	79 f0       	breq	.+30     	; 0x7ee <vfprintf+0x8a>
 7d0:	83 32       	cpi	r24, 0x23	; 35
 7d2:	a1 f4       	brne	.+40     	; 0x7fc <vfprintf+0x98>
 7d4:	23 2d       	mov	r18, r3
 7d6:	20 61       	ori	r18, 0x10	; 16
 7d8:	1d c0       	rjmp	.+58     	; 0x814 <vfprintf+0xb0>
 7da:	8d 32       	cpi	r24, 0x2D	; 45
 7dc:	61 f0       	breq	.+24     	; 0x7f6 <vfprintf+0x92>
 7de:	80 33       	cpi	r24, 0x30	; 48
 7e0:	69 f4       	brne	.+26     	; 0x7fc <vfprintf+0x98>
 7e2:	23 2d       	mov	r18, r3
 7e4:	21 60       	ori	r18, 0x01	; 1
 7e6:	16 c0       	rjmp	.+44     	; 0x814 <vfprintf+0xb0>
 7e8:	83 2d       	mov	r24, r3
 7ea:	82 60       	ori	r24, 0x02	; 2
 7ec:	38 2e       	mov	r3, r24
 7ee:	e3 2d       	mov	r30, r3
 7f0:	e4 60       	ori	r30, 0x04	; 4
 7f2:	3e 2e       	mov	r3, r30
 7f4:	2a c0       	rjmp	.+84     	; 0x84a <vfprintf+0xe6>
 7f6:	f3 2d       	mov	r31, r3
 7f8:	f8 60       	ori	r31, 0x08	; 8
 7fa:	1d c0       	rjmp	.+58     	; 0x836 <vfprintf+0xd2>
 7fc:	37 fc       	sbrc	r3, 7
 7fe:	2d c0       	rjmp	.+90     	; 0x85a <vfprintf+0xf6>
 800:	20 ed       	ldi	r18, 0xD0	; 208
 802:	28 0f       	add	r18, r24
 804:	2a 30       	cpi	r18, 0x0A	; 10
 806:	40 f0       	brcs	.+16     	; 0x818 <vfprintf+0xb4>
 808:	8e 32       	cpi	r24, 0x2E	; 46
 80a:	b9 f4       	brne	.+46     	; 0x83a <vfprintf+0xd6>
 80c:	36 fc       	sbrc	r3, 6
 80e:	81 c1       	rjmp	.+770    	; 0xb12 <__stack+0x213>
 810:	23 2d       	mov	r18, r3
 812:	20 64       	ori	r18, 0x40	; 64
 814:	32 2e       	mov	r3, r18
 816:	19 c0       	rjmp	.+50     	; 0x84a <vfprintf+0xe6>
 818:	36 fe       	sbrs	r3, 6
 81a:	06 c0       	rjmp	.+12     	; 0x828 <vfprintf+0xc4>
 81c:	8a e0       	ldi	r24, 0x0A	; 10
 81e:	98 9e       	mul	r9, r24
 820:	20 0d       	add	r18, r0
 822:	11 24       	eor	r1, r1
 824:	92 2e       	mov	r9, r18
 826:	11 c0       	rjmp	.+34     	; 0x84a <vfprintf+0xe6>
 828:	ea e0       	ldi	r30, 0x0A	; 10
 82a:	2e 9e       	mul	r2, r30
 82c:	20 0d       	add	r18, r0
 82e:	11 24       	eor	r1, r1
 830:	22 2e       	mov	r2, r18
 832:	f3 2d       	mov	r31, r3
 834:	f0 62       	ori	r31, 0x20	; 32
 836:	3f 2e       	mov	r3, r31
 838:	08 c0       	rjmp	.+16     	; 0x84a <vfprintf+0xe6>
 83a:	8c 36       	cpi	r24, 0x6C	; 108
 83c:	21 f4       	brne	.+8      	; 0x846 <vfprintf+0xe2>
 83e:	83 2d       	mov	r24, r3
 840:	80 68       	ori	r24, 0x80	; 128
 842:	38 2e       	mov	r3, r24
 844:	02 c0       	rjmp	.+4      	; 0x84a <vfprintf+0xe6>
 846:	88 36       	cpi	r24, 0x68	; 104
 848:	41 f4       	brne	.+16     	; 0x85a <vfprintf+0xf6>
 84a:	f7 01       	movw	r30, r14
 84c:	93 fd       	sbrc	r25, 3
 84e:	85 91       	lpm	r24, Z+
 850:	93 ff       	sbrs	r25, 3
 852:	81 91       	ld	r24, Z+
 854:	7f 01       	movw	r14, r30
 856:	81 11       	cpse	r24, r1
 858:	b3 cf       	rjmp	.-154    	; 0x7c0 <vfprintf+0x5c>
 85a:	98 2f       	mov	r25, r24
 85c:	9f 7d       	andi	r25, 0xDF	; 223
 85e:	95 54       	subi	r25, 0x45	; 69
 860:	93 30       	cpi	r25, 0x03	; 3
 862:	28 f4       	brcc	.+10     	; 0x86e <vfprintf+0x10a>
 864:	0c 5f       	subi	r16, 0xFC	; 252
 866:	1f 4f       	sbci	r17, 0xFF	; 255
 868:	9f e3       	ldi	r25, 0x3F	; 63
 86a:	99 83       	std	Y+1, r25	; 0x01
 86c:	0d c0       	rjmp	.+26     	; 0x888 <vfprintf+0x124>
 86e:	83 36       	cpi	r24, 0x63	; 99
 870:	31 f0       	breq	.+12     	; 0x87e <vfprintf+0x11a>
 872:	83 37       	cpi	r24, 0x73	; 115
 874:	71 f0       	breq	.+28     	; 0x892 <vfprintf+0x12e>
 876:	83 35       	cpi	r24, 0x53	; 83
 878:	09 f0       	breq	.+2      	; 0x87c <vfprintf+0x118>
 87a:	59 c0       	rjmp	.+178    	; 0x92e <__stack+0x2f>
 87c:	21 c0       	rjmp	.+66     	; 0x8c0 <vfprintf+0x15c>
 87e:	f8 01       	movw	r30, r16
 880:	80 81       	ld	r24, Z
 882:	89 83       	std	Y+1, r24	; 0x01
 884:	0e 5f       	subi	r16, 0xFE	; 254
 886:	1f 4f       	sbci	r17, 0xFF	; 255
 888:	88 24       	eor	r8, r8
 88a:	83 94       	inc	r8
 88c:	91 2c       	mov	r9, r1
 88e:	53 01       	movw	r10, r6
 890:	13 c0       	rjmp	.+38     	; 0x8b8 <vfprintf+0x154>
 892:	28 01       	movw	r4, r16
 894:	f2 e0       	ldi	r31, 0x02	; 2
 896:	4f 0e       	add	r4, r31
 898:	51 1c       	adc	r5, r1
 89a:	f8 01       	movw	r30, r16
 89c:	a0 80       	ld	r10, Z
 89e:	b1 80       	ldd	r11, Z+1	; 0x01
 8a0:	36 fe       	sbrs	r3, 6
 8a2:	03 c0       	rjmp	.+6      	; 0x8aa <vfprintf+0x146>
 8a4:	69 2d       	mov	r22, r9
 8a6:	70 e0       	ldi	r23, 0x00	; 0
 8a8:	02 c0       	rjmp	.+4      	; 0x8ae <vfprintf+0x14a>
 8aa:	6f ef       	ldi	r22, 0xFF	; 255
 8ac:	7f ef       	ldi	r23, 0xFF	; 255
 8ae:	c5 01       	movw	r24, r10
 8b0:	0e 94 9e 05 	call	0xb3c	; 0xb3c <strnlen>
 8b4:	4c 01       	movw	r8, r24
 8b6:	82 01       	movw	r16, r4
 8b8:	f3 2d       	mov	r31, r3
 8ba:	ff 77       	andi	r31, 0x7F	; 127
 8bc:	3f 2e       	mov	r3, r31
 8be:	16 c0       	rjmp	.+44     	; 0x8ec <vfprintf+0x188>
 8c0:	28 01       	movw	r4, r16
 8c2:	22 e0       	ldi	r18, 0x02	; 2
 8c4:	42 0e       	add	r4, r18
 8c6:	51 1c       	adc	r5, r1
 8c8:	f8 01       	movw	r30, r16
 8ca:	a0 80       	ld	r10, Z
 8cc:	b1 80       	ldd	r11, Z+1	; 0x01
 8ce:	36 fe       	sbrs	r3, 6
 8d0:	03 c0       	rjmp	.+6      	; 0x8d8 <vfprintf+0x174>
 8d2:	69 2d       	mov	r22, r9
 8d4:	70 e0       	ldi	r23, 0x00	; 0
 8d6:	02 c0       	rjmp	.+4      	; 0x8dc <vfprintf+0x178>
 8d8:	6f ef       	ldi	r22, 0xFF	; 255
 8da:	7f ef       	ldi	r23, 0xFF	; 255
 8dc:	c5 01       	movw	r24, r10
 8de:	0e 94 93 05 	call	0xb26	; 0xb26 <strnlen_P>
 8e2:	4c 01       	movw	r8, r24
 8e4:	f3 2d       	mov	r31, r3
 8e6:	f0 68       	ori	r31, 0x80	; 128
 8e8:	3f 2e       	mov	r3, r31
 8ea:	82 01       	movw	r16, r4
 8ec:	33 fc       	sbrc	r3, 3
 8ee:	1b c0       	rjmp	.+54     	; 0x926 <__stack+0x27>
 8f0:	82 2d       	mov	r24, r2
 8f2:	90 e0       	ldi	r25, 0x00	; 0
 8f4:	88 16       	cp	r8, r24
 8f6:	99 06       	cpc	r9, r25
 8f8:	b0 f4       	brcc	.+44     	; 0x926 <__stack+0x27>
 8fa:	b6 01       	movw	r22, r12
 8fc:	80 e2       	ldi	r24, 0x20	; 32
 8fe:	90 e0       	ldi	r25, 0x00	; 0
 900:	0e 94 a9 05 	call	0xb52	; 0xb52 <fputc>
 904:	2a 94       	dec	r2
 906:	f4 cf       	rjmp	.-24     	; 0x8f0 <vfprintf+0x18c>
 908:	f5 01       	movw	r30, r10
 90a:	37 fc       	sbrc	r3, 7
 90c:	85 91       	lpm	r24, Z+
 90e:	37 fe       	sbrs	r3, 7
 910:	81 91       	ld	r24, Z+
 912:	5f 01       	movw	r10, r30
 914:	b6 01       	movw	r22, r12
 916:	90 e0       	ldi	r25, 0x00	; 0
 918:	0e 94 a9 05 	call	0xb52	; 0xb52 <fputc>
 91c:	21 10       	cpse	r2, r1
 91e:	2a 94       	dec	r2
 920:	21 e0       	ldi	r18, 0x01	; 1
 922:	82 1a       	sub	r8, r18
 924:	91 08       	sbc	r9, r1
 926:	81 14       	cp	r8, r1
 928:	91 04       	cpc	r9, r1
 92a:	71 f7       	brne	.-36     	; 0x908 <__stack+0x9>
 92c:	e8 c0       	rjmp	.+464    	; 0xafe <__stack+0x1ff>
 92e:	84 36       	cpi	r24, 0x64	; 100
 930:	11 f0       	breq	.+4      	; 0x936 <__stack+0x37>
 932:	89 36       	cpi	r24, 0x69	; 105
 934:	41 f5       	brne	.+80     	; 0x986 <__stack+0x87>
 936:	f8 01       	movw	r30, r16
 938:	37 fe       	sbrs	r3, 7
 93a:	07 c0       	rjmp	.+14     	; 0x94a <__stack+0x4b>
 93c:	60 81       	ld	r22, Z
 93e:	71 81       	ldd	r23, Z+1	; 0x01
 940:	82 81       	ldd	r24, Z+2	; 0x02
 942:	93 81       	ldd	r25, Z+3	; 0x03
 944:	0c 5f       	subi	r16, 0xFC	; 252
 946:	1f 4f       	sbci	r17, 0xFF	; 255
 948:	08 c0       	rjmp	.+16     	; 0x95a <__stack+0x5b>
 94a:	60 81       	ld	r22, Z
 94c:	71 81       	ldd	r23, Z+1	; 0x01
 94e:	07 2e       	mov	r0, r23
 950:	00 0c       	add	r0, r0
 952:	88 0b       	sbc	r24, r24
 954:	99 0b       	sbc	r25, r25
 956:	0e 5f       	subi	r16, 0xFE	; 254
 958:	1f 4f       	sbci	r17, 0xFF	; 255
 95a:	f3 2d       	mov	r31, r3
 95c:	ff 76       	andi	r31, 0x6F	; 111
 95e:	3f 2e       	mov	r3, r31
 960:	97 ff       	sbrs	r25, 7
 962:	09 c0       	rjmp	.+18     	; 0x976 <__stack+0x77>
 964:	90 95       	com	r25
 966:	80 95       	com	r24
 968:	70 95       	com	r23
 96a:	61 95       	neg	r22
 96c:	7f 4f       	sbci	r23, 0xFF	; 255
 96e:	8f 4f       	sbci	r24, 0xFF	; 255
 970:	9f 4f       	sbci	r25, 0xFF	; 255
 972:	f0 68       	ori	r31, 0x80	; 128
 974:	3f 2e       	mov	r3, r31
 976:	2a e0       	ldi	r18, 0x0A	; 10
 978:	30 e0       	ldi	r19, 0x00	; 0
 97a:	a3 01       	movw	r20, r6
 97c:	0e 94 e5 05 	call	0xbca	; 0xbca <__ultoa_invert>
 980:	88 2e       	mov	r8, r24
 982:	86 18       	sub	r8, r6
 984:	45 c0       	rjmp	.+138    	; 0xa10 <__stack+0x111>
 986:	85 37       	cpi	r24, 0x75	; 117
 988:	31 f4       	brne	.+12     	; 0x996 <__stack+0x97>
 98a:	23 2d       	mov	r18, r3
 98c:	2f 7e       	andi	r18, 0xEF	; 239
 98e:	b2 2e       	mov	r11, r18
 990:	2a e0       	ldi	r18, 0x0A	; 10
 992:	30 e0       	ldi	r19, 0x00	; 0
 994:	25 c0       	rjmp	.+74     	; 0x9e0 <__stack+0xe1>
 996:	93 2d       	mov	r25, r3
 998:	99 7f       	andi	r25, 0xF9	; 249
 99a:	b9 2e       	mov	r11, r25
 99c:	8f 36       	cpi	r24, 0x6F	; 111
 99e:	c1 f0       	breq	.+48     	; 0x9d0 <__stack+0xd1>
 9a0:	18 f4       	brcc	.+6      	; 0x9a8 <__stack+0xa9>
 9a2:	88 35       	cpi	r24, 0x58	; 88
 9a4:	79 f0       	breq	.+30     	; 0x9c4 <__stack+0xc5>
 9a6:	b5 c0       	rjmp	.+362    	; 0xb12 <__stack+0x213>
 9a8:	80 37       	cpi	r24, 0x70	; 112
 9aa:	19 f0       	breq	.+6      	; 0x9b2 <__stack+0xb3>
 9ac:	88 37       	cpi	r24, 0x78	; 120
 9ae:	21 f0       	breq	.+8      	; 0x9b8 <__stack+0xb9>
 9b0:	b0 c0       	rjmp	.+352    	; 0xb12 <__stack+0x213>
 9b2:	e9 2f       	mov	r30, r25
 9b4:	e0 61       	ori	r30, 0x10	; 16
 9b6:	be 2e       	mov	r11, r30
 9b8:	b4 fe       	sbrs	r11, 4
 9ba:	0d c0       	rjmp	.+26     	; 0x9d6 <__stack+0xd7>
 9bc:	fb 2d       	mov	r31, r11
 9be:	f4 60       	ori	r31, 0x04	; 4
 9c0:	bf 2e       	mov	r11, r31
 9c2:	09 c0       	rjmp	.+18     	; 0x9d6 <__stack+0xd7>
 9c4:	34 fe       	sbrs	r3, 4
 9c6:	0a c0       	rjmp	.+20     	; 0x9dc <__stack+0xdd>
 9c8:	29 2f       	mov	r18, r25
 9ca:	26 60       	ori	r18, 0x06	; 6
 9cc:	b2 2e       	mov	r11, r18
 9ce:	06 c0       	rjmp	.+12     	; 0x9dc <__stack+0xdd>
 9d0:	28 e0       	ldi	r18, 0x08	; 8
 9d2:	30 e0       	ldi	r19, 0x00	; 0
 9d4:	05 c0       	rjmp	.+10     	; 0x9e0 <__stack+0xe1>
 9d6:	20 e1       	ldi	r18, 0x10	; 16
 9d8:	30 e0       	ldi	r19, 0x00	; 0
 9da:	02 c0       	rjmp	.+4      	; 0x9e0 <__stack+0xe1>
 9dc:	20 e1       	ldi	r18, 0x10	; 16
 9de:	32 e0       	ldi	r19, 0x02	; 2
 9e0:	f8 01       	movw	r30, r16
 9e2:	b7 fe       	sbrs	r11, 7
 9e4:	07 c0       	rjmp	.+14     	; 0x9f4 <__stack+0xf5>
 9e6:	60 81       	ld	r22, Z
 9e8:	71 81       	ldd	r23, Z+1	; 0x01
 9ea:	82 81       	ldd	r24, Z+2	; 0x02
 9ec:	93 81       	ldd	r25, Z+3	; 0x03
 9ee:	0c 5f       	subi	r16, 0xFC	; 252
 9f0:	1f 4f       	sbci	r17, 0xFF	; 255
 9f2:	06 c0       	rjmp	.+12     	; 0xa00 <__stack+0x101>
 9f4:	60 81       	ld	r22, Z
 9f6:	71 81       	ldd	r23, Z+1	; 0x01
 9f8:	80 e0       	ldi	r24, 0x00	; 0
 9fa:	90 e0       	ldi	r25, 0x00	; 0
 9fc:	0e 5f       	subi	r16, 0xFE	; 254
 9fe:	1f 4f       	sbci	r17, 0xFF	; 255
 a00:	a3 01       	movw	r20, r6
 a02:	0e 94 e5 05 	call	0xbca	; 0xbca <__ultoa_invert>
 a06:	88 2e       	mov	r8, r24
 a08:	86 18       	sub	r8, r6
 a0a:	fb 2d       	mov	r31, r11
 a0c:	ff 77       	andi	r31, 0x7F	; 127
 a0e:	3f 2e       	mov	r3, r31
 a10:	36 fe       	sbrs	r3, 6
 a12:	0d c0       	rjmp	.+26     	; 0xa2e <__stack+0x12f>
 a14:	23 2d       	mov	r18, r3
 a16:	2e 7f       	andi	r18, 0xFE	; 254
 a18:	a2 2e       	mov	r10, r18
 a1a:	89 14       	cp	r8, r9
 a1c:	58 f4       	brcc	.+22     	; 0xa34 <__stack+0x135>
 a1e:	34 fe       	sbrs	r3, 4
 a20:	0b c0       	rjmp	.+22     	; 0xa38 <__stack+0x139>
 a22:	32 fc       	sbrc	r3, 2
 a24:	09 c0       	rjmp	.+18     	; 0xa38 <__stack+0x139>
 a26:	83 2d       	mov	r24, r3
 a28:	8e 7e       	andi	r24, 0xEE	; 238
 a2a:	a8 2e       	mov	r10, r24
 a2c:	05 c0       	rjmp	.+10     	; 0xa38 <__stack+0x139>
 a2e:	b8 2c       	mov	r11, r8
 a30:	a3 2c       	mov	r10, r3
 a32:	03 c0       	rjmp	.+6      	; 0xa3a <__stack+0x13b>
 a34:	b8 2c       	mov	r11, r8
 a36:	01 c0       	rjmp	.+2      	; 0xa3a <__stack+0x13b>
 a38:	b9 2c       	mov	r11, r9
 a3a:	a4 fe       	sbrs	r10, 4
 a3c:	0f c0       	rjmp	.+30     	; 0xa5c <__stack+0x15d>
 a3e:	fe 01       	movw	r30, r28
 a40:	e8 0d       	add	r30, r8
 a42:	f1 1d       	adc	r31, r1
 a44:	80 81       	ld	r24, Z
 a46:	80 33       	cpi	r24, 0x30	; 48
 a48:	21 f4       	brne	.+8      	; 0xa52 <__stack+0x153>
 a4a:	9a 2d       	mov	r25, r10
 a4c:	99 7e       	andi	r25, 0xE9	; 233
 a4e:	a9 2e       	mov	r10, r25
 a50:	09 c0       	rjmp	.+18     	; 0xa64 <__stack+0x165>
 a52:	a2 fe       	sbrs	r10, 2
 a54:	06 c0       	rjmp	.+12     	; 0xa62 <__stack+0x163>
 a56:	b3 94       	inc	r11
 a58:	b3 94       	inc	r11
 a5a:	04 c0       	rjmp	.+8      	; 0xa64 <__stack+0x165>
 a5c:	8a 2d       	mov	r24, r10
 a5e:	86 78       	andi	r24, 0x86	; 134
 a60:	09 f0       	breq	.+2      	; 0xa64 <__stack+0x165>
 a62:	b3 94       	inc	r11
 a64:	a3 fc       	sbrc	r10, 3
 a66:	11 c0       	rjmp	.+34     	; 0xa8a <__stack+0x18b>
 a68:	a0 fe       	sbrs	r10, 0
 a6a:	06 c0       	rjmp	.+12     	; 0xa78 <__stack+0x179>
 a6c:	b2 14       	cp	r11, r2
 a6e:	88 f4       	brcc	.+34     	; 0xa92 <__stack+0x193>
 a70:	28 0c       	add	r2, r8
 a72:	92 2c       	mov	r9, r2
 a74:	9b 18       	sub	r9, r11
 a76:	0e c0       	rjmp	.+28     	; 0xa94 <__stack+0x195>
 a78:	b2 14       	cp	r11, r2
 a7a:	60 f4       	brcc	.+24     	; 0xa94 <__stack+0x195>
 a7c:	b6 01       	movw	r22, r12
 a7e:	80 e2       	ldi	r24, 0x20	; 32
 a80:	90 e0       	ldi	r25, 0x00	; 0
 a82:	0e 94 a9 05 	call	0xb52	; 0xb52 <fputc>
 a86:	b3 94       	inc	r11
 a88:	f7 cf       	rjmp	.-18     	; 0xa78 <__stack+0x179>
 a8a:	b2 14       	cp	r11, r2
 a8c:	18 f4       	brcc	.+6      	; 0xa94 <__stack+0x195>
 a8e:	2b 18       	sub	r2, r11
 a90:	02 c0       	rjmp	.+4      	; 0xa96 <__stack+0x197>
 a92:	98 2c       	mov	r9, r8
 a94:	21 2c       	mov	r2, r1
 a96:	a4 fe       	sbrs	r10, 4
 a98:	10 c0       	rjmp	.+32     	; 0xaba <__stack+0x1bb>
 a9a:	b6 01       	movw	r22, r12
 a9c:	80 e3       	ldi	r24, 0x30	; 48
 a9e:	90 e0       	ldi	r25, 0x00	; 0
 aa0:	0e 94 a9 05 	call	0xb52	; 0xb52 <fputc>
 aa4:	a2 fe       	sbrs	r10, 2
 aa6:	17 c0       	rjmp	.+46     	; 0xad6 <__stack+0x1d7>
 aa8:	a1 fc       	sbrc	r10, 1
 aaa:	03 c0       	rjmp	.+6      	; 0xab2 <__stack+0x1b3>
 aac:	88 e7       	ldi	r24, 0x78	; 120
 aae:	90 e0       	ldi	r25, 0x00	; 0
 ab0:	02 c0       	rjmp	.+4      	; 0xab6 <__stack+0x1b7>
 ab2:	88 e5       	ldi	r24, 0x58	; 88
 ab4:	90 e0       	ldi	r25, 0x00	; 0
 ab6:	b6 01       	movw	r22, r12
 ab8:	0c c0       	rjmp	.+24     	; 0xad2 <__stack+0x1d3>
 aba:	8a 2d       	mov	r24, r10
 abc:	86 78       	andi	r24, 0x86	; 134
 abe:	59 f0       	breq	.+22     	; 0xad6 <__stack+0x1d7>
 ac0:	a1 fe       	sbrs	r10, 1
 ac2:	02 c0       	rjmp	.+4      	; 0xac8 <__stack+0x1c9>
 ac4:	8b e2       	ldi	r24, 0x2B	; 43
 ac6:	01 c0       	rjmp	.+2      	; 0xaca <__stack+0x1cb>
 ac8:	80 e2       	ldi	r24, 0x20	; 32
 aca:	a7 fc       	sbrc	r10, 7
 acc:	8d e2       	ldi	r24, 0x2D	; 45
 ace:	b6 01       	movw	r22, r12
 ad0:	90 e0       	ldi	r25, 0x00	; 0
 ad2:	0e 94 a9 05 	call	0xb52	; 0xb52 <fputc>
 ad6:	89 14       	cp	r8, r9
 ad8:	38 f4       	brcc	.+14     	; 0xae8 <__stack+0x1e9>
 ada:	b6 01       	movw	r22, r12
 adc:	80 e3       	ldi	r24, 0x30	; 48
 ade:	90 e0       	ldi	r25, 0x00	; 0
 ae0:	0e 94 a9 05 	call	0xb52	; 0xb52 <fputc>
 ae4:	9a 94       	dec	r9
 ae6:	f7 cf       	rjmp	.-18     	; 0xad6 <__stack+0x1d7>
 ae8:	8a 94       	dec	r8
 aea:	f3 01       	movw	r30, r6
 aec:	e8 0d       	add	r30, r8
 aee:	f1 1d       	adc	r31, r1
 af0:	80 81       	ld	r24, Z
 af2:	b6 01       	movw	r22, r12
 af4:	90 e0       	ldi	r25, 0x00	; 0
 af6:	0e 94 a9 05 	call	0xb52	; 0xb52 <fputc>
 afa:	81 10       	cpse	r8, r1
 afc:	f5 cf       	rjmp	.-22     	; 0xae8 <__stack+0x1e9>
 afe:	22 20       	and	r2, r2
 b00:	09 f4       	brne	.+2      	; 0xb04 <__stack+0x205>
 b02:	42 ce       	rjmp	.-892    	; 0x788 <vfprintf+0x24>
 b04:	b6 01       	movw	r22, r12
 b06:	80 e2       	ldi	r24, 0x20	; 32
 b08:	90 e0       	ldi	r25, 0x00	; 0
 b0a:	0e 94 a9 05 	call	0xb52	; 0xb52 <fputc>
 b0e:	2a 94       	dec	r2
 b10:	f6 cf       	rjmp	.-20     	; 0xafe <__stack+0x1ff>
 b12:	f6 01       	movw	r30, r12
 b14:	86 81       	ldd	r24, Z+6	; 0x06
 b16:	97 81       	ldd	r25, Z+7	; 0x07
 b18:	02 c0       	rjmp	.+4      	; 0xb1e <__stack+0x21f>
 b1a:	8f ef       	ldi	r24, 0xFF	; 255
 b1c:	9f ef       	ldi	r25, 0xFF	; 255
 b1e:	2b 96       	adiw	r28, 0x0b	; 11
 b20:	e2 e1       	ldi	r30, 0x12	; 18
 b22:	0c 94 5f 06 	jmp	0xcbe	; 0xcbe <__epilogue_restores__>

00000b26 <strnlen_P>:
 b26:	fc 01       	movw	r30, r24
 b28:	05 90       	lpm	r0, Z+
 b2a:	61 50       	subi	r22, 0x01	; 1
 b2c:	70 40       	sbci	r23, 0x00	; 0
 b2e:	01 10       	cpse	r0, r1
 b30:	d8 f7       	brcc	.-10     	; 0xb28 <strnlen_P+0x2>
 b32:	80 95       	com	r24
 b34:	90 95       	com	r25
 b36:	8e 0f       	add	r24, r30
 b38:	9f 1f       	adc	r25, r31
 b3a:	08 95       	ret

00000b3c <strnlen>:
 b3c:	fc 01       	movw	r30, r24
 b3e:	61 50       	subi	r22, 0x01	; 1
 b40:	70 40       	sbci	r23, 0x00	; 0
 b42:	01 90       	ld	r0, Z+
 b44:	01 10       	cpse	r0, r1
 b46:	d8 f7       	brcc	.-10     	; 0xb3e <strnlen+0x2>
 b48:	80 95       	com	r24
 b4a:	90 95       	com	r25
 b4c:	8e 0f       	add	r24, r30
 b4e:	9f 1f       	adc	r25, r31
 b50:	08 95       	ret

00000b52 <fputc>:
 b52:	0f 93       	push	r16
 b54:	1f 93       	push	r17
 b56:	cf 93       	push	r28
 b58:	df 93       	push	r29
 b5a:	fb 01       	movw	r30, r22
 b5c:	23 81       	ldd	r18, Z+3	; 0x03
 b5e:	21 fd       	sbrc	r18, 1
 b60:	03 c0       	rjmp	.+6      	; 0xb68 <fputc+0x16>
 b62:	8f ef       	ldi	r24, 0xFF	; 255
 b64:	9f ef       	ldi	r25, 0xFF	; 255
 b66:	2c c0       	rjmp	.+88     	; 0xbc0 <fputc+0x6e>
 b68:	22 ff       	sbrs	r18, 2
 b6a:	16 c0       	rjmp	.+44     	; 0xb98 <fputc+0x46>
 b6c:	46 81       	ldd	r20, Z+6	; 0x06
 b6e:	57 81       	ldd	r21, Z+7	; 0x07
 b70:	24 81       	ldd	r18, Z+4	; 0x04
 b72:	35 81       	ldd	r19, Z+5	; 0x05
 b74:	42 17       	cp	r20, r18
 b76:	53 07       	cpc	r21, r19
 b78:	44 f4       	brge	.+16     	; 0xb8a <fputc+0x38>
 b7a:	a0 81       	ld	r26, Z
 b7c:	b1 81       	ldd	r27, Z+1	; 0x01
 b7e:	9d 01       	movw	r18, r26
 b80:	2f 5f       	subi	r18, 0xFF	; 255
 b82:	3f 4f       	sbci	r19, 0xFF	; 255
 b84:	31 83       	std	Z+1, r19	; 0x01
 b86:	20 83       	st	Z, r18
 b88:	8c 93       	st	X, r24
 b8a:	26 81       	ldd	r18, Z+6	; 0x06
 b8c:	37 81       	ldd	r19, Z+7	; 0x07
 b8e:	2f 5f       	subi	r18, 0xFF	; 255
 b90:	3f 4f       	sbci	r19, 0xFF	; 255
 b92:	37 83       	std	Z+7, r19	; 0x07
 b94:	26 83       	std	Z+6, r18	; 0x06
 b96:	14 c0       	rjmp	.+40     	; 0xbc0 <fputc+0x6e>
 b98:	8b 01       	movw	r16, r22
 b9a:	ec 01       	movw	r28, r24
 b9c:	fb 01       	movw	r30, r22
 b9e:	00 84       	ldd	r0, Z+8	; 0x08
 ba0:	f1 85       	ldd	r31, Z+9	; 0x09
 ba2:	e0 2d       	mov	r30, r0
 ba4:	09 95       	icall
 ba6:	89 2b       	or	r24, r25
 ba8:	e1 f6       	brne	.-72     	; 0xb62 <fputc+0x10>
 baa:	d8 01       	movw	r26, r16
 bac:	16 96       	adiw	r26, 0x06	; 6
 bae:	8d 91       	ld	r24, X+
 bb0:	9c 91       	ld	r25, X
 bb2:	17 97       	sbiw	r26, 0x07	; 7
 bb4:	01 96       	adiw	r24, 0x01	; 1
 bb6:	17 96       	adiw	r26, 0x07	; 7
 bb8:	9c 93       	st	X, r25
 bba:	8e 93       	st	-X, r24
 bbc:	16 97       	sbiw	r26, 0x06	; 6
 bbe:	ce 01       	movw	r24, r28
 bc0:	df 91       	pop	r29
 bc2:	cf 91       	pop	r28
 bc4:	1f 91       	pop	r17
 bc6:	0f 91       	pop	r16
 bc8:	08 95       	ret

00000bca <__ultoa_invert>:
 bca:	fa 01       	movw	r30, r20
 bcc:	aa 27       	eor	r26, r26
 bce:	28 30       	cpi	r18, 0x08	; 8
 bd0:	51 f1       	breq	.+84     	; 0xc26 <__ultoa_invert+0x5c>
 bd2:	20 31       	cpi	r18, 0x10	; 16
 bd4:	81 f1       	breq	.+96     	; 0xc36 <__ultoa_invert+0x6c>
 bd6:	e8 94       	clt
 bd8:	6f 93       	push	r22
 bda:	6e 7f       	andi	r22, 0xFE	; 254
 bdc:	6e 5f       	subi	r22, 0xFE	; 254
 bde:	7f 4f       	sbci	r23, 0xFF	; 255
 be0:	8f 4f       	sbci	r24, 0xFF	; 255
 be2:	9f 4f       	sbci	r25, 0xFF	; 255
 be4:	af 4f       	sbci	r26, 0xFF	; 255
 be6:	b1 e0       	ldi	r27, 0x01	; 1
 be8:	3e d0       	rcall	.+124    	; 0xc66 <__ultoa_invert+0x9c>
 bea:	b4 e0       	ldi	r27, 0x04	; 4
 bec:	3c d0       	rcall	.+120    	; 0xc66 <__ultoa_invert+0x9c>
 bee:	67 0f       	add	r22, r23
 bf0:	78 1f       	adc	r23, r24
 bf2:	89 1f       	adc	r24, r25
 bf4:	9a 1f       	adc	r25, r26
 bf6:	a1 1d       	adc	r26, r1
 bf8:	68 0f       	add	r22, r24
 bfa:	79 1f       	adc	r23, r25
 bfc:	8a 1f       	adc	r24, r26
 bfe:	91 1d       	adc	r25, r1
 c00:	a1 1d       	adc	r26, r1
 c02:	6a 0f       	add	r22, r26
 c04:	71 1d       	adc	r23, r1
 c06:	81 1d       	adc	r24, r1
 c08:	91 1d       	adc	r25, r1
 c0a:	a1 1d       	adc	r26, r1
 c0c:	20 d0       	rcall	.+64     	; 0xc4e <__ultoa_invert+0x84>
 c0e:	09 f4       	brne	.+2      	; 0xc12 <__ultoa_invert+0x48>
 c10:	68 94       	set
 c12:	3f 91       	pop	r19
 c14:	2a e0       	ldi	r18, 0x0A	; 10
 c16:	26 9f       	mul	r18, r22
 c18:	11 24       	eor	r1, r1
 c1a:	30 19       	sub	r19, r0
 c1c:	30 5d       	subi	r19, 0xD0	; 208
 c1e:	31 93       	st	Z+, r19
 c20:	de f6       	brtc	.-74     	; 0xbd8 <__ultoa_invert+0xe>
 c22:	cf 01       	movw	r24, r30
 c24:	08 95       	ret
 c26:	46 2f       	mov	r20, r22
 c28:	47 70       	andi	r20, 0x07	; 7
 c2a:	40 5d       	subi	r20, 0xD0	; 208
 c2c:	41 93       	st	Z+, r20
 c2e:	b3 e0       	ldi	r27, 0x03	; 3
 c30:	0f d0       	rcall	.+30     	; 0xc50 <__ultoa_invert+0x86>
 c32:	c9 f7       	brne	.-14     	; 0xc26 <__ultoa_invert+0x5c>
 c34:	f6 cf       	rjmp	.-20     	; 0xc22 <__ultoa_invert+0x58>
 c36:	46 2f       	mov	r20, r22
 c38:	4f 70       	andi	r20, 0x0F	; 15
 c3a:	40 5d       	subi	r20, 0xD0	; 208
 c3c:	4a 33       	cpi	r20, 0x3A	; 58
 c3e:	18 f0       	brcs	.+6      	; 0xc46 <__ultoa_invert+0x7c>
 c40:	49 5d       	subi	r20, 0xD9	; 217
 c42:	31 fd       	sbrc	r19, 1
 c44:	40 52       	subi	r20, 0x20	; 32
 c46:	41 93       	st	Z+, r20
 c48:	02 d0       	rcall	.+4      	; 0xc4e <__ultoa_invert+0x84>
 c4a:	a9 f7       	brne	.-22     	; 0xc36 <__ultoa_invert+0x6c>
 c4c:	ea cf       	rjmp	.-44     	; 0xc22 <__ultoa_invert+0x58>
 c4e:	b4 e0       	ldi	r27, 0x04	; 4
 c50:	a6 95       	lsr	r26
 c52:	97 95       	ror	r25
 c54:	87 95       	ror	r24
 c56:	77 95       	ror	r23
 c58:	67 95       	ror	r22
 c5a:	ba 95       	dec	r27
 c5c:	c9 f7       	brne	.-14     	; 0xc50 <__ultoa_invert+0x86>
 c5e:	00 97       	sbiw	r24, 0x00	; 0
 c60:	61 05       	cpc	r22, r1
 c62:	71 05       	cpc	r23, r1
 c64:	08 95       	ret
 c66:	9b 01       	movw	r18, r22
 c68:	ac 01       	movw	r20, r24
 c6a:	0a 2e       	mov	r0, r26
 c6c:	06 94       	lsr	r0
 c6e:	57 95       	ror	r21
 c70:	47 95       	ror	r20
 c72:	37 95       	ror	r19
 c74:	27 95       	ror	r18
 c76:	ba 95       	dec	r27
 c78:	c9 f7       	brne	.-14     	; 0xc6c <__ultoa_invert+0xa2>
 c7a:	62 0f       	add	r22, r18
 c7c:	73 1f       	adc	r23, r19
 c7e:	84 1f       	adc	r24, r20
 c80:	95 1f       	adc	r25, r21
 c82:	a0 1d       	adc	r26, r0
 c84:	08 95       	ret

00000c86 <__prologue_saves__>:
 c86:	2f 92       	push	r2
 c88:	3f 92       	push	r3
 c8a:	4f 92       	push	r4
 c8c:	5f 92       	push	r5
 c8e:	6f 92       	push	r6
 c90:	7f 92       	push	r7
 c92:	8f 92       	push	r8
 c94:	9f 92       	push	r9
 c96:	af 92       	push	r10
 c98:	bf 92       	push	r11
 c9a:	cf 92       	push	r12
 c9c:	df 92       	push	r13
 c9e:	ef 92       	push	r14
 ca0:	ff 92       	push	r15
 ca2:	0f 93       	push	r16
 ca4:	1f 93       	push	r17
 ca6:	cf 93       	push	r28
 ca8:	df 93       	push	r29
 caa:	cd b7       	in	r28, 0x3d	; 61
 cac:	de b7       	in	r29, 0x3e	; 62
 cae:	ca 1b       	sub	r28, r26
 cb0:	db 0b       	sbc	r29, r27
 cb2:	0f b6       	in	r0, 0x3f	; 63
 cb4:	f8 94       	cli
 cb6:	de bf       	out	0x3e, r29	; 62
 cb8:	0f be       	out	0x3f, r0	; 63
 cba:	cd bf       	out	0x3d, r28	; 61
 cbc:	09 94       	ijmp

00000cbe <__epilogue_restores__>:
 cbe:	2a 88       	ldd	r2, Y+18	; 0x12
 cc0:	39 88       	ldd	r3, Y+17	; 0x11
 cc2:	48 88       	ldd	r4, Y+16	; 0x10
 cc4:	5f 84       	ldd	r5, Y+15	; 0x0f
 cc6:	6e 84       	ldd	r6, Y+14	; 0x0e
 cc8:	7d 84       	ldd	r7, Y+13	; 0x0d
 cca:	8c 84       	ldd	r8, Y+12	; 0x0c
 ccc:	9b 84       	ldd	r9, Y+11	; 0x0b
 cce:	aa 84       	ldd	r10, Y+10	; 0x0a
 cd0:	b9 84       	ldd	r11, Y+9	; 0x09
 cd2:	c8 84       	ldd	r12, Y+8	; 0x08
 cd4:	df 80       	ldd	r13, Y+7	; 0x07
 cd6:	ee 80       	ldd	r14, Y+6	; 0x06
 cd8:	fd 80       	ldd	r15, Y+5	; 0x05
 cda:	0c 81       	ldd	r16, Y+4	; 0x04
 cdc:	1b 81       	ldd	r17, Y+3	; 0x03
 cde:	aa 81       	ldd	r26, Y+2	; 0x02
 ce0:	b9 81       	ldd	r27, Y+1	; 0x01
 ce2:	ce 0f       	add	r28, r30
 ce4:	d1 1d       	adc	r29, r1
 ce6:	0f b6       	in	r0, 0x3f	; 63
 ce8:	f8 94       	cli
 cea:	de bf       	out	0x3e, r29	; 62
 cec:	0f be       	out	0x3f, r0	; 63
 cee:	cd bf       	out	0x3d, r28	; 61
 cf0:	ed 01       	movw	r28, r26
 cf2:	08 95       	ret

00000cf4 <_exit>:
 cf4:	f8 94       	cli

00000cf6 <__stop_program>:
 cf6:	ff cf       	rjmp	.-2      	; 0xcf6 <__stop_program>
