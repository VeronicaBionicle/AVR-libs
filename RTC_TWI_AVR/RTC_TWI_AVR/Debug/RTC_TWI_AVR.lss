
RTC_TWI_AVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007a  00800100  00000da2  00000e36  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000da2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001f  0080017a  0080017a  00000eb0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000eb0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f0c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  00000f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001815  00000000  00000000  0000106c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ab0  00000000  00000000  00002881  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a00  00000000  00000000  00003331  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002c8  00000000  00000000  00003d34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005c6  00000000  00000000  00003ffc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bcd  00000000  00000000  000045c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  0000518f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 70 02 	jmp	0x4e0	; 0x4e0 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ea       	ldi	r30, 0xA2	; 162
  7c:	fd e0       	ldi	r31, 0x0D	; 13
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 37       	cpi	r26, 0x7A	; 122
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e7       	ldi	r26, 0x7A	; 122
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 39       	cpi	r26, 0x99	; 153
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 bd 02 	call	0x57a	; 0x57a <main>
  9e:	0c 94 cf 06 	jmp	0xd9e	; 0xd9e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <to_BCD>:
#include "ds1307.h"

uint8_t to_BCD(uint8_t n)
{
	return ((n/10) << 4) + n%10;
  a6:	9d ec       	ldi	r25, 0xCD	; 205
  a8:	89 9f       	mul	r24, r25
  aa:	91 2d       	mov	r25, r1
  ac:	11 24       	eor	r1, r1
  ae:	96 95       	lsr	r25
  b0:	96 95       	lsr	r25
  b2:	96 95       	lsr	r25
  b4:	39 2f       	mov	r19, r25
  b6:	33 0f       	add	r19, r19
  b8:	23 2f       	mov	r18, r19
  ba:	22 0f       	add	r18, r18
  bc:	22 0f       	add	r18, r18
  be:	23 0f       	add	r18, r19
  c0:	82 1b       	sub	r24, r18
}
  c2:	20 e1       	ldi	r18, 0x10	; 16
  c4:	92 9f       	mul	r25, r18
  c6:	80 0d       	add	r24, r0
  c8:	11 24       	eor	r1, r1
  ca:	08 95       	ret

000000cc <from_BCD>:

uint8_t from_BCD(uint8_t n)
{
	return 10 * (n >> 4) + (n & 0b1111);
  cc:	98 2f       	mov	r25, r24
  ce:	92 95       	swap	r25
  d0:	9f 70       	andi	r25, 0x0F	; 15
  d2:	99 0f       	add	r25, r25
  d4:	29 2f       	mov	r18, r25
  d6:	22 0f       	add	r18, r18
  d8:	22 0f       	add	r18, r18
  da:	92 0f       	add	r25, r18
  dc:	8f 70       	andi	r24, 0x0F	; 15
}
  de:	89 0f       	add	r24, r25
  e0:	08 95       	ret

000000e2 <RTC_init>:

/* Инициализация интерфейса I2C для часов */
void RTC_init(void)
{
	twi_init(F_CPU, F_I2C);
  e2:	20 ea       	ldi	r18, 0xA0	; 160
  e4:	36 e8       	ldi	r19, 0x86	; 134
  e6:	41 e0       	ldi	r20, 0x01	; 1
  e8:	50 e0       	ldi	r21, 0x00	; 0
  ea:	60 e0       	ldi	r22, 0x00	; 0
  ec:	74 e2       	ldi	r23, 0x24	; 36
  ee:	84 ef       	ldi	r24, 0xF4	; 244
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	0e 94 c9 01 	call	0x392	; 0x392 <twi_init>
  f6:	08 95       	ret

000000f8 <RTC_set_value>:
}

/* Запись значения в часы */
void RTC_set_value(uint8_t address, uint8_t data)
{
  f8:	cf 93       	push	r28
  fa:	df 93       	push	r29
  fc:	d8 2f       	mov	r29, r24
  fe:	c6 2f       	mov	r28, r22
	/* Сформировать состояние СТАРТ */
	twi(TWI_START);
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	0e 94 29 02 	call	0x452	; 0x452 <twi>
	
	/* Выдать SLA-W - ведомый в режиме приемника */
	twi_transmit((DS1307_ADR<<1)|0);
 106:	80 ed       	ldi	r24, 0xD0	; 208
 108:	0e 94 4c 02 	call	0x498	; 0x498 <twi_transmit>
	
	/* Передать адрес регистра часов */
	twi_transmit(address);
 10c:	8d 2f       	mov	r24, r29
 10e:	0e 94 4c 02 	call	0x498	; 0x498 <twi_transmit>
	
	/* При передаче указателя передается только адрес без стоп состояния */
	if (data != RTC_WRITE_POINTER)
 112:	cf 3f       	cpi	r28, 0xFF	; 255
 114:	31 f0       	breq	.+12     	; 0x122 <RTC_set_value+0x2a>
	{
		/* Передать данные */
		twi_transmit(data);
 116:	8c 2f       	mov	r24, r28
 118:	0e 94 4c 02 	call	0x498	; 0x498 <twi_transmit>
		
		/* Сформировать состояние СТОП */
		twi(TWI_STOP);
 11c:	82 e0       	ldi	r24, 0x02	; 2
 11e:	0e 94 29 02 	call	0x452	; 0x452 <twi>
	}
}
 122:	df 91       	pop	r29
 124:	cf 91       	pop	r28
 126:	08 95       	ret

00000128 <RTC_get_value>:

/* Получить значение с часов */
void RTC_get_value(uint8_t * data)
{
 128:	cf 93       	push	r28
 12a:	df 93       	push	r29
 12c:	ec 01       	movw	r28, r24
	/* Сформировать состояние СТАРТ */
	twi(TWI_START);
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	0e 94 29 02 	call	0x452	; 0x452 <twi>
	
	/* Выдать пакет SLA-R - ведомый в режиме передатчика */
	twi_transmit((DS1307_ADR<<1)|1);
 134:	81 ed       	ldi	r24, 0xD1	; 209
 136:	0e 94 4c 02 	call	0x498	; 0x498 <twi_transmit>
	
	/* считываем данные без подтверждения */
	twi_receive(data, 0);
 13a:	60 e0       	ldi	r22, 0x00	; 0
 13c:	ce 01       	movw	r24, r28
 13e:	0e 94 52 02 	call	0x4a4	; 0x4a4 <twi_receive>
	
	/* Сформировать состояние СТОП */
	twi(TWI_STOP);
 142:	82 e0       	ldi	r24, 0x02	; 2
 144:	0e 94 29 02 	call	0x452	; 0x452 <twi>
}
 148:	df 91       	pop	r29
 14a:	cf 91       	pop	r28
 14c:	08 95       	ret

0000014e <RTC_set_date>:

/* Установить дату */
void RTC_set_date(uint8_t day, uint8_t month, uint8_t year, uint8_t day_week)
{
 14e:	0f 93       	push	r16
 150:	1f 93       	push	r17
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	18 2f       	mov	r17, r24
 158:	d6 2f       	mov	r29, r22
 15a:	84 2f       	mov	r24, r20
 15c:	02 2f       	mov	r16, r18
	/* Перевести в BCD */
	year = to_BCD(year);
 15e:	0e 94 53 00 	call	0xa6	; 0xa6 <to_BCD>
 162:	c8 2f       	mov	r28, r24
	month = to_BCD(month);
 164:	8d 2f       	mov	r24, r29
 166:	0e 94 53 00 	call	0xa6	; 0xa6 <to_BCD>
 16a:	d8 2f       	mov	r29, r24
	day = to_BCD(day);
 16c:	81 2f       	mov	r24, r17
 16e:	0e 94 53 00 	call	0xa6	; 0xa6 <to_BCD>
 172:	18 2f       	mov	r17, r24

	/* Сформировать состояние СТАРТ */
	twi(TWI_START);
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	0e 94 29 02 	call	0x452	; 0x452 <twi>

	/* Выдать SLA-W - ведомый в режиме приемника */
	twi_transmit((DS1307_ADR<<1)|0);
 17a:	80 ed       	ldi	r24, 0xD0	; 208
 17c:	0e 94 4c 02 	call	0x498	; 0x498 <twi_transmit>
	
	/* Передать адрес регистра, с которого начинаем запись */
	twi_transmit(RTC_DAY_WEEK_ADR);
 180:	83 e0       	ldi	r24, 0x03	; 3
 182:	0e 94 4c 02 	call	0x498	; 0x498 <twi_transmit>
	twi_transmit(day_week);
 186:	80 2f       	mov	r24, r16
 188:	0e 94 4c 02 	call	0x498	; 0x498 <twi_transmit>
	twi_transmit(day);
 18c:	81 2f       	mov	r24, r17
 18e:	0e 94 4c 02 	call	0x498	; 0x498 <twi_transmit>
	twi_transmit(month);
 192:	8d 2f       	mov	r24, r29
 194:	0e 94 4c 02 	call	0x498	; 0x498 <twi_transmit>
	twi_transmit(year);
 198:	8c 2f       	mov	r24, r28
 19a:	0e 94 4c 02 	call	0x498	; 0x498 <twi_transmit>
	
	/* Сформировать состояние СТОП */
	twi(TWI_STOP);
 19e:	82 e0       	ldi	r24, 0x02	; 2
 1a0:	0e 94 29 02 	call	0x452	; 0x452 <twi>
}
 1a4:	df 91       	pop	r29
 1a6:	cf 91       	pop	r28
 1a8:	1f 91       	pop	r17
 1aa:	0f 91       	pop	r16
 1ac:	08 95       	ret

000001ae <RTC_set_time>:

/* Установить время */
void RTC_set_time(uint8_t hours, uint8_t minutes, uint8_t seconds)
{
 1ae:	1f 93       	push	r17
 1b0:	cf 93       	push	r28
 1b2:	df 93       	push	r29
 1b4:	c8 2f       	mov	r28, r24
 1b6:	d6 2f       	mov	r29, r22
 1b8:	84 2f       	mov	r24, r20
	/* Перевести в BCD */
	seconds = to_BCD(seconds);
 1ba:	0e 94 53 00 	call	0xa6	; 0xa6 <to_BCD>
 1be:	18 2f       	mov	r17, r24
	minutes = to_BCD(minutes);
 1c0:	8d 2f       	mov	r24, r29
 1c2:	0e 94 53 00 	call	0xa6	; 0xa6 <to_BCD>
 1c6:	d8 2f       	mov	r29, r24
	hours = to_BCD(hours);
 1c8:	8c 2f       	mov	r24, r28
 1ca:	0e 94 53 00 	call	0xa6	; 0xa6 <to_BCD>
 1ce:	c8 2f       	mov	r28, r24
	
	/* Сформировать состояние СТАРТ */
	twi(TWI_START);
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	0e 94 29 02 	call	0x452	; 0x452 <twi>

	/* Выдать SLA-W - ведомый в режиме приемника */
	twi_transmit((DS1307_ADR<<1)|0);
 1d6:	80 ed       	ldi	r24, 0xD0	; 208
 1d8:	0e 94 4c 02 	call	0x498	; 0x498 <twi_transmit>
	
	/* Передать адрес регистра, с которого начинаем запись */
	twi_transmit(RTC_SEC_ADR);
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	0e 94 4c 02 	call	0x498	; 0x498 <twi_transmit>
	twi_transmit(seconds);
 1e2:	81 2f       	mov	r24, r17
 1e4:	0e 94 4c 02 	call	0x498	; 0x498 <twi_transmit>
	twi_transmit(minutes);
 1e8:	8d 2f       	mov	r24, r29
 1ea:	0e 94 4c 02 	call	0x498	; 0x498 <twi_transmit>
	twi_transmit(hours);
 1ee:	8c 2f       	mov	r24, r28
 1f0:	0e 94 4c 02 	call	0x498	; 0x498 <twi_transmit>
	
	/* Сформировать состояние СТОП */
	twi(TWI_STOP);
 1f4:	82 e0       	ldi	r24, 0x02	; 2
 1f6:	0e 94 29 02 	call	0x452	; 0x452 <twi>
}
 1fa:	df 91       	pop	r29
 1fc:	cf 91       	pop	r28
 1fe:	1f 91       	pop	r17
 200:	08 95       	ret

00000202 <RTC_set_out>:

/* Настроить выход OUT */
void RTC_set_out(uint8_t out)
{
	uint8_t control_register = ((out&1)<<OUT)|(0<<SQWE);
	RTC_set_value(RTC_CNTR_ADR, control_register);
 202:	90 e8       	ldi	r25, 0x80	; 128
 204:	89 9f       	mul	r24, r25
 206:	b0 01       	movw	r22, r0
 208:	11 24       	eor	r1, r1
 20a:	87 e0       	ldi	r24, 0x07	; 7
 20c:	0e 94 7c 00 	call	0xf8	; 0xf8 <RTC_set_value>
 210:	08 95       	ret

00000212 <RTC_set_sqwe>:

/* Настроить выход SQWE */
void RTC_set_sqwe(uint8_t frequency)
{
	uint8_t control_register = (0<<OUT)|(1<<SQWE)|frequency;
	RTC_set_value(RTC_CNTR_ADR, control_register);
 212:	68 2f       	mov	r22, r24
 214:	60 61       	ori	r22, 0x10	; 16
 216:	87 e0       	ldi	r24, 0x07	; 7
 218:	0e 94 7c 00 	call	0xf8	; 0xf8 <RTC_set_value>
 21c:	08 95       	ret

0000021e <RTC_start_stop_watch>:
}

/* Запустить или остановить часы */
void RTC_start_stop_watch(uint8_t on)
{
 21e:	1f 93       	push	r17
 220:	cf 93       	push	r28
 222:	df 93       	push	r29
 224:	1f 92       	push	r1
 226:	cd b7       	in	r28, 0x3d	; 61
 228:	de b7       	in	r29, 0x3e	; 62
 22a:	18 2f       	mov	r17, r24
	/* Сохранить последнее значение секунд */
	uint8_t seconds_register;
	RTC_set_value(RTC_SEC_ADR, RTC_WRITE_POINTER);
 22c:	6f ef       	ldi	r22, 0xFF	; 255
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	0e 94 7c 00 	call	0xf8	; 0xf8 <RTC_set_value>
	RTC_get_value(&seconds_register);
 234:	ce 01       	movw	r24, r28
 236:	01 96       	adiw	r24, 0x01	; 1
 238:	0e 94 94 00 	call	0x128	; 0x128 <RTC_get_value>
	
	/* Перевернуть бит Clock Hold */
	if (on)
 23c:	11 23       	and	r17, r17
 23e:	21 f0       	breq	.+8      	; 0x248 <RTC_start_stop_watch+0x2a>
	{
		seconds_register = seconds_register & ~(1<<CH); // установить бит равным 0 - запустить часы
 240:	89 81       	ldd	r24, Y+1	; 0x01
 242:	8f 77       	andi	r24, 0x7F	; 127
 244:	89 83       	std	Y+1, r24	; 0x01
 246:	03 c0       	rjmp	.+6      	; 0x24e <RTC_start_stop_watch+0x30>
	} else {
		seconds_register = seconds_register | (1<<CH); // установить бит равным 1 - остановить часы
 248:	89 81       	ldd	r24, Y+1	; 0x01
 24a:	80 68       	ori	r24, 0x80	; 128
 24c:	89 83       	std	Y+1, r24	; 0x01
	}
	
	RTC_set_value(RTC_SEC_ADR, seconds_register);
 24e:	69 81       	ldd	r22, Y+1	; 0x01
 250:	80 e0       	ldi	r24, 0x00	; 0
 252:	0e 94 7c 00 	call	0xf8	; 0xf8 <RTC_set_value>
}
 256:	0f 90       	pop	r0
 258:	df 91       	pop	r29
 25a:	cf 91       	pop	r28
 25c:	1f 91       	pop	r17
 25e:	08 95       	ret

00000260 <RTC_get_date>:

/* Получить дату */
void RTC_get_date(uint8_t * year, uint8_t * month, uint8_t * day, uint8_t * day_week)
{
 260:	cf 92       	push	r12
 262:	df 92       	push	r13
 264:	ef 92       	push	r14
 266:	ff 92       	push	r15
 268:	0f 93       	push	r16
 26a:	1f 93       	push	r17
 26c:	cf 93       	push	r28
 26e:	df 93       	push	r29
 270:	ec 01       	movw	r28, r24
 272:	8b 01       	movw	r16, r22
 274:	7a 01       	movw	r14, r20
 276:	69 01       	movw	r12, r18
	RTC_set_value(RTC_DAY_WEEK_ADR, RTC_WRITE_POINTER);
 278:	6f ef       	ldi	r22, 0xFF	; 255
 27a:	83 e0       	ldi	r24, 0x03	; 3
 27c:	0e 94 7c 00 	call	0xf8	; 0xf8 <RTC_set_value>
	
	/*Сформировать состояние РЕСТАРТ*/
	twi(TWI_RESTART);
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	0e 94 29 02 	call	0x452	; 0x452 <twi>
	
	/*Выдать на шину пакет SLA-R*/
	twi_transmit((DS1307_ADR<<1)|1);
 286:	81 ed       	ldi	r24, 0xD1	; 209
 288:	0e 94 4c 02 	call	0x498	; 0x498 <twi_transmit>
	
	/*считываем данные с подтверждением, кроме последнего байта */
	twi_receive(day_week, 1);
 28c:	61 e0       	ldi	r22, 0x01	; 1
 28e:	c6 01       	movw	r24, r12
 290:	0e 94 52 02 	call	0x4a4	; 0x4a4 <twi_receive>
	twi_receive(day, 1);
 294:	61 e0       	ldi	r22, 0x01	; 1
 296:	c7 01       	movw	r24, r14
 298:	0e 94 52 02 	call	0x4a4	; 0x4a4 <twi_receive>
	twi_receive(month, 1);
 29c:	61 e0       	ldi	r22, 0x01	; 1
 29e:	c8 01       	movw	r24, r16
 2a0:	0e 94 52 02 	call	0x4a4	; 0x4a4 <twi_receive>
	twi_receive(year, 0);
 2a4:	60 e0       	ldi	r22, 0x00	; 0
 2a6:	ce 01       	movw	r24, r28
 2a8:	0e 94 52 02 	call	0x4a4	; 0x4a4 <twi_receive>
	
	/*Сформировать состояние СТОП*/
	twi(TWI_STOP);
 2ac:	82 e0       	ldi	r24, 0x02	; 2
 2ae:	0e 94 29 02 	call	0x452	; 0x452 <twi>
	
	/* Преобразовать из BCD в десятичное число */
	*day	  = from_BCD(*day);
 2b2:	f7 01       	movw	r30, r14
 2b4:	80 81       	ld	r24, Z
 2b6:	0e 94 66 00 	call	0xcc	; 0xcc <from_BCD>
 2ba:	f7 01       	movw	r30, r14
 2bc:	80 83       	st	Z, r24
	*month	  = from_BCD(*month);
 2be:	f8 01       	movw	r30, r16
 2c0:	80 81       	ld	r24, Z
 2c2:	0e 94 66 00 	call	0xcc	; 0xcc <from_BCD>
 2c6:	f8 01       	movw	r30, r16
 2c8:	80 83       	st	Z, r24
	*year	  = from_BCD(*year);
 2ca:	88 81       	ld	r24, Y
 2cc:	0e 94 66 00 	call	0xcc	; 0xcc <from_BCD>
 2d0:	88 83       	st	Y, r24
}
 2d2:	df 91       	pop	r29
 2d4:	cf 91       	pop	r28
 2d6:	1f 91       	pop	r17
 2d8:	0f 91       	pop	r16
 2da:	ff 90       	pop	r15
 2dc:	ef 90       	pop	r14
 2de:	df 90       	pop	r13
 2e0:	cf 90       	pop	r12
 2e2:	08 95       	ret

000002e4 <RTC_get_time>:

/* Получить время */
void RTC_get_time(uint8_t * hours, uint8_t * minutes, uint8_t * seconds)
{
 2e4:	ef 92       	push	r14
 2e6:	ff 92       	push	r15
 2e8:	0f 93       	push	r16
 2ea:	1f 93       	push	r17
 2ec:	cf 93       	push	r28
 2ee:	df 93       	push	r29
 2f0:	ec 01       	movw	r28, r24
 2f2:	8b 01       	movw	r16, r22
 2f4:	7a 01       	movw	r14, r20
	/* Сбрасываем на область памяти */
	RTC_set_value(RTC_SEC_ADR, RTC_WRITE_POINTER);
 2f6:	6f ef       	ldi	r22, 0xFF	; 255
 2f8:	80 e0       	ldi	r24, 0x00	; 0
 2fa:	0e 94 7c 00 	call	0xf8	; 0xf8 <RTC_set_value>
	
	/*Сформировать состояние РЕСТАРТ*/
	twi(TWI_RESTART);
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	0e 94 29 02 	call	0x452	; 0x452 <twi>
	
	/*Выдать на шину пакет SLA-R*/
	twi_transmit((DS1307_ADR<<1)|1);
 304:	81 ed       	ldi	r24, 0xD1	; 209
 306:	0e 94 4c 02 	call	0x498	; 0x498 <twi_transmit>
	
	/*считываем данные с подтверждением, кроме последнего байта */
	twi_receive(seconds, 1);
 30a:	61 e0       	ldi	r22, 0x01	; 1
 30c:	c7 01       	movw	r24, r14
 30e:	0e 94 52 02 	call	0x4a4	; 0x4a4 <twi_receive>
	twi_receive(minutes, 1);
 312:	61 e0       	ldi	r22, 0x01	; 1
 314:	c8 01       	movw	r24, r16
 316:	0e 94 52 02 	call	0x4a4	; 0x4a4 <twi_receive>
	twi_receive(hours, 0);
 31a:	60 e0       	ldi	r22, 0x00	; 0
 31c:	ce 01       	movw	r24, r28
 31e:	0e 94 52 02 	call	0x4a4	; 0x4a4 <twi_receive>
	
	/*Сформировать состояние СТОП*/
	twi(TWI_STOP);
 322:	82 e0       	ldi	r24, 0x02	; 2
 324:	0e 94 29 02 	call	0x452	; 0x452 <twi>
	
	/* Преобразовать из BCD в десятичное число */
	*seconds  = from_BCD(*seconds & 0x7F);
 328:	f7 01       	movw	r30, r14
 32a:	80 81       	ld	r24, Z
 32c:	8f 77       	andi	r24, 0x7F	; 127
 32e:	0e 94 66 00 	call	0xcc	; 0xcc <from_BCD>
 332:	f7 01       	movw	r30, r14
 334:	80 83       	st	Z, r24
	*minutes  = from_BCD(*minutes);
 336:	f8 01       	movw	r30, r16
 338:	80 81       	ld	r24, Z
 33a:	0e 94 66 00 	call	0xcc	; 0xcc <from_BCD>
 33e:	f8 01       	movw	r30, r16
 340:	80 83       	st	Z, r24
	*hours	  = from_BCD(*hours);
 342:	88 81       	ld	r24, Y
 344:	0e 94 66 00 	call	0xcc	; 0xcc <from_BCD>
 348:	88 83       	st	Y, r24
}
 34a:	df 91       	pop	r29
 34c:	cf 91       	pop	r28
 34e:	1f 91       	pop	r17
 350:	0f 91       	pop	r16
 352:	ff 90       	pop	r15
 354:	ef 90       	pop	r14
 356:	08 95       	ret

00000358 <RTC_write_RAM>:

/* Запись в оперативную память часов */
uint8_t RTC_write_RAM(uint8_t address, uint8_t data){
	if (address < RTC_RAM_ADR || address > RTC_RAM_END)
 358:	98 ef       	ldi	r25, 0xF8	; 248
 35a:	98 0f       	add	r25, r24
 35c:	98 33       	cpi	r25, 0x38	; 56
 35e:	20 f4       	brcc	.+8      	; 0x368 <RTC_write_RAM+0x10>
		return 0;	// ничего не записали
				
	RTC_set_value(address, data);
 360:	0e 94 7c 00 	call	0xf8	; 0xf8 <RTC_set_value>
	return 1;
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	08 95       	ret
}

/* Запись в оперативную память часов */
uint8_t RTC_write_RAM(uint8_t address, uint8_t data){
	if (address < RTC_RAM_ADR || address > RTC_RAM_END)
		return 0;	// ничего не записали
 368:	80 e0       	ldi	r24, 0x00	; 0
				
	RTC_set_value(address, data);
	return 1;
}
 36a:	08 95       	ret

0000036c <RTC_get_RAM>:

uint8_t RTC_get_RAM(uint8_t address, uint8_t * data)
{
 36c:	cf 93       	push	r28
 36e:	df 93       	push	r29
	if (address < RTC_RAM_ADR || address > RTC_RAM_END)
 370:	98 ef       	ldi	r25, 0xF8	; 248
 372:	98 0f       	add	r25, r24
 374:	98 33       	cpi	r25, 0x38	; 56
 376:	48 f4       	brcc	.+18     	; 0x38a <RTC_get_RAM+0x1e>
 378:	eb 01       	movw	r28, r22
		return 0;	// ничего не считали

	// Устанавливаем указатель на нужный адрес и считываем данные
	RTC_set_value(address, RTC_WRITE_POINTER);
 37a:	6f ef       	ldi	r22, 0xFF	; 255
 37c:	0e 94 7c 00 	call	0xf8	; 0xf8 <RTC_set_value>
	RTC_get_value(data);
 380:	ce 01       	movw	r24, r28
 382:	0e 94 94 00 	call	0x128	; 0x128 <RTC_get_value>
	return 1;
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	01 c0       	rjmp	.+2      	; 0x38c <RTC_get_RAM+0x20>
}

uint8_t RTC_get_RAM(uint8_t address, uint8_t * data)
{
	if (address < RTC_RAM_ADR || address > RTC_RAM_END)
		return 0;	// ничего не считали
 38a:	80 e0       	ldi	r24, 0x00	; 0

	// Устанавливаем указатель на нужный адрес и считываем данные
	RTC_set_value(address, RTC_WRITE_POINTER);
	RTC_get_value(data);
	return 1;
}
 38c:	df 91       	pop	r29
 38e:	cf 91       	pop	r28
 390:	08 95       	ret

00000392 <twi_init>:
#include "twi.h"

/* Инициализация скорости и делителя I2C */
uint8_t twi_init(uint32_t cpu_frequency, uint32_t frequency)
{
	uint32_t twbr = (cpu_frequency/frequency - 16)/2;
 392:	0e 94 c3 03 	call	0x786	; 0x786 <__udivmodsi4>
 396:	da 01       	movw	r26, r20
 398:	c9 01       	movw	r24, r18
 39a:	40 97       	sbiw	r24, 0x10	; 16
 39c:	a1 09       	sbc	r26, r1
 39e:	b1 09       	sbc	r27, r1
 3a0:	ac 01       	movw	r20, r24
 3a2:	bd 01       	movw	r22, r26
 3a4:	76 95       	lsr	r23
 3a6:	67 95       	ror	r22
 3a8:	57 95       	ror	r21
 3aa:	47 95       	ror	r20
	// Делитель не требуется
	if (twbr <= 0xFF)
 3ac:	4f 3f       	cpi	r20, 0xFF	; 255
 3ae:	51 05       	cpc	r21, r1
 3b0:	61 05       	cpc	r22, r1
 3b2:	71 05       	cpc	r23, r1
 3b4:	09 f0       	breq	.+2      	; 0x3b8 <twi_init+0x26>
 3b6:	30 f4       	brcc	.+12     	; 0x3c4 <twi_init+0x32>
	{
		TWSR = (0<<TWPS1)|(0<<TWPS0);
 3b8:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
		TWBR = twbr;
 3bc:	40 93 b8 00 	sts	0x00B8, r20	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
	else
	{
		return 0;
	}

	return 1;
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	08 95       	ret
	{
		TWSR = (0<<TWPS1)|(0<<TWPS0);
		TWBR = twbr;
	}
	// Делитель 4
	else if (twbr <= 0x3FC)
 3c4:	4d 3f       	cpi	r20, 0xFD	; 253
 3c6:	83 e0       	ldi	r24, 0x03	; 3
 3c8:	58 07       	cpc	r21, r24
 3ca:	61 05       	cpc	r22, r1
 3cc:	71 05       	cpc	r23, r1
 3ce:	88 f4       	brcc	.+34     	; 0x3f2 <twi_init+0x60>
	{
		TWSR = (0<<TWPS1)|(1<<TWPS0);
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
		TWBR = twbr>>2; // Делим на 4
 3d6:	db 01       	movw	r26, r22
 3d8:	ca 01       	movw	r24, r20
 3da:	b6 95       	lsr	r27
 3dc:	a7 95       	ror	r26
 3de:	97 95       	ror	r25
 3e0:	87 95       	ror	r24
 3e2:	b6 95       	lsr	r27
 3e4:	a7 95       	ror	r26
 3e6:	97 95       	ror	r25
 3e8:	87 95       	ror	r24
 3ea:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
	else
	{
		return 0;
	}

	return 1;
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	08 95       	ret
	{
		TWSR = (0<<TWPS1)|(1<<TWPS0);
		TWBR = twbr>>2; // Делим на 4
	}
	// Делитель 16
	else if (twbr <= 0xFF0)
 3f2:	41 3f       	cpi	r20, 0xF1	; 241
 3f4:	8f e0       	ldi	r24, 0x0F	; 15
 3f6:	58 07       	cpc	r21, r24
 3f8:	61 05       	cpc	r22, r1
 3fa:	71 05       	cpc	r23, r1
 3fc:	88 f4       	brcc	.+34     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
	{
		TWSR = (1<<TWPS1)|(0<<TWPS0);
 3fe:	82 e0       	ldi	r24, 0x02	; 2
 400:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
		TWBR = twbr>>4; // Делим на 16
 404:	db 01       	movw	r26, r22
 406:	ca 01       	movw	r24, r20
 408:	68 94       	set
 40a:	13 f8       	bld	r1, 3
 40c:	b6 95       	lsr	r27
 40e:	a7 95       	ror	r26
 410:	97 95       	ror	r25
 412:	87 95       	ror	r24
 414:	16 94       	lsr	r1
 416:	d1 f7       	brne	.-12     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 418:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
	else
	{
		return 0;
	}

	return 1;
 41c:	81 e0       	ldi	r24, 0x01	; 1
 41e:	08 95       	ret
	{
		TWSR = (1<<TWPS1)|(0<<TWPS0);
		TWBR = twbr>>4; // Делим на 16
	}
	// Делитель 64
	else if (twbr <= 0x3FC0)
 420:	41 3c       	cpi	r20, 0xC1	; 193
 422:	8f e3       	ldi	r24, 0x3F	; 63
 424:	58 07       	cpc	r21, r24
 426:	61 05       	cpc	r22, r1
 428:	71 05       	cpc	r23, r1
 42a:	88 f4       	brcc	.+34     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
	{
		TWSR = (1<<TWPS1)|(1<<TWPS0);
 42c:	83 e0       	ldi	r24, 0x03	; 3
 42e:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
		TWBR = twbr>>6; // Делим на 64
 432:	db 01       	movw	r26, r22
 434:	ca 01       	movw	r24, r20
 436:	68 94       	set
 438:	15 f8       	bld	r1, 5
 43a:	b6 95       	lsr	r27
 43c:	a7 95       	ror	r26
 43e:	97 95       	ror	r25
 440:	87 95       	ror	r24
 442:	16 94       	lsr	r1
 444:	d1 f7       	brne	.-12     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 446:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
	else
	{
		return 0;
	}

	return 1;
 44a:	81 e0       	ldi	r24, 0x01	; 1
 44c:	08 95       	ret
		TWBR = twbr>>6; // Делим на 64
	}
	// Ничего не получилось, статус 0
	else
	{
		return 0;
 44e:	80 e0       	ldi	r24, 0x00	; 0
	}

	return 1;
}
 450:	08 95       	ret

00000452 <twi>:

/* Команды I2C */
uint8_t twi(uint8_t action)
{
	switch(action){
 452:	82 30       	cpi	r24, 0x02	; 2
 454:	59 f0       	breq	.+22     	; 0x46c <twi+0x1a>
 456:	30 f0       	brcs	.+12     	; 0x464 <twi+0x12>
 458:	84 30       	cpi	r24, 0x04	; 4
 45a:	81 f0       	breq	.+32     	; 0x47c <twi+0x2a>
 45c:	58 f0       	brcs	.+22     	; 0x474 <twi+0x22>
 45e:	85 30       	cpi	r24, 0x05	; 5
 460:	81 f4       	brne	.+32     	; 0x482 <twi+0x30>
 462:	08 c0       	rjmp	.+16     	; 0x474 <twi+0x22>
		case TWI_START:
		case TWI_RESTART:
			TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
 464:	94 ea       	ldi	r25, 0xA4	; 164
 466:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			break;
 46a:	0b c0       	rjmp	.+22     	; 0x482 <twi+0x30>
		case TWI_STOP:
			TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
 46c:	84 e9       	ldi	r24, 0x94	; 148
 46e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 472:	0e c0       	rjmp	.+28     	; 0x490 <twi+0x3e>
			break;
		case TWI_TRANSMIT:
		case TWI_RECEIVE_NACK:
			TWCR = (1<<TWINT)|(1<<TWEN);
 474:	94 e8       	ldi	r25, 0x84	; 132
 476:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			break;
 47a:	03 c0       	rjmp	.+6      	; 0x482 <twi+0x30>
		case TWI_RECEIVE_ACK:
			TWCR = (1<<TWINT)|(1<<TWEA)|(1<<TWEN);
 47c:	94 ec       	ldi	r25, 0xC4	; 196
 47e:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			break;
		default:
			break;
	}
	
	if (action != TWI_STOP)
 482:	82 30       	cpi	r24, 0x02	; 2
 484:	29 f0       	breq	.+10     	; 0x490 <twi+0x3e>
	{
		while (!(TWCR & (1<<TWINT)));
 486:	ec eb       	ldi	r30, 0xBC	; 188
 488:	f0 e0       	ldi	r31, 0x00	; 0
 48a:	80 81       	ld	r24, Z
 48c:	88 23       	and	r24, r24
 48e:	ec f7       	brge	.-6      	; 0x48a <twi+0x38>
	}
	
	uint8_t status = TWSR & 0xF8; // Статус выполнения (0xF8 = 11111000 - без двух настроечных и одного зарезервивованного бита)
 490:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	return status;
}
 494:	88 7f       	andi	r24, 0xF8	; 248
 496:	08 95       	ret

00000498 <twi_transmit>:

/* Передать данные */
uint8_t twi_transmit(uint8_t data)
{
	TWDR = data;
 498:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	return twi(TWI_TRANSMIT);
 49c:	83 e0       	ldi	r24, 0x03	; 3
 49e:	0e 94 29 02 	call	0x452	; 0x452 <twi>
}
 4a2:	08 95       	ret

000004a4 <twi_receive>:

/* Получить данные */
uint8_t twi_receive(uint8_t * data, uint8_t with_ack)
{
 4a4:	cf 93       	push	r28
 4a6:	df 93       	push	r29
 4a8:	ec 01       	movw	r28, r24
	uint8_t status = twi(with_ack > 0 ? TWI_RECEIVE_ACK : TWI_RECEIVE_NACK);
 4aa:	61 11       	cpse	r22, r1
 4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <twi_receive+0xe>
 4ae:	85 e0       	ldi	r24, 0x05	; 5
 4b0:	01 c0       	rjmp	.+2      	; 0x4b4 <twi_receive+0x10>
 4b2:	84 e0       	ldi	r24, 0x04	; 4
 4b4:	0e 94 29 02 	call	0x452	; 0x452 <twi>
	*data = TWDR;
 4b8:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 4bc:	98 83       	st	Y, r25
	return status;
 4be:	df 91       	pop	r29
 4c0:	cf 91       	pop	r28
 4c2:	08 95       	ret

000004c4 <init_UART>:
{
	data = buffer;		// Переносим буфер
	data_to_send = sz;	// Переносим размер
	data_i = 0;		// Инициализируем счетчик
	sei();			// Разрешаем прерывания
	UCSR0B |= (1<<UDRIE0);	// Разрешаем прерывание по "пустому" UDRE
 4c4:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 4c8:	88 e0       	ldi	r24, 0x08	; 8
 4ca:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 4ce:	86 e0       	ldi	r24, 0x06	; 6
 4d0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 4d4:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 4d8:	87 e6       	ldi	r24, 0x67	; 103
 4da:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 4de:	08 95       	ret

000004e0 <__vector_19>:
 4e0:	1f 92       	push	r1
 4e2:	0f 92       	push	r0
 4e4:	0f b6       	in	r0, 0x3f	; 63
 4e6:	0f 92       	push	r0
 4e8:	11 24       	eor	r1, r1
 4ea:	8f 93       	push	r24
 4ec:	9f 93       	push	r25
 4ee:	ef 93       	push	r30
 4f0:	ff 93       	push	r31
 4f2:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <data_i>
 4f6:	e0 91 7c 01 	lds	r30, 0x017C	; 0x80017c <data>
 4fa:	f0 91 7d 01 	lds	r31, 0x017D	; 0x80017d <data+0x1>
 4fe:	e8 0f       	add	r30, r24
 500:	f1 1d       	adc	r31, r1
 502:	80 81       	ld	r24, Z
 504:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 508:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <data_i>
 50c:	8f 5f       	subi	r24, 0xFF	; 255
 50e:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <data_i>
 512:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <__data_end>
 516:	89 13       	cpse	r24, r25
 518:	06 c0       	rjmp	.+12     	; 0x526 <__vector_19+0x46>
 51a:	e1 ec       	ldi	r30, 0xC1	; 193
 51c:	f0 e0       	ldi	r31, 0x00	; 0
 51e:	80 81       	ld	r24, Z
 520:	8f 7d       	andi	r24, 0xDF	; 223
 522:	80 83       	st	Z, r24
 524:	f8 94       	cli
 526:	ff 91       	pop	r31
 528:	ef 91       	pop	r30
 52a:	9f 91       	pop	r25
 52c:	8f 91       	pop	r24
 52e:	0f 90       	pop	r0
 530:	0f be       	out	0x3f, r0	; 63
 532:	0f 90       	pop	r0
 534:	1f 90       	pop	r1
 536:	18 95       	reti

00000538 <send_byte>:
}

/* Функция для передачи байта без прерываний */
void send_byte(uint8_t byte)
{
	while(!( UCSR0A & (1 << UDRE0))) ;	// ожидаем, пока UDR0 не будет нулевым (не закончится передача)
 538:	e0 ec       	ldi	r30, 0xC0	; 192
 53a:	f0 e0       	ldi	r31, 0x00	; 0
 53c:	90 81       	ld	r25, Z
 53e:	95 ff       	sbrs	r25, 5
 540:	fd cf       	rjmp	.-6      	; 0x53c <send_byte+0x4>
	UDR0 = byte;				// записываем байт в порт
 542:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 546:	08 95       	ret

00000548 <send_buffer>:
}

/* Функция для передачи строки без прерываний */
void send_buffer(char * buffer, uint8_t sz)
{
 548:	0f 93       	push	r16
 54a:	1f 93       	push	r17
 54c:	cf 93       	push	r28
 54e:	df 93       	push	r29
	for (uint8_t i = 0; i < sz; ++i)
 550:	66 23       	and	r22, r22
 552:	71 f0       	breq	.+28     	; 0x570 <send_buffer+0x28>
 554:	ec 01       	movw	r28, r24
 556:	61 50       	subi	r22, 0x01	; 1
 558:	06 2f       	mov	r16, r22
 55a:	10 e0       	ldi	r17, 0x00	; 0
 55c:	0f 5f       	subi	r16, 0xFF	; 255
 55e:	1f 4f       	sbci	r17, 0xFF	; 255
 560:	08 0f       	add	r16, r24
 562:	19 1f       	adc	r17, r25
	send_byte(buffer[i]);
 564:	89 91       	ld	r24, Y+
 566:	0e 94 9c 02 	call	0x538	; 0x538 <send_byte>
}

/* Функция для передачи строки без прерываний */
void send_buffer(char * buffer, uint8_t sz)
{
	for (uint8_t i = 0; i < sz; ++i)
 56a:	c0 17       	cp	r28, r16
 56c:	d1 07       	cpc	r29, r17
 56e:	d1 f7       	brne	.-12     	; 0x564 <send_buffer+0x1c>
	send_byte(buffer[i]);
 570:	df 91       	pop	r29
 572:	cf 91       	pop	r28
 574:	1f 91       	pop	r17
 576:	0f 91       	pop	r16
 578:	08 95       	ret

0000057a <main>:

const char * weekdays[7] =
{"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"};

int main(void)
{
 57a:	cf 93       	push	r28
 57c:	df 93       	push	r29
 57e:	1f 92       	push	r1
 580:	cd b7       	in	r28, 0x3d	; 61
 582:	de b7       	in	r29, 0x3e	; 62
	// Предделитель частоты 1
	CLKPR=(1<<CLKPCE);
 584:	e1 e6       	ldi	r30, 0x61	; 97
 586:	f0 e0       	ldi	r31, 0x00	; 0
 588:	80 e8       	ldi	r24, 0x80	; 128
 58a:	80 83       	st	Z, r24
	CLKPR=0;
 58c:	10 82       	st	Z, r1
	
	init_UART();
 58e:	0e 94 62 02 	call	0x4c4	; 0x4c4 <init_UART>
	
	RTC_init();
 592:	0e 94 71 00 	call	0xe2	; 0xe2 <RTC_init>
	
	// Запись во второй байт памяти числа 136
	uint8_t ram_status = RTC_write_RAM(RTC_RAM_ADR+1, 136);
 596:	68 e8       	ldi	r22, 0x88	; 136
 598:	89 e0       	ldi	r24, 0x09	; 9
 59a:	0e 94 ac 01 	call	0x358	; 0x358 <RTC_write_RAM>
	
	if (ram_status)
 59e:	88 23       	and	r24, r24
 5a0:	19 f1       	breq	.+70     	; 0x5e8 <main+0x6e>
	{
		// Чтение из RAM
		uint8_t ram_data;
		ram_status = RTC_get_RAM(RTC_RAM_ADR+1, &ram_data);
 5a2:	be 01       	movw	r22, r28
 5a4:	6f 5f       	subi	r22, 0xFF	; 255
 5a6:	7f 4f       	sbci	r23, 0xFF	; 255
 5a8:	89 e0       	ldi	r24, 0x09	; 9
 5aa:	0e 94 b6 01 	call	0x36c	; 0x36c <RTC_get_RAM>
		
		if (ram_status)
 5ae:	88 23       	and	r24, r24
 5b0:	d9 f0       	breq	.+54     	; 0x5e8 <main+0x6e>
		{
			sprintf(mes, "read from RAM: %u", ram_data);
 5b2:	89 81       	ldd	r24, Y+1	; 0x01
 5b4:	1f 92       	push	r1
 5b6:	8f 93       	push	r24
 5b8:	8e e0       	ldi	r24, 0x0E	; 14
 5ba:	91 e0       	ldi	r25, 0x01	; 1
 5bc:	9f 93       	push	r25
 5be:	8f 93       	push	r24
 5c0:	84 e8       	ldi	r24, 0x84	; 132
 5c2:	91 e0       	ldi	r25, 0x01	; 1
 5c4:	9f 93       	push	r25
 5c6:	8f 93       	push	r24
 5c8:	0e 94 e5 03 	call	0x7ca	; 0x7ca <sprintf>
			send_buffer(mes, sizeof(mes) / sizeof(char));
 5cc:	64 e1       	ldi	r22, 0x14	; 20
 5ce:	84 e8       	ldi	r24, 0x84	; 132
 5d0:	91 e0       	ldi	r25, 0x01	; 1
 5d2:	0e 94 a4 02 	call	0x548	; 0x548 <send_buffer>
			send_byte('\r');
 5d6:	8d e0       	ldi	r24, 0x0D	; 13
 5d8:	0e 94 9c 02 	call	0x538	; 0x538 <send_byte>
 5dc:	0f 90       	pop	r0
 5de:	0f 90       	pop	r0
 5e0:	0f 90       	pop	r0
 5e2:	0f 90       	pop	r0
 5e4:	0f 90       	pop	r0
 5e6:	0f 90       	pop	r0
		}
	}
	
	RTC_set_out(1); // На выходе OUT=1
 5e8:	81 e0       	ldi	r24, 0x01	; 1
 5ea:	0e 94 01 01 	call	0x202	; 0x202 <RTC_set_out>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5ee:	2f ef       	ldi	r18, 0xFF	; 255
 5f0:	87 ea       	ldi	r24, 0xA7	; 167
 5f2:	91 e6       	ldi	r25, 0x61	; 97
 5f4:	21 50       	subi	r18, 0x01	; 1
 5f6:	80 40       	sbci	r24, 0x00	; 0
 5f8:	90 40       	sbci	r25, 0x00	; 0
 5fa:	e1 f7       	brne	.-8      	; 0x5f4 <main+0x7a>
 5fc:	00 c0       	rjmp	.+0      	; 0x5fe <main+0x84>
 5fe:	00 00       	nop
	_delay_ms(2000);
	
	RTC_set_out(0); // На выходе OUT=0
 600:	80 e0       	ldi	r24, 0x00	; 0
 602:	0e 94 01 01 	call	0x202	; 0x202 <RTC_set_out>
 606:	2f ef       	ldi	r18, 0xFF	; 255
 608:	87 ea       	ldi	r24, 0xA7	; 167
 60a:	91 e6       	ldi	r25, 0x61	; 97
 60c:	21 50       	subi	r18, 0x01	; 1
 60e:	80 40       	sbci	r24, 0x00	; 0
 610:	90 40       	sbci	r25, 0x00	; 0
 612:	e1 f7       	brne	.-8      	; 0x60c <main+0x92>
 614:	00 c0       	rjmp	.+0      	; 0x616 <main+0x9c>
 616:	00 00       	nop
	_delay_ms(2000);
	
	RTC_set_sqwe(F_1HZ); // Включить сигнал частотой 1 Гц
 618:	80 e0       	ldi	r24, 0x00	; 0
 61a:	0e 94 09 01 	call	0x212	; 0x212 <RTC_set_sqwe>
	
	RTC_set_date(28, 12, 24, 7); // установить дату 28.12.2024 Суббота
 61e:	27 e0       	ldi	r18, 0x07	; 7
 620:	48 e1       	ldi	r20, 0x18	; 24
 622:	6c e0       	ldi	r22, 0x0C	; 12
 624:	8c e1       	ldi	r24, 0x1C	; 28
 626:	0e 94 a7 00 	call	0x14e	; 0x14e <RTC_set_date>
	RTC_set_time(13, 45, 32);	 // установить время 13:45:32
 62a:	40 e2       	ldi	r20, 0x20	; 32
 62c:	6d e2       	ldi	r22, 0x2D	; 45
 62e:	8d e0       	ldi	r24, 0x0D	; 13
 630:	0e 94 d7 00 	call	0x1ae	; 0x1ae <RTC_set_time>
	
	RTC_start_stop_watch(0);	// выключить часы
 634:	80 e0       	ldi	r24, 0x00	; 0
 636:	0e 94 0f 01 	call	0x21e	; 0x21e <RTC_start_stop_watch>

	int ticks = 0;
 63a:	e1 2c       	mov	r14, r1
 63c:	f1 2c       	mov	r15, r1
	
	/* Пишем в порт дату и время */
	while (1)
	{
		RTC_get_time(&hours, &minutes, &seconds);
		sprintf(mes, "%02u:%02u:%02u", hours, minutes, seconds);
 63e:	0f 2e       	mov	r0, r31
 640:	f0 e2       	ldi	r31, 0x20	; 32
 642:	af 2e       	mov	r10, r31
 644:	f1 e0       	ldi	r31, 0x01	; 1
 646:	bf 2e       	mov	r11, r31
 648:	f0 2d       	mov	r31, r0
 64a:	04 e8       	ldi	r16, 0x84	; 132
 64c:	11 e0       	ldi	r17, 0x01	; 1
		send_buffer(mes, 8);
		send_byte('\r');
		
		RTC_get_date(&year, &month, &day, &day_week);
		sprintf(mes, "%02u.%02u.%u %s ", day, month, year, weekdays[day_week-1]);
 64e:	0f 2e       	mov	r0, r31
 650:	ff e2       	ldi	r31, 0x2F	; 47
 652:	cf 2e       	mov	r12, r31
 654:	f1 e0       	ldi	r31, 0x01	; 1
 656:	df 2e       	mov	r13, r31
 658:	f0 2d       	mov	r31, r0
			uint8_t ram_data;
			ram_status = RTC_get_RAM(RTC_RAM_ADR+1, &ram_data);
			
			if (ram_status)
			{
				sprintf(mes, "read from RAM: %u", ram_data);
 65a:	0f 2e       	mov	r0, r31
 65c:	fe e0       	ldi	r31, 0x0E	; 14
 65e:	8f 2e       	mov	r8, r31
 660:	f1 e0       	ldi	r31, 0x01	; 1
 662:	9f 2e       	mov	r9, r31
 664:	f0 2d       	mov	r31, r0
	int ticks = 0;
	
	/* Пишем в порт дату и время */
	while (1)
	{
		RTC_get_time(&hours, &minutes, &seconds);
 666:	4f e7       	ldi	r20, 0x7F	; 127
 668:	51 e0       	ldi	r21, 0x01	; 1
 66a:	63 e8       	ldi	r22, 0x83	; 131
 66c:	71 e0       	ldi	r23, 0x01	; 1
 66e:	88 e9       	ldi	r24, 0x98	; 152
 670:	91 e0       	ldi	r25, 0x01	; 1
 672:	0e 94 72 01 	call	0x2e4	; 0x2e4 <RTC_get_time>
		sprintf(mes, "%02u:%02u:%02u", hours, minutes, seconds);
 676:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <seconds>
 67a:	1f 92       	push	r1
 67c:	8f 93       	push	r24
 67e:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <minutes>
 682:	1f 92       	push	r1
 684:	8f 93       	push	r24
 686:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <hours>
 68a:	1f 92       	push	r1
 68c:	8f 93       	push	r24
 68e:	bf 92       	push	r11
 690:	af 92       	push	r10
 692:	1f 93       	push	r17
 694:	0f 93       	push	r16
 696:	0e 94 e5 03 	call	0x7ca	; 0x7ca <sprintf>
		send_buffer(mes, 8);
 69a:	68 e0       	ldi	r22, 0x08	; 8
 69c:	c8 01       	movw	r24, r16
 69e:	0e 94 a4 02 	call	0x548	; 0x548 <send_buffer>
		send_byte('\r');
 6a2:	8d e0       	ldi	r24, 0x0D	; 13
 6a4:	0e 94 9c 02 	call	0x538	; 0x538 <send_byte>
		
		RTC_get_date(&year, &month, &day, &day_week);
 6a8:	22 e8       	ldi	r18, 0x82	; 130
 6aa:	31 e0       	ldi	r19, 0x01	; 1
 6ac:	41 e8       	ldi	r20, 0x81	; 129
 6ae:	51 e0       	ldi	r21, 0x01	; 1
 6b0:	6e e7       	ldi	r22, 0x7E	; 126
 6b2:	71 e0       	ldi	r23, 0x01	; 1
 6b4:	80 e8       	ldi	r24, 0x80	; 128
 6b6:	91 e0       	ldi	r25, 0x01	; 1
 6b8:	0e 94 30 01 	call	0x260	; 0x260 <RTC_get_date>
		sprintf(mes, "%02u.%02u.%u %s ", day, month, year, weekdays[day_week-1]);
 6bc:	e0 91 82 01 	lds	r30, 0x0182	; 0x800182 <day_week>
 6c0:	f0 e0       	ldi	r31, 0x00	; 0
 6c2:	ee 0f       	add	r30, r30
 6c4:	ff 1f       	adc	r31, r31
 6c6:	e2 50       	subi	r30, 0x02	; 2
 6c8:	ff 4f       	sbci	r31, 0xFF	; 255
 6ca:	81 81       	ldd	r24, Z+1	; 0x01
 6cc:	8f 93       	push	r24
 6ce:	80 81       	ld	r24, Z
 6d0:	8f 93       	push	r24
 6d2:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <year>
 6d6:	1f 92       	push	r1
 6d8:	8f 93       	push	r24
 6da:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <month>
 6de:	1f 92       	push	r1
 6e0:	8f 93       	push	r24
 6e2:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <day>
 6e6:	1f 92       	push	r1
 6e8:	8f 93       	push	r24
 6ea:	df 92       	push	r13
 6ec:	cf 92       	push	r12
 6ee:	1f 93       	push	r17
 6f0:	0f 93       	push	r16
 6f2:	0e 94 e5 03 	call	0x7ca	; 0x7ca <sprintf>
		send_buffer(mes, sizeof(mes) / sizeof(char));
 6f6:	64 e1       	ldi	r22, 0x14	; 20
 6f8:	c8 01       	movw	r24, r16
 6fa:	0e 94 a4 02 	call	0x548	; 0x548 <send_buffer>
		send_byte('\r');
 6fe:	8d e0       	ldi	r24, 0x0D	; 13
 700:	0e 94 9c 02 	call	0x538	; 0x538 <send_byte>
		
		// Через 5 секунд включить часы
		if (ticks < 10)
 704:	0f b6       	in	r0, 0x3f	; 63
 706:	f8 94       	cli
 708:	de bf       	out	0x3e, r29	; 62
 70a:	0f be       	out	0x3f, r0	; 63
 70c:	cd bf       	out	0x3d, r28	; 61
 70e:	9a e0       	ldi	r25, 0x0A	; 10
 710:	e9 16       	cp	r14, r25
 712:	f1 04       	cpc	r15, r1
 714:	24 f4       	brge	.+8      	; 0x71e <main+0x1a4>
		{
			++ticks;
 716:	2f ef       	ldi	r18, 0xFF	; 255
 718:	e2 1a       	sub	r14, r18
 71a:	f2 0a       	sbc	r15, r18
 71c:	2a c0       	rjmp	.+84     	; 0x772 <main+0x1f8>
		} else if (ticks == 10) {
 71e:	8a e0       	ldi	r24, 0x0A	; 10
 720:	e8 16       	cp	r14, r24
 722:	f1 04       	cpc	r15, r1
 724:	31 f5       	brne	.+76     	; 0x772 <main+0x1f8>
			RTC_start_stop_watch(1);
 726:	81 e0       	ldi	r24, 0x01	; 1
 728:	0e 94 0f 01 	call	0x21e	; 0x21e <RTC_start_stop_watch>
			++ticks;
			
			uint8_t ram_data;
			ram_status = RTC_get_RAM(RTC_RAM_ADR+1, &ram_data);
 72c:	be 01       	movw	r22, r28
 72e:	6f 5f       	subi	r22, 0xFF	; 255
 730:	7f 4f       	sbci	r23, 0xFF	; 255
 732:	89 e0       	ldi	r24, 0x09	; 9
 734:	0e 94 b6 01 	call	0x36c	; 0x36c <RTC_get_RAM>
			
			if (ram_status)
 738:	88 23       	and	r24, r24
 73a:	b1 f0       	breq	.+44     	; 0x768 <main+0x1ee>
			{
				sprintf(mes, "read from RAM: %u", ram_data);
 73c:	89 81       	ldd	r24, Y+1	; 0x01
 73e:	1f 92       	push	r1
 740:	8f 93       	push	r24
 742:	9f 92       	push	r9
 744:	8f 92       	push	r8
 746:	1f 93       	push	r17
 748:	0f 93       	push	r16
 74a:	0e 94 e5 03 	call	0x7ca	; 0x7ca <sprintf>
				send_buffer(mes, sizeof(mes) / sizeof(char));
 74e:	64 e1       	ldi	r22, 0x14	; 20
 750:	c8 01       	movw	r24, r16
 752:	0e 94 a4 02 	call	0x548	; 0x548 <send_buffer>
				send_byte('\r');
 756:	8d e0       	ldi	r24, 0x0D	; 13
 758:	0e 94 9c 02 	call	0x538	; 0x538 <send_byte>
 75c:	0f 90       	pop	r0
 75e:	0f 90       	pop	r0
 760:	0f 90       	pop	r0
 762:	0f 90       	pop	r0
 764:	0f 90       	pop	r0
 766:	0f 90       	pop	r0
		if (ticks < 10)
		{
			++ticks;
		} else if (ticks == 10) {
			RTC_start_stop_watch(1);
			++ticks;
 768:	0f 2e       	mov	r0, r31
 76a:	fb e0       	ldi	r31, 0x0B	; 11
 76c:	ef 2e       	mov	r14, r31
 76e:	f1 2c       	mov	r15, r1
 770:	f0 2d       	mov	r31, r0
 772:	9f ef       	ldi	r25, 0xFF	; 255
 774:	29 e6       	ldi	r18, 0x69	; 105
 776:	88 e1       	ldi	r24, 0x18	; 24
 778:	91 50       	subi	r25, 0x01	; 1
 77a:	20 40       	sbci	r18, 0x00	; 0
 77c:	80 40       	sbci	r24, 0x00	; 0
 77e:	e1 f7       	brne	.-8      	; 0x778 <main+0x1fe>
 780:	00 c0       	rjmp	.+0      	; 0x782 <main+0x208>
 782:	00 00       	nop
 784:	70 cf       	rjmp	.-288    	; 0x666 <main+0xec>

00000786 <__udivmodsi4>:
 786:	a1 e2       	ldi	r26, 0x21	; 33
 788:	1a 2e       	mov	r1, r26
 78a:	aa 1b       	sub	r26, r26
 78c:	bb 1b       	sub	r27, r27
 78e:	fd 01       	movw	r30, r26
 790:	0d c0       	rjmp	.+26     	; 0x7ac <__udivmodsi4_ep>

00000792 <__udivmodsi4_loop>:
 792:	aa 1f       	adc	r26, r26
 794:	bb 1f       	adc	r27, r27
 796:	ee 1f       	adc	r30, r30
 798:	ff 1f       	adc	r31, r31
 79a:	a2 17       	cp	r26, r18
 79c:	b3 07       	cpc	r27, r19
 79e:	e4 07       	cpc	r30, r20
 7a0:	f5 07       	cpc	r31, r21
 7a2:	20 f0       	brcs	.+8      	; 0x7ac <__udivmodsi4_ep>
 7a4:	a2 1b       	sub	r26, r18
 7a6:	b3 0b       	sbc	r27, r19
 7a8:	e4 0b       	sbc	r30, r20
 7aa:	f5 0b       	sbc	r31, r21

000007ac <__udivmodsi4_ep>:
 7ac:	66 1f       	adc	r22, r22
 7ae:	77 1f       	adc	r23, r23
 7b0:	88 1f       	adc	r24, r24
 7b2:	99 1f       	adc	r25, r25
 7b4:	1a 94       	dec	r1
 7b6:	69 f7       	brne	.-38     	; 0x792 <__udivmodsi4_loop>
 7b8:	60 95       	com	r22
 7ba:	70 95       	com	r23
 7bc:	80 95       	com	r24
 7be:	90 95       	com	r25
 7c0:	9b 01       	movw	r18, r22
 7c2:	ac 01       	movw	r20, r24
 7c4:	bd 01       	movw	r22, r26
 7c6:	cf 01       	movw	r24, r30
 7c8:	08 95       	ret

000007ca <sprintf>:
 7ca:	ae e0       	ldi	r26, 0x0E	; 14
 7cc:	b0 e0       	ldi	r27, 0x00	; 0
 7ce:	eb ee       	ldi	r30, 0xEB	; 235
 7d0:	f3 e0       	ldi	r31, 0x03	; 3
 7d2:	0c 94 a6 06 	jmp	0xd4c	; 0xd4c <__prologue_saves__+0x1c>
 7d6:	0d 89       	ldd	r16, Y+21	; 0x15
 7d8:	1e 89       	ldd	r17, Y+22	; 0x16
 7da:	86 e0       	ldi	r24, 0x06	; 6
 7dc:	8c 83       	std	Y+4, r24	; 0x04
 7de:	1a 83       	std	Y+2, r17	; 0x02
 7e0:	09 83       	std	Y+1, r16	; 0x01
 7e2:	8f ef       	ldi	r24, 0xFF	; 255
 7e4:	9f e7       	ldi	r25, 0x7F	; 127
 7e6:	9e 83       	std	Y+6, r25	; 0x06
 7e8:	8d 83       	std	Y+5, r24	; 0x05
 7ea:	ae 01       	movw	r20, r28
 7ec:	47 5e       	subi	r20, 0xE7	; 231
 7ee:	5f 4f       	sbci	r21, 0xFF	; 255
 7f0:	6f 89       	ldd	r22, Y+23	; 0x17
 7f2:	78 8d       	ldd	r23, Y+24	; 0x18
 7f4:	ce 01       	movw	r24, r28
 7f6:	01 96       	adiw	r24, 0x01	; 1
 7f8:	0e 94 07 04 	call	0x80e	; 0x80e <vfprintf>
 7fc:	ef 81       	ldd	r30, Y+7	; 0x07
 7fe:	f8 85       	ldd	r31, Y+8	; 0x08
 800:	e0 0f       	add	r30, r16
 802:	f1 1f       	adc	r31, r17
 804:	10 82       	st	Z, r1
 806:	2e 96       	adiw	r28, 0x0e	; 14
 808:	e4 e0       	ldi	r30, 0x04	; 4
 80a:	0c 94 c2 06 	jmp	0xd84	; 0xd84 <__epilogue_restores__+0x1c>

0000080e <vfprintf>:
 80e:	ab e0       	ldi	r26, 0x0B	; 11
 810:	b0 e0       	ldi	r27, 0x00	; 0
 812:	ed e0       	ldi	r30, 0x0D	; 13
 814:	f4 e0       	ldi	r31, 0x04	; 4
 816:	0c 94 98 06 	jmp	0xd30	; 0xd30 <__prologue_saves__>
 81a:	6c 01       	movw	r12, r24
 81c:	7b 01       	movw	r14, r22
 81e:	8a 01       	movw	r16, r20
 820:	fc 01       	movw	r30, r24
 822:	17 82       	std	Z+7, r1	; 0x07
 824:	16 82       	std	Z+6, r1	; 0x06
 826:	83 81       	ldd	r24, Z+3	; 0x03
 828:	81 ff       	sbrs	r24, 1
 82a:	cc c1       	rjmp	.+920    	; 0xbc4 <__stack+0x2c5>
 82c:	ce 01       	movw	r24, r28
 82e:	01 96       	adiw	r24, 0x01	; 1
 830:	3c 01       	movw	r6, r24
 832:	f6 01       	movw	r30, r12
 834:	93 81       	ldd	r25, Z+3	; 0x03
 836:	f7 01       	movw	r30, r14
 838:	93 fd       	sbrc	r25, 3
 83a:	85 91       	lpm	r24, Z+
 83c:	93 ff       	sbrs	r25, 3
 83e:	81 91       	ld	r24, Z+
 840:	7f 01       	movw	r14, r30
 842:	88 23       	and	r24, r24
 844:	09 f4       	brne	.+2      	; 0x848 <vfprintf+0x3a>
 846:	ba c1       	rjmp	.+884    	; 0xbbc <__stack+0x2bd>
 848:	85 32       	cpi	r24, 0x25	; 37
 84a:	39 f4       	brne	.+14     	; 0x85a <vfprintf+0x4c>
 84c:	93 fd       	sbrc	r25, 3
 84e:	85 91       	lpm	r24, Z+
 850:	93 ff       	sbrs	r25, 3
 852:	81 91       	ld	r24, Z+
 854:	7f 01       	movw	r14, r30
 856:	85 32       	cpi	r24, 0x25	; 37
 858:	29 f4       	brne	.+10     	; 0x864 <vfprintf+0x56>
 85a:	b6 01       	movw	r22, r12
 85c:	90 e0       	ldi	r25, 0x00	; 0
 85e:	0e 94 fe 05 	call	0xbfc	; 0xbfc <fputc>
 862:	e7 cf       	rjmp	.-50     	; 0x832 <vfprintf+0x24>
 864:	91 2c       	mov	r9, r1
 866:	21 2c       	mov	r2, r1
 868:	31 2c       	mov	r3, r1
 86a:	ff e1       	ldi	r31, 0x1F	; 31
 86c:	f3 15       	cp	r31, r3
 86e:	d8 f0       	brcs	.+54     	; 0x8a6 <vfprintf+0x98>
 870:	8b 32       	cpi	r24, 0x2B	; 43
 872:	79 f0       	breq	.+30     	; 0x892 <vfprintf+0x84>
 874:	38 f4       	brcc	.+14     	; 0x884 <vfprintf+0x76>
 876:	80 32       	cpi	r24, 0x20	; 32
 878:	79 f0       	breq	.+30     	; 0x898 <vfprintf+0x8a>
 87a:	83 32       	cpi	r24, 0x23	; 35
 87c:	a1 f4       	brne	.+40     	; 0x8a6 <vfprintf+0x98>
 87e:	23 2d       	mov	r18, r3
 880:	20 61       	ori	r18, 0x10	; 16
 882:	1d c0       	rjmp	.+58     	; 0x8be <vfprintf+0xb0>
 884:	8d 32       	cpi	r24, 0x2D	; 45
 886:	61 f0       	breq	.+24     	; 0x8a0 <vfprintf+0x92>
 888:	80 33       	cpi	r24, 0x30	; 48
 88a:	69 f4       	brne	.+26     	; 0x8a6 <vfprintf+0x98>
 88c:	23 2d       	mov	r18, r3
 88e:	21 60       	ori	r18, 0x01	; 1
 890:	16 c0       	rjmp	.+44     	; 0x8be <vfprintf+0xb0>
 892:	83 2d       	mov	r24, r3
 894:	82 60       	ori	r24, 0x02	; 2
 896:	38 2e       	mov	r3, r24
 898:	e3 2d       	mov	r30, r3
 89a:	e4 60       	ori	r30, 0x04	; 4
 89c:	3e 2e       	mov	r3, r30
 89e:	2a c0       	rjmp	.+84     	; 0x8f4 <vfprintf+0xe6>
 8a0:	f3 2d       	mov	r31, r3
 8a2:	f8 60       	ori	r31, 0x08	; 8
 8a4:	1d c0       	rjmp	.+58     	; 0x8e0 <vfprintf+0xd2>
 8a6:	37 fc       	sbrc	r3, 7
 8a8:	2d c0       	rjmp	.+90     	; 0x904 <__stack+0x5>
 8aa:	20 ed       	ldi	r18, 0xD0	; 208
 8ac:	28 0f       	add	r18, r24
 8ae:	2a 30       	cpi	r18, 0x0A	; 10
 8b0:	40 f0       	brcs	.+16     	; 0x8c2 <vfprintf+0xb4>
 8b2:	8e 32       	cpi	r24, 0x2E	; 46
 8b4:	b9 f4       	brne	.+46     	; 0x8e4 <vfprintf+0xd6>
 8b6:	36 fc       	sbrc	r3, 6
 8b8:	81 c1       	rjmp	.+770    	; 0xbbc <__stack+0x2bd>
 8ba:	23 2d       	mov	r18, r3
 8bc:	20 64       	ori	r18, 0x40	; 64
 8be:	32 2e       	mov	r3, r18
 8c0:	19 c0       	rjmp	.+50     	; 0x8f4 <vfprintf+0xe6>
 8c2:	36 fe       	sbrs	r3, 6
 8c4:	06 c0       	rjmp	.+12     	; 0x8d2 <vfprintf+0xc4>
 8c6:	8a e0       	ldi	r24, 0x0A	; 10
 8c8:	98 9e       	mul	r9, r24
 8ca:	20 0d       	add	r18, r0
 8cc:	11 24       	eor	r1, r1
 8ce:	92 2e       	mov	r9, r18
 8d0:	11 c0       	rjmp	.+34     	; 0x8f4 <vfprintf+0xe6>
 8d2:	ea e0       	ldi	r30, 0x0A	; 10
 8d4:	2e 9e       	mul	r2, r30
 8d6:	20 0d       	add	r18, r0
 8d8:	11 24       	eor	r1, r1
 8da:	22 2e       	mov	r2, r18
 8dc:	f3 2d       	mov	r31, r3
 8de:	f0 62       	ori	r31, 0x20	; 32
 8e0:	3f 2e       	mov	r3, r31
 8e2:	08 c0       	rjmp	.+16     	; 0x8f4 <vfprintf+0xe6>
 8e4:	8c 36       	cpi	r24, 0x6C	; 108
 8e6:	21 f4       	brne	.+8      	; 0x8f0 <vfprintf+0xe2>
 8e8:	83 2d       	mov	r24, r3
 8ea:	80 68       	ori	r24, 0x80	; 128
 8ec:	38 2e       	mov	r3, r24
 8ee:	02 c0       	rjmp	.+4      	; 0x8f4 <vfprintf+0xe6>
 8f0:	88 36       	cpi	r24, 0x68	; 104
 8f2:	41 f4       	brne	.+16     	; 0x904 <__stack+0x5>
 8f4:	f7 01       	movw	r30, r14
 8f6:	93 fd       	sbrc	r25, 3
 8f8:	85 91       	lpm	r24, Z+
 8fa:	93 ff       	sbrs	r25, 3
 8fc:	81 91       	ld	r24, Z+
 8fe:	7f 01       	movw	r14, r30
 900:	81 11       	cpse	r24, r1
 902:	b3 cf       	rjmp	.-154    	; 0x86a <vfprintf+0x5c>
 904:	98 2f       	mov	r25, r24
 906:	9f 7d       	andi	r25, 0xDF	; 223
 908:	95 54       	subi	r25, 0x45	; 69
 90a:	93 30       	cpi	r25, 0x03	; 3
 90c:	28 f4       	brcc	.+10     	; 0x918 <__stack+0x19>
 90e:	0c 5f       	subi	r16, 0xFC	; 252
 910:	1f 4f       	sbci	r17, 0xFF	; 255
 912:	9f e3       	ldi	r25, 0x3F	; 63
 914:	99 83       	std	Y+1, r25	; 0x01
 916:	0d c0       	rjmp	.+26     	; 0x932 <__stack+0x33>
 918:	83 36       	cpi	r24, 0x63	; 99
 91a:	31 f0       	breq	.+12     	; 0x928 <__stack+0x29>
 91c:	83 37       	cpi	r24, 0x73	; 115
 91e:	71 f0       	breq	.+28     	; 0x93c <__stack+0x3d>
 920:	83 35       	cpi	r24, 0x53	; 83
 922:	09 f0       	breq	.+2      	; 0x926 <__stack+0x27>
 924:	59 c0       	rjmp	.+178    	; 0x9d8 <__stack+0xd9>
 926:	21 c0       	rjmp	.+66     	; 0x96a <__stack+0x6b>
 928:	f8 01       	movw	r30, r16
 92a:	80 81       	ld	r24, Z
 92c:	89 83       	std	Y+1, r24	; 0x01
 92e:	0e 5f       	subi	r16, 0xFE	; 254
 930:	1f 4f       	sbci	r17, 0xFF	; 255
 932:	88 24       	eor	r8, r8
 934:	83 94       	inc	r8
 936:	91 2c       	mov	r9, r1
 938:	53 01       	movw	r10, r6
 93a:	13 c0       	rjmp	.+38     	; 0x962 <__stack+0x63>
 93c:	28 01       	movw	r4, r16
 93e:	f2 e0       	ldi	r31, 0x02	; 2
 940:	4f 0e       	add	r4, r31
 942:	51 1c       	adc	r5, r1
 944:	f8 01       	movw	r30, r16
 946:	a0 80       	ld	r10, Z
 948:	b1 80       	ldd	r11, Z+1	; 0x01
 94a:	36 fe       	sbrs	r3, 6
 94c:	03 c0       	rjmp	.+6      	; 0x954 <__stack+0x55>
 94e:	69 2d       	mov	r22, r9
 950:	70 e0       	ldi	r23, 0x00	; 0
 952:	02 c0       	rjmp	.+4      	; 0x958 <__stack+0x59>
 954:	6f ef       	ldi	r22, 0xFF	; 255
 956:	7f ef       	ldi	r23, 0xFF	; 255
 958:	c5 01       	movw	r24, r10
 95a:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <strnlen>
 95e:	4c 01       	movw	r8, r24
 960:	82 01       	movw	r16, r4
 962:	f3 2d       	mov	r31, r3
 964:	ff 77       	andi	r31, 0x7F	; 127
 966:	3f 2e       	mov	r3, r31
 968:	16 c0       	rjmp	.+44     	; 0x996 <__stack+0x97>
 96a:	28 01       	movw	r4, r16
 96c:	22 e0       	ldi	r18, 0x02	; 2
 96e:	42 0e       	add	r4, r18
 970:	51 1c       	adc	r5, r1
 972:	f8 01       	movw	r30, r16
 974:	a0 80       	ld	r10, Z
 976:	b1 80       	ldd	r11, Z+1	; 0x01
 978:	36 fe       	sbrs	r3, 6
 97a:	03 c0       	rjmp	.+6      	; 0x982 <__stack+0x83>
 97c:	69 2d       	mov	r22, r9
 97e:	70 e0       	ldi	r23, 0x00	; 0
 980:	02 c0       	rjmp	.+4      	; 0x986 <__stack+0x87>
 982:	6f ef       	ldi	r22, 0xFF	; 255
 984:	7f ef       	ldi	r23, 0xFF	; 255
 986:	c5 01       	movw	r24, r10
 988:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <strnlen_P>
 98c:	4c 01       	movw	r8, r24
 98e:	f3 2d       	mov	r31, r3
 990:	f0 68       	ori	r31, 0x80	; 128
 992:	3f 2e       	mov	r3, r31
 994:	82 01       	movw	r16, r4
 996:	33 fc       	sbrc	r3, 3
 998:	1b c0       	rjmp	.+54     	; 0x9d0 <__stack+0xd1>
 99a:	82 2d       	mov	r24, r2
 99c:	90 e0       	ldi	r25, 0x00	; 0
 99e:	88 16       	cp	r8, r24
 9a0:	99 06       	cpc	r9, r25
 9a2:	b0 f4       	brcc	.+44     	; 0x9d0 <__stack+0xd1>
 9a4:	b6 01       	movw	r22, r12
 9a6:	80 e2       	ldi	r24, 0x20	; 32
 9a8:	90 e0       	ldi	r25, 0x00	; 0
 9aa:	0e 94 fe 05 	call	0xbfc	; 0xbfc <fputc>
 9ae:	2a 94       	dec	r2
 9b0:	f4 cf       	rjmp	.-24     	; 0x99a <__stack+0x9b>
 9b2:	f5 01       	movw	r30, r10
 9b4:	37 fc       	sbrc	r3, 7
 9b6:	85 91       	lpm	r24, Z+
 9b8:	37 fe       	sbrs	r3, 7
 9ba:	81 91       	ld	r24, Z+
 9bc:	5f 01       	movw	r10, r30
 9be:	b6 01       	movw	r22, r12
 9c0:	90 e0       	ldi	r25, 0x00	; 0
 9c2:	0e 94 fe 05 	call	0xbfc	; 0xbfc <fputc>
 9c6:	21 10       	cpse	r2, r1
 9c8:	2a 94       	dec	r2
 9ca:	21 e0       	ldi	r18, 0x01	; 1
 9cc:	82 1a       	sub	r8, r18
 9ce:	91 08       	sbc	r9, r1
 9d0:	81 14       	cp	r8, r1
 9d2:	91 04       	cpc	r9, r1
 9d4:	71 f7       	brne	.-36     	; 0x9b2 <__stack+0xb3>
 9d6:	e8 c0       	rjmp	.+464    	; 0xba8 <__stack+0x2a9>
 9d8:	84 36       	cpi	r24, 0x64	; 100
 9da:	11 f0       	breq	.+4      	; 0x9e0 <__stack+0xe1>
 9dc:	89 36       	cpi	r24, 0x69	; 105
 9de:	41 f5       	brne	.+80     	; 0xa30 <__stack+0x131>
 9e0:	f8 01       	movw	r30, r16
 9e2:	37 fe       	sbrs	r3, 7
 9e4:	07 c0       	rjmp	.+14     	; 0x9f4 <__stack+0xf5>
 9e6:	60 81       	ld	r22, Z
 9e8:	71 81       	ldd	r23, Z+1	; 0x01
 9ea:	82 81       	ldd	r24, Z+2	; 0x02
 9ec:	93 81       	ldd	r25, Z+3	; 0x03
 9ee:	0c 5f       	subi	r16, 0xFC	; 252
 9f0:	1f 4f       	sbci	r17, 0xFF	; 255
 9f2:	08 c0       	rjmp	.+16     	; 0xa04 <__stack+0x105>
 9f4:	60 81       	ld	r22, Z
 9f6:	71 81       	ldd	r23, Z+1	; 0x01
 9f8:	07 2e       	mov	r0, r23
 9fa:	00 0c       	add	r0, r0
 9fc:	88 0b       	sbc	r24, r24
 9fe:	99 0b       	sbc	r25, r25
 a00:	0e 5f       	subi	r16, 0xFE	; 254
 a02:	1f 4f       	sbci	r17, 0xFF	; 255
 a04:	f3 2d       	mov	r31, r3
 a06:	ff 76       	andi	r31, 0x6F	; 111
 a08:	3f 2e       	mov	r3, r31
 a0a:	97 ff       	sbrs	r25, 7
 a0c:	09 c0       	rjmp	.+18     	; 0xa20 <__stack+0x121>
 a0e:	90 95       	com	r25
 a10:	80 95       	com	r24
 a12:	70 95       	com	r23
 a14:	61 95       	neg	r22
 a16:	7f 4f       	sbci	r23, 0xFF	; 255
 a18:	8f 4f       	sbci	r24, 0xFF	; 255
 a1a:	9f 4f       	sbci	r25, 0xFF	; 255
 a1c:	f0 68       	ori	r31, 0x80	; 128
 a1e:	3f 2e       	mov	r3, r31
 a20:	2a e0       	ldi	r18, 0x0A	; 10
 a22:	30 e0       	ldi	r19, 0x00	; 0
 a24:	a3 01       	movw	r20, r6
 a26:	0e 94 3a 06 	call	0xc74	; 0xc74 <__ultoa_invert>
 a2a:	88 2e       	mov	r8, r24
 a2c:	86 18       	sub	r8, r6
 a2e:	45 c0       	rjmp	.+138    	; 0xaba <__stack+0x1bb>
 a30:	85 37       	cpi	r24, 0x75	; 117
 a32:	31 f4       	brne	.+12     	; 0xa40 <__stack+0x141>
 a34:	23 2d       	mov	r18, r3
 a36:	2f 7e       	andi	r18, 0xEF	; 239
 a38:	b2 2e       	mov	r11, r18
 a3a:	2a e0       	ldi	r18, 0x0A	; 10
 a3c:	30 e0       	ldi	r19, 0x00	; 0
 a3e:	25 c0       	rjmp	.+74     	; 0xa8a <__stack+0x18b>
 a40:	93 2d       	mov	r25, r3
 a42:	99 7f       	andi	r25, 0xF9	; 249
 a44:	b9 2e       	mov	r11, r25
 a46:	8f 36       	cpi	r24, 0x6F	; 111
 a48:	c1 f0       	breq	.+48     	; 0xa7a <__stack+0x17b>
 a4a:	18 f4       	brcc	.+6      	; 0xa52 <__stack+0x153>
 a4c:	88 35       	cpi	r24, 0x58	; 88
 a4e:	79 f0       	breq	.+30     	; 0xa6e <__stack+0x16f>
 a50:	b5 c0       	rjmp	.+362    	; 0xbbc <__stack+0x2bd>
 a52:	80 37       	cpi	r24, 0x70	; 112
 a54:	19 f0       	breq	.+6      	; 0xa5c <__stack+0x15d>
 a56:	88 37       	cpi	r24, 0x78	; 120
 a58:	21 f0       	breq	.+8      	; 0xa62 <__stack+0x163>
 a5a:	b0 c0       	rjmp	.+352    	; 0xbbc <__stack+0x2bd>
 a5c:	e9 2f       	mov	r30, r25
 a5e:	e0 61       	ori	r30, 0x10	; 16
 a60:	be 2e       	mov	r11, r30
 a62:	b4 fe       	sbrs	r11, 4
 a64:	0d c0       	rjmp	.+26     	; 0xa80 <__stack+0x181>
 a66:	fb 2d       	mov	r31, r11
 a68:	f4 60       	ori	r31, 0x04	; 4
 a6a:	bf 2e       	mov	r11, r31
 a6c:	09 c0       	rjmp	.+18     	; 0xa80 <__stack+0x181>
 a6e:	34 fe       	sbrs	r3, 4
 a70:	0a c0       	rjmp	.+20     	; 0xa86 <__stack+0x187>
 a72:	29 2f       	mov	r18, r25
 a74:	26 60       	ori	r18, 0x06	; 6
 a76:	b2 2e       	mov	r11, r18
 a78:	06 c0       	rjmp	.+12     	; 0xa86 <__stack+0x187>
 a7a:	28 e0       	ldi	r18, 0x08	; 8
 a7c:	30 e0       	ldi	r19, 0x00	; 0
 a7e:	05 c0       	rjmp	.+10     	; 0xa8a <__stack+0x18b>
 a80:	20 e1       	ldi	r18, 0x10	; 16
 a82:	30 e0       	ldi	r19, 0x00	; 0
 a84:	02 c0       	rjmp	.+4      	; 0xa8a <__stack+0x18b>
 a86:	20 e1       	ldi	r18, 0x10	; 16
 a88:	32 e0       	ldi	r19, 0x02	; 2
 a8a:	f8 01       	movw	r30, r16
 a8c:	b7 fe       	sbrs	r11, 7
 a8e:	07 c0       	rjmp	.+14     	; 0xa9e <__stack+0x19f>
 a90:	60 81       	ld	r22, Z
 a92:	71 81       	ldd	r23, Z+1	; 0x01
 a94:	82 81       	ldd	r24, Z+2	; 0x02
 a96:	93 81       	ldd	r25, Z+3	; 0x03
 a98:	0c 5f       	subi	r16, 0xFC	; 252
 a9a:	1f 4f       	sbci	r17, 0xFF	; 255
 a9c:	06 c0       	rjmp	.+12     	; 0xaaa <__stack+0x1ab>
 a9e:	60 81       	ld	r22, Z
 aa0:	71 81       	ldd	r23, Z+1	; 0x01
 aa2:	80 e0       	ldi	r24, 0x00	; 0
 aa4:	90 e0       	ldi	r25, 0x00	; 0
 aa6:	0e 5f       	subi	r16, 0xFE	; 254
 aa8:	1f 4f       	sbci	r17, 0xFF	; 255
 aaa:	a3 01       	movw	r20, r6
 aac:	0e 94 3a 06 	call	0xc74	; 0xc74 <__ultoa_invert>
 ab0:	88 2e       	mov	r8, r24
 ab2:	86 18       	sub	r8, r6
 ab4:	fb 2d       	mov	r31, r11
 ab6:	ff 77       	andi	r31, 0x7F	; 127
 ab8:	3f 2e       	mov	r3, r31
 aba:	36 fe       	sbrs	r3, 6
 abc:	0d c0       	rjmp	.+26     	; 0xad8 <__stack+0x1d9>
 abe:	23 2d       	mov	r18, r3
 ac0:	2e 7f       	andi	r18, 0xFE	; 254
 ac2:	a2 2e       	mov	r10, r18
 ac4:	89 14       	cp	r8, r9
 ac6:	58 f4       	brcc	.+22     	; 0xade <__stack+0x1df>
 ac8:	34 fe       	sbrs	r3, 4
 aca:	0b c0       	rjmp	.+22     	; 0xae2 <__stack+0x1e3>
 acc:	32 fc       	sbrc	r3, 2
 ace:	09 c0       	rjmp	.+18     	; 0xae2 <__stack+0x1e3>
 ad0:	83 2d       	mov	r24, r3
 ad2:	8e 7e       	andi	r24, 0xEE	; 238
 ad4:	a8 2e       	mov	r10, r24
 ad6:	05 c0       	rjmp	.+10     	; 0xae2 <__stack+0x1e3>
 ad8:	b8 2c       	mov	r11, r8
 ada:	a3 2c       	mov	r10, r3
 adc:	03 c0       	rjmp	.+6      	; 0xae4 <__stack+0x1e5>
 ade:	b8 2c       	mov	r11, r8
 ae0:	01 c0       	rjmp	.+2      	; 0xae4 <__stack+0x1e5>
 ae2:	b9 2c       	mov	r11, r9
 ae4:	a4 fe       	sbrs	r10, 4
 ae6:	0f c0       	rjmp	.+30     	; 0xb06 <__stack+0x207>
 ae8:	fe 01       	movw	r30, r28
 aea:	e8 0d       	add	r30, r8
 aec:	f1 1d       	adc	r31, r1
 aee:	80 81       	ld	r24, Z
 af0:	80 33       	cpi	r24, 0x30	; 48
 af2:	21 f4       	brne	.+8      	; 0xafc <__stack+0x1fd>
 af4:	9a 2d       	mov	r25, r10
 af6:	99 7e       	andi	r25, 0xE9	; 233
 af8:	a9 2e       	mov	r10, r25
 afa:	09 c0       	rjmp	.+18     	; 0xb0e <__stack+0x20f>
 afc:	a2 fe       	sbrs	r10, 2
 afe:	06 c0       	rjmp	.+12     	; 0xb0c <__stack+0x20d>
 b00:	b3 94       	inc	r11
 b02:	b3 94       	inc	r11
 b04:	04 c0       	rjmp	.+8      	; 0xb0e <__stack+0x20f>
 b06:	8a 2d       	mov	r24, r10
 b08:	86 78       	andi	r24, 0x86	; 134
 b0a:	09 f0       	breq	.+2      	; 0xb0e <__stack+0x20f>
 b0c:	b3 94       	inc	r11
 b0e:	a3 fc       	sbrc	r10, 3
 b10:	11 c0       	rjmp	.+34     	; 0xb34 <__stack+0x235>
 b12:	a0 fe       	sbrs	r10, 0
 b14:	06 c0       	rjmp	.+12     	; 0xb22 <__stack+0x223>
 b16:	b2 14       	cp	r11, r2
 b18:	88 f4       	brcc	.+34     	; 0xb3c <__stack+0x23d>
 b1a:	28 0c       	add	r2, r8
 b1c:	92 2c       	mov	r9, r2
 b1e:	9b 18       	sub	r9, r11
 b20:	0e c0       	rjmp	.+28     	; 0xb3e <__stack+0x23f>
 b22:	b2 14       	cp	r11, r2
 b24:	60 f4       	brcc	.+24     	; 0xb3e <__stack+0x23f>
 b26:	b6 01       	movw	r22, r12
 b28:	80 e2       	ldi	r24, 0x20	; 32
 b2a:	90 e0       	ldi	r25, 0x00	; 0
 b2c:	0e 94 fe 05 	call	0xbfc	; 0xbfc <fputc>
 b30:	b3 94       	inc	r11
 b32:	f7 cf       	rjmp	.-18     	; 0xb22 <__stack+0x223>
 b34:	b2 14       	cp	r11, r2
 b36:	18 f4       	brcc	.+6      	; 0xb3e <__stack+0x23f>
 b38:	2b 18       	sub	r2, r11
 b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__stack+0x241>
 b3c:	98 2c       	mov	r9, r8
 b3e:	21 2c       	mov	r2, r1
 b40:	a4 fe       	sbrs	r10, 4
 b42:	10 c0       	rjmp	.+32     	; 0xb64 <__stack+0x265>
 b44:	b6 01       	movw	r22, r12
 b46:	80 e3       	ldi	r24, 0x30	; 48
 b48:	90 e0       	ldi	r25, 0x00	; 0
 b4a:	0e 94 fe 05 	call	0xbfc	; 0xbfc <fputc>
 b4e:	a2 fe       	sbrs	r10, 2
 b50:	17 c0       	rjmp	.+46     	; 0xb80 <__stack+0x281>
 b52:	a1 fc       	sbrc	r10, 1
 b54:	03 c0       	rjmp	.+6      	; 0xb5c <__stack+0x25d>
 b56:	88 e7       	ldi	r24, 0x78	; 120
 b58:	90 e0       	ldi	r25, 0x00	; 0
 b5a:	02 c0       	rjmp	.+4      	; 0xb60 <__stack+0x261>
 b5c:	88 e5       	ldi	r24, 0x58	; 88
 b5e:	90 e0       	ldi	r25, 0x00	; 0
 b60:	b6 01       	movw	r22, r12
 b62:	0c c0       	rjmp	.+24     	; 0xb7c <__stack+0x27d>
 b64:	8a 2d       	mov	r24, r10
 b66:	86 78       	andi	r24, 0x86	; 134
 b68:	59 f0       	breq	.+22     	; 0xb80 <__stack+0x281>
 b6a:	a1 fe       	sbrs	r10, 1
 b6c:	02 c0       	rjmp	.+4      	; 0xb72 <__stack+0x273>
 b6e:	8b e2       	ldi	r24, 0x2B	; 43
 b70:	01 c0       	rjmp	.+2      	; 0xb74 <__stack+0x275>
 b72:	80 e2       	ldi	r24, 0x20	; 32
 b74:	a7 fc       	sbrc	r10, 7
 b76:	8d e2       	ldi	r24, 0x2D	; 45
 b78:	b6 01       	movw	r22, r12
 b7a:	90 e0       	ldi	r25, 0x00	; 0
 b7c:	0e 94 fe 05 	call	0xbfc	; 0xbfc <fputc>
 b80:	89 14       	cp	r8, r9
 b82:	38 f4       	brcc	.+14     	; 0xb92 <__stack+0x293>
 b84:	b6 01       	movw	r22, r12
 b86:	80 e3       	ldi	r24, 0x30	; 48
 b88:	90 e0       	ldi	r25, 0x00	; 0
 b8a:	0e 94 fe 05 	call	0xbfc	; 0xbfc <fputc>
 b8e:	9a 94       	dec	r9
 b90:	f7 cf       	rjmp	.-18     	; 0xb80 <__stack+0x281>
 b92:	8a 94       	dec	r8
 b94:	f3 01       	movw	r30, r6
 b96:	e8 0d       	add	r30, r8
 b98:	f1 1d       	adc	r31, r1
 b9a:	80 81       	ld	r24, Z
 b9c:	b6 01       	movw	r22, r12
 b9e:	90 e0       	ldi	r25, 0x00	; 0
 ba0:	0e 94 fe 05 	call	0xbfc	; 0xbfc <fputc>
 ba4:	81 10       	cpse	r8, r1
 ba6:	f5 cf       	rjmp	.-22     	; 0xb92 <__stack+0x293>
 ba8:	22 20       	and	r2, r2
 baa:	09 f4       	brne	.+2      	; 0xbae <__stack+0x2af>
 bac:	42 ce       	rjmp	.-892    	; 0x832 <vfprintf+0x24>
 bae:	b6 01       	movw	r22, r12
 bb0:	80 e2       	ldi	r24, 0x20	; 32
 bb2:	90 e0       	ldi	r25, 0x00	; 0
 bb4:	0e 94 fe 05 	call	0xbfc	; 0xbfc <fputc>
 bb8:	2a 94       	dec	r2
 bba:	f6 cf       	rjmp	.-20     	; 0xba8 <__stack+0x2a9>
 bbc:	f6 01       	movw	r30, r12
 bbe:	86 81       	ldd	r24, Z+6	; 0x06
 bc0:	97 81       	ldd	r25, Z+7	; 0x07
 bc2:	02 c0       	rjmp	.+4      	; 0xbc8 <__stack+0x2c9>
 bc4:	8f ef       	ldi	r24, 0xFF	; 255
 bc6:	9f ef       	ldi	r25, 0xFF	; 255
 bc8:	2b 96       	adiw	r28, 0x0b	; 11
 bca:	e2 e1       	ldi	r30, 0x12	; 18
 bcc:	0c 94 b4 06 	jmp	0xd68	; 0xd68 <__epilogue_restores__>

00000bd0 <strnlen_P>:
 bd0:	fc 01       	movw	r30, r24
 bd2:	05 90       	lpm	r0, Z+
 bd4:	61 50       	subi	r22, 0x01	; 1
 bd6:	70 40       	sbci	r23, 0x00	; 0
 bd8:	01 10       	cpse	r0, r1
 bda:	d8 f7       	brcc	.-10     	; 0xbd2 <strnlen_P+0x2>
 bdc:	80 95       	com	r24
 bde:	90 95       	com	r25
 be0:	8e 0f       	add	r24, r30
 be2:	9f 1f       	adc	r25, r31
 be4:	08 95       	ret

00000be6 <strnlen>:
 be6:	fc 01       	movw	r30, r24
 be8:	61 50       	subi	r22, 0x01	; 1
 bea:	70 40       	sbci	r23, 0x00	; 0
 bec:	01 90       	ld	r0, Z+
 bee:	01 10       	cpse	r0, r1
 bf0:	d8 f7       	brcc	.-10     	; 0xbe8 <strnlen+0x2>
 bf2:	80 95       	com	r24
 bf4:	90 95       	com	r25
 bf6:	8e 0f       	add	r24, r30
 bf8:	9f 1f       	adc	r25, r31
 bfa:	08 95       	ret

00000bfc <fputc>:
 bfc:	0f 93       	push	r16
 bfe:	1f 93       	push	r17
 c00:	cf 93       	push	r28
 c02:	df 93       	push	r29
 c04:	fb 01       	movw	r30, r22
 c06:	23 81       	ldd	r18, Z+3	; 0x03
 c08:	21 fd       	sbrc	r18, 1
 c0a:	03 c0       	rjmp	.+6      	; 0xc12 <fputc+0x16>
 c0c:	8f ef       	ldi	r24, 0xFF	; 255
 c0e:	9f ef       	ldi	r25, 0xFF	; 255
 c10:	2c c0       	rjmp	.+88     	; 0xc6a <fputc+0x6e>
 c12:	22 ff       	sbrs	r18, 2
 c14:	16 c0       	rjmp	.+44     	; 0xc42 <fputc+0x46>
 c16:	46 81       	ldd	r20, Z+6	; 0x06
 c18:	57 81       	ldd	r21, Z+7	; 0x07
 c1a:	24 81       	ldd	r18, Z+4	; 0x04
 c1c:	35 81       	ldd	r19, Z+5	; 0x05
 c1e:	42 17       	cp	r20, r18
 c20:	53 07       	cpc	r21, r19
 c22:	44 f4       	brge	.+16     	; 0xc34 <fputc+0x38>
 c24:	a0 81       	ld	r26, Z
 c26:	b1 81       	ldd	r27, Z+1	; 0x01
 c28:	9d 01       	movw	r18, r26
 c2a:	2f 5f       	subi	r18, 0xFF	; 255
 c2c:	3f 4f       	sbci	r19, 0xFF	; 255
 c2e:	31 83       	std	Z+1, r19	; 0x01
 c30:	20 83       	st	Z, r18
 c32:	8c 93       	st	X, r24
 c34:	26 81       	ldd	r18, Z+6	; 0x06
 c36:	37 81       	ldd	r19, Z+7	; 0x07
 c38:	2f 5f       	subi	r18, 0xFF	; 255
 c3a:	3f 4f       	sbci	r19, 0xFF	; 255
 c3c:	37 83       	std	Z+7, r19	; 0x07
 c3e:	26 83       	std	Z+6, r18	; 0x06
 c40:	14 c0       	rjmp	.+40     	; 0xc6a <fputc+0x6e>
 c42:	8b 01       	movw	r16, r22
 c44:	ec 01       	movw	r28, r24
 c46:	fb 01       	movw	r30, r22
 c48:	00 84       	ldd	r0, Z+8	; 0x08
 c4a:	f1 85       	ldd	r31, Z+9	; 0x09
 c4c:	e0 2d       	mov	r30, r0
 c4e:	09 95       	icall
 c50:	89 2b       	or	r24, r25
 c52:	e1 f6       	brne	.-72     	; 0xc0c <fputc+0x10>
 c54:	d8 01       	movw	r26, r16
 c56:	16 96       	adiw	r26, 0x06	; 6
 c58:	8d 91       	ld	r24, X+
 c5a:	9c 91       	ld	r25, X
 c5c:	17 97       	sbiw	r26, 0x07	; 7
 c5e:	01 96       	adiw	r24, 0x01	; 1
 c60:	17 96       	adiw	r26, 0x07	; 7
 c62:	9c 93       	st	X, r25
 c64:	8e 93       	st	-X, r24
 c66:	16 97       	sbiw	r26, 0x06	; 6
 c68:	ce 01       	movw	r24, r28
 c6a:	df 91       	pop	r29
 c6c:	cf 91       	pop	r28
 c6e:	1f 91       	pop	r17
 c70:	0f 91       	pop	r16
 c72:	08 95       	ret

00000c74 <__ultoa_invert>:
 c74:	fa 01       	movw	r30, r20
 c76:	aa 27       	eor	r26, r26
 c78:	28 30       	cpi	r18, 0x08	; 8
 c7a:	51 f1       	breq	.+84     	; 0xcd0 <__ultoa_invert+0x5c>
 c7c:	20 31       	cpi	r18, 0x10	; 16
 c7e:	81 f1       	breq	.+96     	; 0xce0 <__ultoa_invert+0x6c>
 c80:	e8 94       	clt
 c82:	6f 93       	push	r22
 c84:	6e 7f       	andi	r22, 0xFE	; 254
 c86:	6e 5f       	subi	r22, 0xFE	; 254
 c88:	7f 4f       	sbci	r23, 0xFF	; 255
 c8a:	8f 4f       	sbci	r24, 0xFF	; 255
 c8c:	9f 4f       	sbci	r25, 0xFF	; 255
 c8e:	af 4f       	sbci	r26, 0xFF	; 255
 c90:	b1 e0       	ldi	r27, 0x01	; 1
 c92:	3e d0       	rcall	.+124    	; 0xd10 <__ultoa_invert+0x9c>
 c94:	b4 e0       	ldi	r27, 0x04	; 4
 c96:	3c d0       	rcall	.+120    	; 0xd10 <__ultoa_invert+0x9c>
 c98:	67 0f       	add	r22, r23
 c9a:	78 1f       	adc	r23, r24
 c9c:	89 1f       	adc	r24, r25
 c9e:	9a 1f       	adc	r25, r26
 ca0:	a1 1d       	adc	r26, r1
 ca2:	68 0f       	add	r22, r24
 ca4:	79 1f       	adc	r23, r25
 ca6:	8a 1f       	adc	r24, r26
 ca8:	91 1d       	adc	r25, r1
 caa:	a1 1d       	adc	r26, r1
 cac:	6a 0f       	add	r22, r26
 cae:	71 1d       	adc	r23, r1
 cb0:	81 1d       	adc	r24, r1
 cb2:	91 1d       	adc	r25, r1
 cb4:	a1 1d       	adc	r26, r1
 cb6:	20 d0       	rcall	.+64     	; 0xcf8 <__ultoa_invert+0x84>
 cb8:	09 f4       	brne	.+2      	; 0xcbc <__ultoa_invert+0x48>
 cba:	68 94       	set
 cbc:	3f 91       	pop	r19
 cbe:	2a e0       	ldi	r18, 0x0A	; 10
 cc0:	26 9f       	mul	r18, r22
 cc2:	11 24       	eor	r1, r1
 cc4:	30 19       	sub	r19, r0
 cc6:	30 5d       	subi	r19, 0xD0	; 208
 cc8:	31 93       	st	Z+, r19
 cca:	de f6       	brtc	.-74     	; 0xc82 <__ultoa_invert+0xe>
 ccc:	cf 01       	movw	r24, r30
 cce:	08 95       	ret
 cd0:	46 2f       	mov	r20, r22
 cd2:	47 70       	andi	r20, 0x07	; 7
 cd4:	40 5d       	subi	r20, 0xD0	; 208
 cd6:	41 93       	st	Z+, r20
 cd8:	b3 e0       	ldi	r27, 0x03	; 3
 cda:	0f d0       	rcall	.+30     	; 0xcfa <__ultoa_invert+0x86>
 cdc:	c9 f7       	brne	.-14     	; 0xcd0 <__ultoa_invert+0x5c>
 cde:	f6 cf       	rjmp	.-20     	; 0xccc <__ultoa_invert+0x58>
 ce0:	46 2f       	mov	r20, r22
 ce2:	4f 70       	andi	r20, 0x0F	; 15
 ce4:	40 5d       	subi	r20, 0xD0	; 208
 ce6:	4a 33       	cpi	r20, 0x3A	; 58
 ce8:	18 f0       	brcs	.+6      	; 0xcf0 <__ultoa_invert+0x7c>
 cea:	49 5d       	subi	r20, 0xD9	; 217
 cec:	31 fd       	sbrc	r19, 1
 cee:	40 52       	subi	r20, 0x20	; 32
 cf0:	41 93       	st	Z+, r20
 cf2:	02 d0       	rcall	.+4      	; 0xcf8 <__ultoa_invert+0x84>
 cf4:	a9 f7       	brne	.-22     	; 0xce0 <__ultoa_invert+0x6c>
 cf6:	ea cf       	rjmp	.-44     	; 0xccc <__ultoa_invert+0x58>
 cf8:	b4 e0       	ldi	r27, 0x04	; 4
 cfa:	a6 95       	lsr	r26
 cfc:	97 95       	ror	r25
 cfe:	87 95       	ror	r24
 d00:	77 95       	ror	r23
 d02:	67 95       	ror	r22
 d04:	ba 95       	dec	r27
 d06:	c9 f7       	brne	.-14     	; 0xcfa <__ultoa_invert+0x86>
 d08:	00 97       	sbiw	r24, 0x00	; 0
 d0a:	61 05       	cpc	r22, r1
 d0c:	71 05       	cpc	r23, r1
 d0e:	08 95       	ret
 d10:	9b 01       	movw	r18, r22
 d12:	ac 01       	movw	r20, r24
 d14:	0a 2e       	mov	r0, r26
 d16:	06 94       	lsr	r0
 d18:	57 95       	ror	r21
 d1a:	47 95       	ror	r20
 d1c:	37 95       	ror	r19
 d1e:	27 95       	ror	r18
 d20:	ba 95       	dec	r27
 d22:	c9 f7       	brne	.-14     	; 0xd16 <__ultoa_invert+0xa2>
 d24:	62 0f       	add	r22, r18
 d26:	73 1f       	adc	r23, r19
 d28:	84 1f       	adc	r24, r20
 d2a:	95 1f       	adc	r25, r21
 d2c:	a0 1d       	adc	r26, r0
 d2e:	08 95       	ret

00000d30 <__prologue_saves__>:
 d30:	2f 92       	push	r2
 d32:	3f 92       	push	r3
 d34:	4f 92       	push	r4
 d36:	5f 92       	push	r5
 d38:	6f 92       	push	r6
 d3a:	7f 92       	push	r7
 d3c:	8f 92       	push	r8
 d3e:	9f 92       	push	r9
 d40:	af 92       	push	r10
 d42:	bf 92       	push	r11
 d44:	cf 92       	push	r12
 d46:	df 92       	push	r13
 d48:	ef 92       	push	r14
 d4a:	ff 92       	push	r15
 d4c:	0f 93       	push	r16
 d4e:	1f 93       	push	r17
 d50:	cf 93       	push	r28
 d52:	df 93       	push	r29
 d54:	cd b7       	in	r28, 0x3d	; 61
 d56:	de b7       	in	r29, 0x3e	; 62
 d58:	ca 1b       	sub	r28, r26
 d5a:	db 0b       	sbc	r29, r27
 d5c:	0f b6       	in	r0, 0x3f	; 63
 d5e:	f8 94       	cli
 d60:	de bf       	out	0x3e, r29	; 62
 d62:	0f be       	out	0x3f, r0	; 63
 d64:	cd bf       	out	0x3d, r28	; 61
 d66:	09 94       	ijmp

00000d68 <__epilogue_restores__>:
 d68:	2a 88       	ldd	r2, Y+18	; 0x12
 d6a:	39 88       	ldd	r3, Y+17	; 0x11
 d6c:	48 88       	ldd	r4, Y+16	; 0x10
 d6e:	5f 84       	ldd	r5, Y+15	; 0x0f
 d70:	6e 84       	ldd	r6, Y+14	; 0x0e
 d72:	7d 84       	ldd	r7, Y+13	; 0x0d
 d74:	8c 84       	ldd	r8, Y+12	; 0x0c
 d76:	9b 84       	ldd	r9, Y+11	; 0x0b
 d78:	aa 84       	ldd	r10, Y+10	; 0x0a
 d7a:	b9 84       	ldd	r11, Y+9	; 0x09
 d7c:	c8 84       	ldd	r12, Y+8	; 0x08
 d7e:	df 80       	ldd	r13, Y+7	; 0x07
 d80:	ee 80       	ldd	r14, Y+6	; 0x06
 d82:	fd 80       	ldd	r15, Y+5	; 0x05
 d84:	0c 81       	ldd	r16, Y+4	; 0x04
 d86:	1b 81       	ldd	r17, Y+3	; 0x03
 d88:	aa 81       	ldd	r26, Y+2	; 0x02
 d8a:	b9 81       	ldd	r27, Y+1	; 0x01
 d8c:	ce 0f       	add	r28, r30
 d8e:	d1 1d       	adc	r29, r1
 d90:	0f b6       	in	r0, 0x3f	; 63
 d92:	f8 94       	cli
 d94:	de bf       	out	0x3e, r29	; 62
 d96:	0f be       	out	0x3f, r0	; 63
 d98:	cd bf       	out	0x3d, r28	; 61
 d9a:	ed 01       	movw	r28, r26
 d9c:	08 95       	ret

00000d9e <_exit>:
 d9e:	f8 94       	cli

00000da0 <__stop_program>:
 da0:	ff cf       	rjmp	.-2      	; 0xda0 <__stop_program>
