;#include <mega328p.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000006 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000007 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000008 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;#define low(x)   ((x) & 0xFF)
;#define high(x)   (((x)>>8) & 0xFF)
;
;//#define FGEN 7680000UL
;#define FGEN 7946000UL
;#define TIMER0_A_PWM (1<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (1<<WGM00)
;#define TIMER0_B_PWM (0<<COM0A1) | (0<<COM0A0) | (1<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (1<<WGM00)
;#define N 181 //points
;#define DEAD_TIME 2
;
;unsigned char polarity = 1;
;unsigned char B_polarity = 0;
;unsigned char step = 0;
;
;unsigned char sinus[N+1];
;
;const float sinus_table[N+1] ={
;0.0, 0.0175, 0.035, 0.052, 0.0698, 0.087, 0.105,
;0.122, 0.139, 0.156, 0.174, 0.191, 0.208,
;0.225, 0.242, 0.259, 0.276, 0.292, 0.309,
;0.326, 0.342, 0.358, 0.375, 0.391, 0.407,
;0.423, 0.438, 0.454, 0.469, 0.485, 0.5,
;0.515, 0.53, 0.545, 0.559, 0.574, 0.588,
;0.602, 0.616, 0.629, 0.643, 0.656, 0.669,
;0.682, 0.695, 0.707, 0.719, 0.731, 0.743,
;0.755, 0.766, 0.777, 0.788, 0.799, 0.809,
;0.819, 0.829, 0.839, 0.848, 0.857, 0.866,
;0.875, 0.883, 0.891, 0.899, 0.906, 0.914,
;0.921, 0.927, 0.934, 0.94, 0.946, 0.951,
;0.956, 0.961, 0.966, 0.97, 0.974, 0.978,
;0.982, 0.985, 0.988, 0.99, 0.993, 0.995,
;0.996, 0.998, 0.999, 0.999, 1.0,  1.0,
;1.0, 0.999, 0.999, 0.998, 0.996,
;0.995, 0.993, 0.99, 0.988, 0.985, 0.982,
;0.978, 0.974, 0.97, 0.966, 0.961, 0.956,
;0.951, 0.946, 0.94, 0.934, 0.927, 0.921,
;0.914, 0.906, 0.899, 0.891, 0.883, 0.875,
;0.866, 0.857, 0.848, 0.839, 0.829, 0.819,
;0.809, 0.799, 0.788, 0.777, 0.766, 0.755,
;0.743, 0.731, 0.719, 0.707, 0.695, 0.682,
;0.669, 0.656, 0.643, 0.629, 0.616, 0.602,
;0.588, 0.574, 0.559, 0.545, 0.53, 0.515,
;0.5, 0.485, 0.469, 0.454, 0.438, 0.423,
;0.407, 0.391, 0.375, 0.358, 0.342, 0.326,
;0.309, 0.292, 0.276, 0.259, 0.242, 0.225,
;0.208, 0.191, 0.174, 0.156, 0.139, 0.122,
;0.105, 0.087, 0.0698, 0.052, 0.035, 0.0175, 0.0};
;
;void stop_timers() {
; 0000 0033 void stop_timers() {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0034 TCCR0A=0;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0035 TCCR0B=0;
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0036 TCNT0=0;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0037 OCR0A=0;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0038 OCR0B=0;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0039 TIMSK1=0;
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 003A }
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;
;void DC_mode() {
; 0000 003C void DC_mode() {
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 003D stop_timers();
;PCODE: $0000001F VOL: 0
; 0000 003E PORTC=(1<<PORTC1);
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 003F PORTD=(1<<PORTD5);
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0040 }
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;
;void sinus_period(unsigned int frequency) {
; 0000 0042 void sinus_period(unsigned int frequency) {
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0043     if (frequency != 0) {
;PCODE: $00000028 VOL: 0
;	frequency -> Y+0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0044     OCR1AH = high(FGEN/2/N/frequency);
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0045     OCR1AL = low(FGEN/2/N/frequency);
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0046     } else {
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0047         DC_mode();
;PCODE: $00000039 VOL: 0
; 0000 0048     }
;PCODE: $0000003A VOL: 0
; 0000 0049 }
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;
;void sinus_amplitude(unsigned char amplitude) {
; 0000 004B void sinus_amplitude(unsigned char amplitude) {
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 004C unsigned char i = 0;
; 0000 004D     for (i = 0; i < N; i++) {
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;	amplitude -> Y+1
;	i -> R17
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 004E      sinus[i] = 2.55*amplitude*sinus_table[i];
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 004F     }
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0050 }
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;
;void start_PWM(unsigned int frequency, unsigned int amplitude) {
; 0000 0052 void start_PWM(unsigned int frequency, unsigned int amplitude) {
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 0053 // Timer/Counter 0 initialization
; 0000 0054 TCCR0A=TIMER0_A_PWM;
;PCODE: $0000006E VOL: 0
;	frequency -> Y+2
;	amplitude -> Y+0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 0055 TCCR0B=(0<<WGM02) | (0<<CS02) | (0<<CS01) | (1<<CS00);
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 0056 TCNT0=0;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 0057 // Timer/Counter 1 initialization
; 0000 0058 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 0059 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (1<<WGM12) | (0<<CS12) | (0<<CS11) | (1<<CS10);
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 005A TCNT1H=0;
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 005B TCNT1L=0;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 005C ICR1H=0;
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 005D ICR1L=0;
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 005E // Timer/Counter 1 Interrupt(s) initialization
; 0000 005F TIMSK1=(0<<ICIE1) | (0<<OCIE1B) | (1<<OCIE1A) | (0<<TOIE1);
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 0060 sinus_period(frequency);
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 0061 sinus_amplitude(amplitude);
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 0062 }
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;
;interrupt [TIM1_COMPA] void timer1_compa_isr(void)
; 0000 0065 {
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 0066    if (step > N) {polarity ^= 1; step = 0;};
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 0067    if (step == DEAD_TIME || step == N-DEAD_TIME) {B_polarity ^= 1;};
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 0068    step++;
;PCODE: $000000A0 VOL: 0
; 0000 0069    if (polarity == 1) {
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 006A     TCCR0A = TIMER0_A_PWM;
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 006B     OCR0A = sinus[step];
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 006C     PORTC = (B_polarity << PORTC0);
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 006D    } else {
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 006E     TCCR0A=TIMER0_B_PWM;
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 006F     OCR0B = sinus[step];
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 0070     PORTC = (B_polarity << PORTC1);
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 0071    }
;PCODE: $000000B9 VOL: 0
; 0000 0072 }
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;
;void setup() {
; 0000 0074 void setup() {
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 0075 // Crystal Oscillator division factor: 1
; 0000 0076 #pragma optsize-
; 0000 0077 CLKPR=(1<<CLKPCE);
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 0078 CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 0079 #ifdef _OPTIMIZE_SIZE_
; 0000 007A #pragma optsize+
; 0000 007B #endif
; 0000 007C ACSR=(1<<ACD);
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 007D // Ports init
; 0000 007E DDRC=(1<<DDC1) | (1<<DDC0);
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 007F DDRD=(1<<DDD6) | (1<<DDD5);
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 0080 
; 0000 0081 start_PWM(100, 100);
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 0082 
; 0000 0083 #asm("sei")
;PCODE: $000000CE VOL: 0
	sei
;PCODE: $000000CF VOL: 0
; 0000 0084 }
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;
;void main(void)
; 0000 0087 {
;PCODE: $000000D2 VOL: 0
; 0000 0088  setup();
;PCODE: $000000D3 VOL: 0
; 0000 0089 while (1)
;PCODE: $000000D4 VOL: 0
; 0000 008A       {
; 0000 008B       }
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 008C }
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
