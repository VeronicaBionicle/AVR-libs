
AVRASM ver. 2.1.30  D:\Студенческое\Системы управления преобразователями\code\Debug\List\invertor_pwm.asm Thu Mar 19 15:10:06 2020

D:\Студенческое\Системы управления преобразователями\code\Debug\List\invertor_pwm.asm(1090): warning: Register r4 already defined by the .DEF directive
D:\Студенческое\Системы управления преобразователями\code\Debug\List\invertor_pwm.asm(1091): warning: Register r3 already defined by the .DEF directive
D:\Студенческое\Системы управления преобразователями\code\Debug\List\invertor_pwm.asm(1092): warning: Register r6 already defined by the .DEF directive
D:\Студенческое\Системы управления преобразователями\code\Debug\List\invertor_pwm.asm(1093): warning: Register r7 already defined by the .DEF directive
D:\Студенческое\Системы управления преобразователями\code\Debug\List\invertor_pwm.asm(1094): warning: Register r8 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega328P
                 ;Program type           : Application
                 ;Clock frequency        : 7,680000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega328P
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x08FF
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _phase_b_step=R4
                 	.DEF _phase_c_step=R3
                 	.DEF _amplitude=R6
                 	.DEF _frequency=R7
                 	.DEF _frequency_msb=R8
                 
                 ;GPIOR0 INITIALIZATION VALUE
                 	.EQU __GPIOR0_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 01a7 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 027b 	JMP  _timer1_compa_isr
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
                 
                 _sinus_table:
000034 0000
000035 0000
000036 5c29
000037 3c8f      	.DB  0x0,0x0,0x0,0x0,0x29,0x5C,0x8F,0x3C
000038 5c29
000039 3d0f
00003a fdf4
00003b 3d54      	.DB  0x29,0x5C,0xF,0x3D,0xF4,0xFD,0x54,0x3D
00003c f34d
00003d 3d8e
00003e 2d0e
00003f 3db2      	.DB  0x4D,0xF3,0x8E,0x3D,0xE,0x2D,0xB2,0x3D
000040 0a3d
000041 3dd7
000042 db23
000043 3df9      	.DB  0x3D,0xA,0xD7,0x3D,0x23,0xDB,0xF9,0x3D
000044 5604
000045 3e0e
000046 be77
000047 3e1f      	.DB  0x4,0x56,0xE,0x3E,0x77,0xBE,0x1F,0x3E
000048 2d0e
000049 3e32
00004a 9581
00004b 3e43      	.DB  0xE,0x2D,0x32,0x3E,0x81,0x95,0x43,0x3E
00004c fdf4
00004d 3e54
00004e 6666
00004f 3e66      	.DB  0xF4,0xFD,0x54,0x3E,0x66,0x66,0x66,0x3E
000050 ced9
000051 3e77
000052 9ba6
000053 3e84      	.DB  0xD9,0xCE,0x77,0x3E,0xA6,0x9B,0x84,0x3E
000054 4fdf
000055 3e8d
000056 8106
000057 3e95      	.DB  0xDF,0x4F,0x8D,0x3E,0x6,0x81,0x95,0x3E
000058 353f
000059 3e9e
00005a e979
00005b 3ea6      	.DB  0x3F,0x35,0x9E,0x3E,0x79,0xE9,0xA6,0x3E
00005c 1aa0
00005d 3eaf
00005e 4bc7
00005f 3eb7      	.DB  0xA0,0x1A,0xAF,0x3E,0xC7,0x4B,0xB7,0x3E
000060 0000
000061 3ec0
000062 3127
000063 3ec8      	.DB  0x0,0x0,0xC0,0x3E,0x27,0x31,0xC8,0x3E
000064 624e
000065 3ed0
000066 9375
000067 3ed8      	.DB  0x4E,0x62,0xD0,0x3E,0x75,0x93,0xD8,0x3E
000068 4189
000069 3ee0
00006a 72b0
00006b 3ee8      	.DB  0x89,0x41,0xE0,0x3E,0xB0,0x72,0xE8,0x3E
00006c 20c5
00006d 3ef0
00006e 51ec
00006f 3ef8      	.DB  0xC5,0x20,0xF0,0x3E,0xEC,0x51,0xF8,0x3E
000070 0000
000071 3f00
000072 d70a
000073 3f03      	.DB  0x0,0x0,0x0,0x3F,0xA,0xD7,0x3,0x3F
000074 ae14
000075 3f07
000076 851f
000077 3f0b      	.DB  0x14,0xAE,0x7,0x3F,0x1F,0x85,0xB,0x3F
000078 1aa0
000079 3f0f
00007a f1aa
00007b 3f12      	.DB  0xA0,0x1A,0xF,0x3F,0xAA,0xF1,0x12,0x3F
00007c 872b
00007d 3f16
00007e 1cac
00007f 3f1a      	.DB  0x2B,0x87,0x16,0x3F,0xAC,0x1C,0x1A,0x3F
000080 b22d
000081 3f1d
000082 0625
000083 3f21      	.DB  0x2D,0xB2,0x1D,0x3F,0x25,0x6,0x21,0x3F
000084 9ba6
000085 3f24
000086 ef9e
000087 3f27      	.DB  0xA6,0x9B,0x24,0x3F,0x9E,0xEF,0x27,0x3F
000088 4396
000089 3f2b
00008a 978d
00008b 3f2e      	.DB  0x96,0x43,0x2B,0x3F,0x8D,0x97,0x2E,0x3F
00008c eb85
00008d 3f31
00008e fdf4
00008f 3f34      	.DB  0x85,0xEB,0x31,0x3F,0xF4,0xFD,0x34,0x3F
000090 1062
000091 3f38
000092 22d1
000093 3f3b      	.DB  0x62,0x10,0x38,0x3F,0xD1,0x22,0x3B,0x3F
000094 353f
000095 3f3e
000096 47ae
000097 3f41      	.DB  0x3F,0x35,0x3E,0x3F,0xAE,0x47,0x41,0x3F
000098 1893
000099 3f44
00009a e979
00009b 3f46      	.DB  0x93,0x18,0x44,0x3F,0x79,0xE9,0x46,0x3F
00009c ba5e
00009d 3f49
00009e 8b44
00009f 3f4c      	.DB  0x5E,0xBA,0x49,0x3F,0x44,0x8B,0x4C,0x3F
0000a0 1aa0
0000a1 3f4f
0000a2 a9fc
0000a3 3f51      	.DB  0xA0,0x1A,0x4F,0x3F,0xFC,0xA9,0x51,0x3F
0000a4 3958
0000a5 3f54
0000a6 c8b4
0000a7 3f56      	.DB  0x58,0x39,0x54,0x3F,0xB4,0xC8,0x56,0x3F
0000a8 1687
0000a9 3f59
0000aa 645a
0000ab 3f5b      	.DB  0x87,0x16,0x59,0x3F,0x5A,0x64,0x5B,0x3F
0000ac b22d
0000ad 3f5d
0000ae 0000
0000af 3f60      	.DB  0x2D,0xB2,0x5D,0x3F,0x0,0x0,0x60,0x3F
0000b0 0c4a
0000b1 3f62
0000b2 1893
0000b3 3f64      	.DB  0x4A,0xC,0x62,0x3F,0x93,0x18,0x64,0x3F
0000b4 24dd
0000b5 3f66
0000b6 ef9e
0000b7 3f67      	.DB  0xDD,0x24,0x66,0x3F,0x9E,0xEF,0x67,0x3F
0000b8 fbe7
0000b9 3f69
0000ba c6a8
0000bb 3f6b      	.DB  0xE7,0xFB,0x69,0x3F,0xA8,0xC6,0x6B,0x3F
0000bc 4fdf
0000bd 3f6d
0000be 1aa0
0000bf 3f6f      	.DB  0xDF,0x4F,0x6D,0x3F,0xA0,0x1A,0x6F,0x3F
0000c0 a3d7
0000c1 3f70
0000c2 2d0e
0000c3 3f72      	.DB  0xD7,0xA3,0x70,0x3F,0xE,0x2D,0x72,0x3F
0000c4 74bc
0000c5 3f73
0000c6 bc6a
0000c7 3f74      	.DB  0xBC,0x74,0x73,0x3F,0x6A,0xBC,0x74,0x3F
0000c8 0419
0000c9 3f76
0000ca 4bc7
0000cb 3f77      	.DB  0x19,0x4,0x76,0x3F,0xC7,0x4B,0x77,0x3F
0000cc 51ec
0000cd 3f78
0000ce 5810
0000cf 3f79      	.DB  0xEC,0x51,0x78,0x3F,0x10,0x58,0x79,0x3F
0000d0 5e35
0000d1 3f7a
0000d2 645a
0000d3 3f7b      	.DB  0x35,0x5E,0x7A,0x3F,0x5A,0x64,0x7B,0x3F
0000d4 28f6
0000d5 3f7c
0000d6 ed91
0000d7 3f7c      	.DB  0xF6,0x28,0x7C,0x3F,0x91,0xED,0x7C,0x3F
0000d8 70a4
0000d9 3f7d
0000da 353f
0000db 3f7e      	.DB  0xA4,0x70,0x7D,0x3F,0x3F,0x35,0x7E,0x3F
0000dc b852
0000dd 3f7e
0000de f9db
0000df 3f7e      	.DB  0x52,0xB8,0x7E,0x3F,0xDB,0xF9,0x7E,0x3F
0000e0 7cee
0000e1 3f7f
0000e2 be77
0000e3 3f7f      	.DB  0xEE,0x7C,0x7F,0x3F,0x77,0xBE,0x7F,0x3F
0000e4 be77
0000e5 3f7f
0000e6 0000
0000e7 3f80      	.DB  0x77,0xBE,0x7F,0x3F,0x0,0x0,0x80,0x3F
0000e8 0000
0000e9 3f80
0000ea 0000
0000eb 3f80      	.DB  0x0,0x0,0x80,0x3F,0x0,0x0,0x80,0x3F
0000ec be77
0000ed 3f7f
0000ee be77
0000ef 3f7f      	.DB  0x77,0xBE,0x7F,0x3F,0x77,0xBE,0x7F,0x3F
0000f0 7cee
0000f1 3f7f
0000f2 f9db
0000f3 3f7e      	.DB  0xEE,0x7C,0x7F,0x3F,0xDB,0xF9,0x7E,0x3F
0000f4 b852
0000f5 3f7e
0000f6 353f
0000f7 3f7e      	.DB  0x52,0xB8,0x7E,0x3F,0x3F,0x35,0x7E,0x3F
0000f8 70a4
0000f9 3f7d
0000fa ed91
0000fb 3f7c      	.DB  0xA4,0x70,0x7D,0x3F,0x91,0xED,0x7C,0x3F
0000fc 28f6
0000fd 3f7c
0000fe 645a
0000ff 3f7b      	.DB  0xF6,0x28,0x7C,0x3F,0x5A,0x64,0x7B,0x3F
000100 5e35
000101 3f7a
000102 5810
000103 3f79      	.DB  0x35,0x5E,0x7A,0x3F,0x10,0x58,0x79,0x3F
000104 51ec
000105 3f78
000106 4bc7
000107 3f77      	.DB  0xEC,0x51,0x78,0x3F,0xC7,0x4B,0x77,0x3F
000108 0419
000109 3f76
00010a bc6a
00010b 3f74      	.DB  0x19,0x4,0x76,0x3F,0x6A,0xBC,0x74,0x3F
00010c 74bc
00010d 3f73
00010e 2d0e
00010f 3f72      	.DB  0xBC,0x74,0x73,0x3F,0xE,0x2D,0x72,0x3F
000110 a3d7
000111 3f70
000112 1aa0
000113 3f6f      	.DB  0xD7,0xA3,0x70,0x3F,0xA0,0x1A,0x6F,0x3F
000114 4fdf
000115 3f6d
000116 c6a8
000117 3f6b      	.DB  0xDF,0x4F,0x6D,0x3F,0xA8,0xC6,0x6B,0x3F
000118 fbe7
000119 3f69
00011a ef9e
00011b 3f67      	.DB  0xE7,0xFB,0x69,0x3F,0x9E,0xEF,0x67,0x3F
00011c 24dd
00011d 3f66
00011e 1893
00011f 3f64      	.DB  0xDD,0x24,0x66,0x3F,0x93,0x18,0x64,0x3F
000120 0c4a
000121 3f62
000122 0000
000123 3f60      	.DB  0x4A,0xC,0x62,0x3F,0x0,0x0,0x60,0x3F
000124 b22d
000125 3f5d
000126 645a
000127 3f5b      	.DB  0x2D,0xB2,0x5D,0x3F,0x5A,0x64,0x5B,0x3F
000128 1687
000129 3f59
00012a c8b4
00012b 3f56      	.DB  0x87,0x16,0x59,0x3F,0xB4,0xC8,0x56,0x3F
00012c 3958
00012d 3f54
00012e a9fc
00012f 3f51      	.DB  0x58,0x39,0x54,0x3F,0xFC,0xA9,0x51,0x3F
000130 1aa0
000131 3f4f
000132 8b44
000133 3f4c      	.DB  0xA0,0x1A,0x4F,0x3F,0x44,0x8B,0x4C,0x3F
000134 ba5e
000135 3f49
000136 e979
000137 3f46      	.DB  0x5E,0xBA,0x49,0x3F,0x79,0xE9,0x46,0x3F
000138 1893
000139 3f44
00013a 47ae
00013b 3f41      	.DB  0x93,0x18,0x44,0x3F,0xAE,0x47,0x41,0x3F
00013c 353f
00013d 3f3e
00013e 22d1
00013f 3f3b      	.DB  0x3F,0x35,0x3E,0x3F,0xD1,0x22,0x3B,0x3F
000140 1062
000141 3f38
000142 fdf4
000143 3f34      	.DB  0x62,0x10,0x38,0x3F,0xF4,0xFD,0x34,0x3F
000144 eb85
000145 3f31
000146 978d
000147 3f2e      	.DB  0x85,0xEB,0x31,0x3F,0x8D,0x97,0x2E,0x3F
000148 4396
000149 3f2b
00014a ef9e
00014b 3f27      	.DB  0x96,0x43,0x2B,0x3F,0x9E,0xEF,0x27,0x3F
00014c 9ba6
00014d 3f24
00014e 0625
00014f 3f21      	.DB  0xA6,0x9B,0x24,0x3F,0x25,0x6,0x21,0x3F
000150 b22d
000151 3f1d
000152 1cac
000153 3f1a      	.DB  0x2D,0xB2,0x1D,0x3F,0xAC,0x1C,0x1A,0x3F
000154 872b
000155 3f16
000156 f1aa
000157 3f12      	.DB  0x2B,0x87,0x16,0x3F,0xAA,0xF1,0x12,0x3F
000158 1aa0
000159 3f0f
00015a 851f
00015b 3f0b      	.DB  0xA0,0x1A,0xF,0x3F,0x1F,0x85,0xB,0x3F
00015c ae14
00015d 3f07
00015e d70a
00015f 3f03      	.DB  0x14,0xAE,0x7,0x3F,0xA,0xD7,0x3,0x3F
000160 0000
000161 3f00
000162 51ec
000163 3ef8      	.DB  0x0,0x0,0x0,0x3F,0xEC,0x51,0xF8,0x3E
000164 20c5
000165 3ef0
000166 72b0
000167 3ee8      	.DB  0xC5,0x20,0xF0,0x3E,0xB0,0x72,0xE8,0x3E
000168 4189
000169 3ee0
00016a 9375
00016b 3ed8      	.DB  0x89,0x41,0xE0,0x3E,0x75,0x93,0xD8,0x3E
00016c 624e
00016d 3ed0
00016e 3127
00016f 3ec8      	.DB  0x4E,0x62,0xD0,0x3E,0x27,0x31,0xC8,0x3E
000170 0000
000171 3ec0
000172 4bc7
000173 3eb7      	.DB  0x0,0x0,0xC0,0x3E,0xC7,0x4B,0xB7,0x3E
000174 1aa0
000175 3eaf
000176 e979
000177 3ea6      	.DB  0xA0,0x1A,0xAF,0x3E,0x79,0xE9,0xA6,0x3E
000178 353f
000179 3e9e
00017a 8106
00017b 3e95      	.DB  0x3F,0x35,0x9E,0x3E,0x6,0x81,0x95,0x3E
00017c 4fdf
00017d 3e8d
00017e 9ba6
00017f 3e84      	.DB  0xDF,0x4F,0x8D,0x3E,0xA6,0x9B,0x84,0x3E
000180 ced9
000181 3e77
000182 6666
000183 3e66      	.DB  0xD9,0xCE,0x77,0x3E,0x66,0x66,0x66,0x3E
000184 fdf4
000185 3e54
000186 9581
000187 3e43      	.DB  0xF4,0xFD,0x54,0x3E,0x81,0x95,0x43,0x3E
000188 2d0e
000189 3e32
00018a be77
00018b 3e1f      	.DB  0xE,0x2D,0x32,0x3E,0x77,0xBE,0x1F,0x3E
00018c 5604
00018d 3e0e
00018e db23
00018f 3df9      	.DB  0x4,0x56,0xE,0x3E,0x23,0xDB,0xF9,0x3D
000190 0a3d
000191 3dd7
000192 2d0e
000193 3db2      	.DB  0x3D,0xA,0xD7,0x3D,0xE,0x2D,0xB2,0x3D
000194 f34d
000195 3d8e
000196 fdf4
000197 3d54      	.DB  0x4D,0xF3,0x8E,0x3D,0xF4,0xFD,0x54,0x3D
000198 5c29
000199 3d0f
00019a 5c29
00019b 3c8f      	.DB  0x29,0x5C,0xF,0x3D,0x29,0x5C,0x8F,0x3C
00019c 0000
00019d 0000
00019e 0000
00019f 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
0001a0 0000
0001a1 6400      	.DB  0x0,0x0,0x0,0x64
0001a2 0032      	.DB  0x32,0x0
                 
                 
                 __GLOBAL_INI_TBL:
0001a3 0006      	.DW  0x06
0001a4 0003      	.DW  0x03
0001a5 0340      	.DW  __REG_VARS*2
                 
                 _0xFFFFFFFF:
0001a6 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
0001a7 94f8      	CLI
0001a8 27ee      	CLR  R30
0001a9 bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
0001aa e0f1      	LDI  R31,1
0001ab bff5      	OUT  MCUCR,R31
0001ac bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
0001ad e08d      	LDI  R24,(14-2)+1
0001ae e0a2      	LDI  R26,2
0001af 27bb      	CLR  R27
                 __CLEAR_REG:
0001b0 93ed      	ST   X+,R30
0001b1 958a      	DEC  R24
0001b2 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0001b3 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0001b4 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0001b5 e0a0      	LDI  R26,LOW(__SRAM_START)
0001b6 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
0001b7 93ed      	ST   X+,R30
0001b8 9701      	SBIW R24,1
0001b9 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0001ba e4e6      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0001bb e0f3      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0001bc 9185      	LPM  R24,Z+
0001bd 9195      	LPM  R25,Z+
0001be 9700      	SBIW R24,0
0001bf f061      	BREQ __GLOBAL_INI_END
0001c0 91a5      	LPM  R26,Z+
0001c1 91b5      	LPM  R27,Z+
0001c2 9005      	LPM  R0,Z+
0001c3 9015      	LPM  R1,Z+
0001c4 01bf      	MOVW R22,R30
0001c5 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0001c6 9005      	LPM  R0,Z+
0001c7 920d      	ST   X+,R0
0001c8 9701      	SBIW R24,1
0001c9 f7e1      	BRNE __GLOBAL_INI_LOOP
0001ca 01fb      	MOVW R30,R22
0001cb cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0 INITIALIZATION
0001cc e0e0      	LDI  R30,__GPIOR0_INIT
0001cd bbee      	OUT  GPIOR0,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0001ce efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0001cf bfed      	OUT  SPL,R30
0001d0 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0001d1 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0001d2 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0001d3 e0d3      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0001d4 940c 032c 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x300
                 
                 	.CSEG
                 ;#include <mega328p.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 ;typedef unsigned char uint8_t;
                 ;typedef unsigned int uint16_t;
                 ;#define low(x)   ((x) & 0xFF)
                 ;#define high(x)   (((x)>>8) & 0xFF)
                 ;
                 ;//#define FGEN 7680000UL
                 ;#define FGEN 7946000UL
                 ;#define TIMER0_PWM (1<<COM0A1) | (0<<COM0A0) | (1<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (1<<WGM00)
                 ;#define TIMER2_PWM (1<<COM2A1) | (0<<COM2A0) | (0<<COM2B1) | (0<<COM2B0) | (0<<WGM21) | (1<<WGM20)
                 ;#define PWM_DIV (0<<WGM02) | (0<<CS02) | (0<<CS01) | (1<<CS00)
                 ;#define TIMER1_DIV (0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (1<<WGM12) | (0<<CS12) | (0<<CS11) | (1<<CS10)
                 ;#define N 181 //points
                 ;#define DEAD_TIME 0
                 ;#define PHASE_B_DELAY N/3
                 ;#define PHASE_C_DELAY 2*N/3
                 ;#define A 0
                 ;#define B 1
                 ;#define C 2
                 ;#define PHASE_A_PIN PORTD6
                 ;#define PHASE_B_PIN PORTD5
                 ;#define PHASE_C_PIN PORTB3
                 ;#define PHASE_NOT_A_PIN PORTC0
                 ;#define PHASE_NOT_B_PIN PORTC1
                 ;#define PHASE_NOT_C_PIN PORTC2
                 ;
                 ;uint8_t polarity[3];
                 ;uint8_t polarity_not[3];
                 ;uint8_t step[3];
                 ;
                 ;//uint8_t polarity_not = 0;
                 ;
                 ;uint8_t sinus[N+1];
                 ;
                 ;uint8_t phase_b_step = 0;
                 ;uint8_t phase_c_step = 0;
                 ;
                 ;uint8_t amplitude = 100;
                 ;uint16_t frequency = 50;
                 ;
                 ;const float sinus_table[N+1] ={
                 ;    0.0, 0.0175, 0.035, 0.052, 0.0698, 0.087, 0.105, 0.122, 0.139, 0.156, 0.174, 0.191, 0.208,
                 ;    0.225, 0.242, 0.259, 0.276, 0.292, 0.309, 0.326, 0.342, 0.358, 0.375, 0.391, 0.407,
                 ;    0.423, 0.438, 0.454, 0.469, 0.485, 0.5, 0.515, 0.53, 0.545, 0.559, 0.574, 0.588,
                 ;    0.602, 0.616, 0.629, 0.643, 0.656, 0.669, 0.682, 0.695, 0.707, 0.719, 0.731, 0.743,
                 ;    0.755, 0.766, 0.777, 0.788, 0.799, 0.809, 0.819, 0.829, 0.839, 0.848, 0.857, 0.866,
                 ;    0.875, 0.883, 0.891, 0.899, 0.906, 0.914, 0.921, 0.927, 0.934, 0.94, 0.946, 0.951,
                 ;    0.956, 0.961, 0.966, 0.97, 0.974, 0.978, 0.982, 0.985, 0.988, 0.99, 0.993, 0.995,
                 ;    0.996, 0.998, 0.999, 0.999, 1.0, 1.0, 1.0, 0.999, 0.999, 0.998, 0.996,
                 ;    0.995, 0.993, 0.99, 0.988, 0.985, 0.982, 0.978, 0.974, 0.97, 0.966, 0.961, 0.956,
                 ;    0.951, 0.946, 0.94, 0.934, 0.927, 0.921, 0.914, 0.906, 0.899, 0.891, 0.883, 0.875,
                 ;    0.866, 0.857, 0.848, 0.839, 0.829, 0.819, 0.809, 0.799, 0.788, 0.777, 0.766, 0.755,
                 ;    0.743, 0.731, 0.719, 0.707, 0.695, 0.682, 0.669, 0.656, 0.643, 0.629, 0.616, 0.602,
                 ;    0.588, 0.574, 0.559, 0.545, 0.53, 0.515, 0.5, 0.485, 0.469, 0.454, 0.438, 0.423,
                 ;    0.407, 0.391, 0.375, 0.358, 0.342, 0.326, 0.309, 0.292, 0.276, 0.259, 0.242, 0.225,
                 ;    0.208, 0.191, 0.174, 0.156, 0.139, 0.122, 0.105, 0.087, 0.0698, 0.052, 0.035, 0.0175, 0.0};
                 ;
                 ;void stop_timers() {
                 ; 0000 003A void stop_timers() {
                 
                 	.CSEG
                 _stop_timers:
                 ; .FSTART _stop_timers
                 ; 0000 003B     TCCR0A=0; TCCR0B=0;
0001d6 e0e0      	LDI  R30,LOW(0)
0001d7 bde4      	OUT  0x24,R30
0001d8 bde5      	OUT  0x25,R30
                 ; 0000 003C     OCR0A=0; OCR0B=0;
0001d9 bde7      	OUT  0x27,R30
0001da bde8      	OUT  0x28,R30
                 ; 0000 003D     TCCR1A=0; TCCR1B=0;
0001db 93e0 0080 	STS  128,R30
0001dd 93e0 0081 	STS  129,R30
                 ; 0000 003E     OCR1AH=0; OCR1AL=0;
0001df 93e0 0089 	STS  137,R30
0001e1 93e0 0088 	STS  136,R30
                 ; 0000 003F     TIMSK1=0;
0001e3 93e0 006f 	STS  111,R30
                 ; 0000 0040     TCCR2A=0; TCCR2B=0;
0001e5 93e0 00b0 	STS  176,R30
0001e7 93e0 00b1 	STS  177,R30
                 ; 0000 0041     OCR2A=0; OCR2B=0;
0001e9 93e0 00b3 	STS  179,R30
0001eb 93e0 00b4 	STS  180,R30
                 ; 0000 0042     #asm("cli")
0001ed 94f8      	cli
                 ; 0000 0043 }
0001ee 9508      	RET
                 ; .FEND
                 ;
                 ;void DC_mode() {
                 ; 0000 0045 void DC_mode() {
                 _DC_mode:
                 ; .FSTART _DC_mode
                 ; 0000 0046     stop_timers();
0001ef dfe6      	RCALL _stop_timers
                 ; 0000 0047     PORTC=(1<<PORTC1);
0001f0 e0e2      	LDI  R30,LOW(2)
0001f1 b9e8      	OUT  0x8,R30
                 ; 0000 0048     PORTD=(1<<PORTD5);
0001f2 e2e0      	LDI  R30,LOW(32)
0001f3 b9eb      	OUT  0xB,R30
                 ; 0000 0049 }
0001f4 9508      	RET
                 ; .FEND
                 ;
                 ;void sinus_period(uint16_t frequency) {
                 ; 0000 004B void sinus_period(uint16_t frequency) {
                 _sinus_period:
                 ; .FSTART _sinus_period
                 ; 0000 004C     if (frequency != 0) {
0001f5 93ba      	ST   -Y,R27
0001f6 93aa      	ST   -Y,R26
                 ;	frequency -> Y+0
0001f7 81e8      	LD   R30,Y
0001f8 81f9      	LDD  R31,Y+1
0001f9 9730      	SBIW R30,0
0001fa f049      	BREQ _0x3
                 ; 0000 004D         OCR1AH = high(FGEN/2/N/frequency);
0001fb d133      	RCALL SUBOPT_0x0
0001fc 2fef      	MOV  R30,R31
0001fd e0f0      	LDI  R31,0
0001fe 93e0 0089 	STS  137,R30
                 ; 0000 004E         OCR1AL = low(FGEN/2/N/frequency);
000200 d12e      	RCALL SUBOPT_0x0
000201 93e0 0088 	STS  136,R30
                 ; 0000 004F     } else {
000203 c001      	RJMP _0x4
                 _0x3:
                 ; 0000 0050         DC_mode();
000204 dfea      	RCALL _DC_mode
                 ; 0000 0051     }
                 _0x4:
                 ; 0000 0052 }
000205 c034      	RJMP _0x2000001
                 ; .FEND
                 ;
                 ;void sinus_amplitude(uint8_t amplitude) {
                 ; 0000 0054 void sinus_amplitude(uint8_t amplitude) {
                 _sinus_amplitude:
                 ; .FSTART _sinus_amplitude
                 ; 0000 0055     uint8_t i = 0;
                 ; 0000 0056     for (i = 0; i < N; i++) {
000206 93aa      	ST   -Y,R26
000207 931a      	ST   -Y,R17
                 ;	amplitude -> Y+1
                 ;	i -> R17
000208 e010      	LDI  R17,0
000209 e010      	LDI  R17,LOW(0)
                 _0x6:
00020a 3b15      	CPI  R17,181
00020b f568      	BRSH _0x7
                 ; 0000 0057      sinus[i] = 2.55*amplitude*sinus_table[i];
00020c 2fe1      	MOV  R30,R17
00020d e0f0      	LDI  R31,0
00020e 5fe7      	SUBI R30,LOW(-_sinus)
00020f 4ffc      	SBCI R31,HIGH(-_sinus)
000210 93ff      	PUSH R31
000211 93ef      	PUSH R30
000212 81e9      	LDD  R30,Y+1
000213 e0f0      	LDI  R31,0
000214 940e 0431 	CALL __CWD1
000216 940e 03a8 	CALL __CDF1
                +
000218 e3a3     +LDI R26 , LOW ( 0x40233333 )
000219 e3b3     +LDI R27 , HIGH ( 0x40233333 )
00021a e283     +LDI R24 , BYTE3 ( 0x40233333 )
00021b e490     +LDI R25 , BYTE4 ( 0x40233333 )
                 	__GETD2N 0x40233333
00021c 940e 03d6 	CALL __MULF12
00021e 937f      	PUSH R23
00021f 936f      	PUSH R22
000220 93ff      	PUSH R31
000221 93ef      	PUSH R30
000222 2fe1      	MOV  R30,R17
000223 e6a8      	LDI  R26,LOW(_sinus_table*2)
000224 e0b0      	LDI  R27,HIGH(_sinus_table*2)
000225 e0f0      	LDI  R31,0
000226 940e 042c 	CALL __LSLW2
000228 0fea      	ADD  R30,R26
000229 1ffb      	ADC  R31,R27
00022a 940e 0449 	CALL __GETD1PF
00022c 91af      	POP  R26
00022d 91bf      	POP  R27
00022e 918f      	POP  R24
00022f 919f      	POP  R25
000230 940e 03d6 	CALL __MULF12
000232 91af      	POP  R26
000233 91bf      	POP  R27
000234 940e 036f 	CALL __CFD1U
000236 93ec      	ST   X,R30
                 ; 0000 0058     }
000237 5f1f      	SUBI R17,-1
000238 cfd1      	RJMP _0x6
                 _0x7:
                 ; 0000 0059 }
000239 8118      	LDD  R17,Y+0
                 _0x2000001:
00023a 9622      	ADIW R28,2
00023b 9508      	RET
                 ; .FEND
                 ;
                 ;void start_PWM(uint16_t frequency, uint8_t amplitude) {
                 ; 0000 005B void start_PWM(uint16_t frequency, uint8_t amplitude) {
                 _start_PWM:
                 ; .FSTART _start_PWM
                 ; 0000 005C     polarity[A] = 1;
00023c 93aa      	ST   -Y,R26
                 ;	frequency -> Y+1
                 ;	amplitude -> Y+0
00023d e0e1      	LDI  R30,LOW(1)
00023e 93e0 0300 	STS  _polarity,R30
                 ; 0000 005D     polarity[B] = 0;
000240 e0e0      	LDI  R30,LOW(0)
                +
000241 93e0 0301+STS _polarity + ( 1 ) , R30
                 	__PUTB1MN _polarity,1
                 ; 0000 005E     polarity[C] = 1;
000243 e0e1      	LDI  R30,LOW(1)
                +
000244 93e0 0302+STS _polarity + ( 2 ) , R30
                 	__PUTB1MN _polarity,2
                 ; 0000 005F     polarity_not[A] = 0;
000246 e0e0      	LDI  R30,LOW(0)
000247 93e0 0303 	STS  _polarity_not,R30
                 ; 0000 0060     polarity_not[B] = 0;
                +
000249 93e0 0304+STS _polarity_not + ( 1 ) , R30
                 	__PUTB1MN _polarity_not,1
                 ; 0000 0061     polarity_not[C] = 0;
                +
00024b 93e0 0305+STS _polarity_not + ( 2 ) , R30
                 	__PUTB1MN _polarity_not,2
                 ; 0000 0062     step[A] = 0;
00024d 93e0 0306 	STS  _step,R30
                 ; 0000 0063     step[B] = 0;
                +
00024f 93e0 0307+STS _step + ( 1 ) , R30
                 	__PUTB1MN _step,1
                 ; 0000 0064     step[B] = 0;
                +
000251 93e0 0307+STS _step + ( 1 ) , R30
                 	__PUTB1MN _step,1
                 ; 0000 0065     // Timer/Counter 0 initialization
                 ; 0000 0066     TCCR0A=TIMER0_PWM;
000253 eae1      	LDI  R30,LOW(161)
000254 bde4      	OUT  0x24,R30
                 ; 0000 0067     TCCR0B=PWM_DIV;
000255 e0e1      	LDI  R30,LOW(1)
000256 bde5      	OUT  0x25,R30
                 ; 0000 0068     TCNT0=0;
000257 e0e0      	LDI  R30,LOW(0)
000258 bde6      	OUT  0x26,R30
                 ; 0000 0069     // Timer/Counter 2 initialization
                 ; 0000 006A     TCCR2A=TIMER2_PWM;
000259 e8e1      	LDI  R30,LOW(129)
00025a 93e0 00b0 	STS  176,R30
                 ; 0000 006B     TCCR2B=PWM_DIV;
00025c e0e1      	LDI  R30,LOW(1)
00025d 93e0 00b1 	STS  177,R30
                 ; 0000 006C     TCNT2=0;
00025f e0e0      	LDI  R30,LOW(0)
000260 93e0 00b2 	STS  178,R30
                 ; 0000 006D     // Timer/Counter 1 initialization
                 ; 0000 006E     TCCR1A=0;
000262 93e0 0080 	STS  128,R30
                 ; 0000 006F     TCCR1B= TIMER1_DIV;
000264 e0e9      	LDI  R30,LOW(9)
000265 93e0 0081 	STS  129,R30
                 ; 0000 0070     TCNT1H=0; TCNT1L=0; ICR1H=0; ICR1L=0;
000267 e0e0      	LDI  R30,LOW(0)
000268 93e0 0085 	STS  133,R30
00026a 93e0 0084 	STS  132,R30
00026c 93e0 0087 	STS  135,R30
00026e 93e0 0086 	STS  134,R30
                 ; 0000 0071     // Timer/Counter 1 Interrupt(s) initialization
                 ; 0000 0072     TIMSK1=(1<<OCIE1A);
000270 e0e2      	LDI  R30,LOW(2)
000271 93e0 006f 	STS  111,R30
                 ; 0000 0073     #asm("sei")
000273 9478      	sei
                 ; 0000 0074     sinus_period(frequency);
000274 81a9      	LDD  R26,Y+1
000275 81ba      	LDD  R27,Y+1+1
000276 df7e      	RCALL _sinus_period
                 ; 0000 0075     sinus_amplitude(amplitude);
000277 81a8      	LD   R26,Y
000278 df8d      	RCALL _sinus_amplitude
                 ; 0000 0076 }
000279 9623      	ADIW R28,3
00027a 9508      	RET
                 ; .FEND
                 ;
                 ;interrupt [TIM1_COMPA] void timer1_compa_isr(void)
                 ; 0000 0079 {
                 _timer1_compa_isr:
                 ; .FSTART _timer1_compa_isr
00027b 920a      	ST   -Y,R0
00027c 921a      	ST   -Y,R1
00027d 936a      	ST   -Y,R22
00027e 93aa      	ST   -Y,R26
00027f 93ba      	ST   -Y,R27
000280 93ea      	ST   -Y,R30
000281 93fa      	ST   -Y,R31
000282 b7ef      	IN   R30,SREG
000283 93ea      	ST   -Y,R30
                 ; 0000 007A     /* For phase A */
                 ; 0000 007B    if (step[A] > N) {polarity[A] ^= 1; step[A] = 0;};
000284 91a0 0306 	LDS  R26,_step
000286 3ba6      	CPI  R26,LOW(0xB6)
000287 f048      	BRLO _0x8
000288 91a0 0300 	LDS  R26,_polarity
00028a e0e1      	LDI  R30,LOW(1)
00028b 27ea      	EOR  R30,R26
00028c 93e0 0300 	STS  _polarity,R30
00028e e0e0      	LDI  R30,LOW(0)
00028f 93e0 0306 	STS  _step,R30
                 _0x8:
                 ; 0000 007C    if (step[A] == DEAD_TIME || step[A] == N-DEAD_TIME) {polarity_not[A] ^= 1;};
000291 91a0 0306 	LDS  R26,_step
000293 30a0      	CPI  R26,LOW(0x0)
000294 f011      	BREQ _0xA
000295 3ba5      	CPI  R26,LOW(0xB5)
000296 f431      	BRNE _0x9
                 _0xA:
000297 91a0 0303 	LDS  R26,_polarity_not
000299 e0e1      	LDI  R30,LOW(1)
00029a 27ea      	EOR  R30,R26
00029b 93e0 0303 	STS  _polarity_not,R30
                 _0x9:
                 ; 0000 007D    step[A]++;
00029d 91e0 0306 	LDS  R30,_step
00029f 5fef      	SUBI R30,-LOW(1)
0002a0 93e0 0306 	STS  _step,R30
                 ; 0000 007E    OCR0A = polarity[A]*sinus[step[A]];
0002a2 d093      	RCALL SUBOPT_0x1
0002a3 91a0 0300 	LDS  R26,_polarity
0002a5 02ea      	MULS R30,R26
0002a6 01f0      	MOVW R30,R0
0002a7 bde7      	OUT  0x27,R30
                 ; 0000 007F    /* For phase B */
                 ; 0000 0080    if (phase_b_step < PHASE_B_DELAY) {phase_b_step++;} else {
0002a8 e3ec      	LDI  R30,LOW(60)
0002a9 164e      	CP   R4,R30
0002aa f410      	BRSH _0xC
0002ab 9443      	INC  R4
0002ac c023      	RJMP _0xD
                 _0xC:
                 ; 0000 0081        if (step[B] > N) {polarity[B] ^= 1; step[B] = 0;};
                +
0002ad 91a0 0307+LDS R26 , _step + ( 1 )
                 	__GETB2MN _step,1
0002af 3ba6      	CPI  R26,LOW(0xB6)
0002b0 f030      	BRLO _0xE
                +
0002b1 e0e1     +LDI R30 , LOW ( _polarity + ( 1 ) )
0002b2 e0f3     +LDI R31 , HIGH ( _polarity + ( 1 ) )
                 	__POINTW1MN _polarity,1
0002b3 d087      	RCALL SUBOPT_0x2
0002b4 e0e0      	LDI  R30,LOW(0)
                +
0002b5 93e0 0307+STS _step + ( 1 ) , R30
                 	__PUTB1MN _step,1
                 _0xE:
                 ; 0000 0082        if (step[B] == DEAD_TIME || step[B] == N-DEAD_TIME) {polarity_not[B] ^= 1;};
                +
0002b7 91a0 0307+LDS R26 , _step + ( 1 )
                 	__GETB2MN _step,1
0002b9 30a0      	CPI  R26,LOW(0x0)
0002ba f021      	BREQ _0x10
                +
0002bb 91a0 0307+LDS R26 , _step + ( 1 )
                 	__GETB2MN _step,1
0002bd 3ba5      	CPI  R26,LOW(0xB5)
0002be f419      	BRNE _0xF
                 _0x10:
                +
0002bf e0e4     +LDI R30 , LOW ( _polarity_not + ( 1 ) )
0002c0 e0f3     +LDI R31 , HIGH ( _polarity_not + ( 1 ) )
                 	__POINTW1MN _polarity_not,1
0002c1 d079      	RCALL SUBOPT_0x2
                 _0xF:
                 ; 0000 0083        step[B]++;
                +
0002c2 91e0 0307+LDS R30 , _step + ( 1 )
                 	__GETB1MN _step,1
0002c4 5fef      	SUBI R30,-LOW(1)
                +
0002c5 93e0 0307+STS _step + ( 1 ) , R30
                 	__PUTB1MN _step,1
                 ; 0000 0084        OCR2A = polarity[B]*sinus[step[B]];
                +
0002c7 91a0 0301+LDS R26 , _polarity + ( 1 )
                 	__GETB2MN _polarity,1
                +
0002c9 91e0 0307+LDS R30 , _step + ( 1 )
                 	__GETB1MN _step,1
0002cb d06a      	RCALL SUBOPT_0x1
0002cc 02ea      	MULS R30,R26
0002cd 01f0      	MOVW R30,R0
0002ce 93e0 00b3 	STS  179,R30
                 ; 0000 0085    }
                 _0xD:
                 ; 0000 0086    /* For phase C */
                 ; 0000 0087    if (phase_c_step < PHASE_C_DELAY) {phase_c_step++;} else {
0002d0 e7e8      	LDI  R30,LOW(120)
0002d1 163e      	CP   R3,R30
0002d2 f410      	BRSH _0x12
0002d3 9433      	INC  R3
0002d4 c022      	RJMP _0x13
                 _0x12:
                 ; 0000 0088        if (step[C] > N) {polarity[C] ^= 1; step[C] = 0;};
                +
0002d5 91a0 0308+LDS R26 , _step + ( 2 )
                 	__GETB2MN _step,2
0002d7 3ba6      	CPI  R26,LOW(0xB6)
0002d8 f030      	BRLO _0x14
                +
0002d9 e0e2     +LDI R30 , LOW ( _polarity + ( 2 ) )
0002da e0f3     +LDI R31 , HIGH ( _polarity + ( 2 ) )
                 	__POINTW1MN _polarity,2
0002db d05f      	RCALL SUBOPT_0x2
0002dc e0e0      	LDI  R30,LOW(0)
                +
0002dd 93e0 0308+STS _step + ( 2 ) , R30
                 	__PUTB1MN _step,2
                 _0x14:
                 ; 0000 0089        if (step[C] == DEAD_TIME || step[C] == N-DEAD_TIME) {polarity_not[C] ^= 1;};
                +
0002df 91a0 0308+LDS R26 , _step + ( 2 )
                 	__GETB2MN _step,2
0002e1 30a0      	CPI  R26,LOW(0x0)
0002e2 f021      	BREQ _0x16
                +
0002e3 91a0 0308+LDS R26 , _step + ( 2 )
                 	__GETB2MN _step,2
0002e5 3ba5      	CPI  R26,LOW(0xB5)
0002e6 f419      	BRNE _0x15
                 _0x16:
                +
0002e7 e0e5     +LDI R30 , LOW ( _polarity_not + ( 2 ) )
0002e8 e0f3     +LDI R31 , HIGH ( _polarity_not + ( 2 ) )
                 	__POINTW1MN _polarity_not,2
0002e9 d051      	RCALL SUBOPT_0x2
                 _0x15:
                 ; 0000 008A        step[C]++;
                +
0002ea 91e0 0308+LDS R30 , _step + ( 2 )
                 	__GETB1MN _step,2
0002ec 5fef      	SUBI R30,-LOW(1)
                +
0002ed 93e0 0308+STS _step + ( 2 ) , R30
                 	__PUTB1MN _step,2
                 ; 0000 008B        OCR0B = polarity[C]*sinus[step[C]];
                +
0002ef 91a0 0302+LDS R26 , _polarity + ( 2 )
                 	__GETB2MN _polarity,2
                +
0002f1 91e0 0308+LDS R30 , _step + ( 2 )
                 	__GETB1MN _step,2
0002f3 d042      	RCALL SUBOPT_0x1
0002f4 02ea      	MULS R30,R26
0002f5 01f0      	MOVW R30,R0
0002f6 bde8      	OUT  0x28,R30
                 ; 0000 008C    }
                 _0x13:
                 ; 0000 008D    /* Inverted phases */
                 ; 0000 008E    PORTC =((polarity[A]*polarity_not[A]) << PHASE_NOT_A_PIN) | ((polarity[B]*polarity_not[B]) << PHASE_NOT_B_PIN) | ((po ...
0002f7 91e0 0303 	LDS  R30,_polarity_not
0002f9 91a0 0300 	LDS  R26,_polarity
0002fb 02ea      	MULS R30,R26
0002fc 2d60      	MOV  R22,R0
                +
0002fd 91a0 0301+LDS R26 , _polarity + ( 1 )
                 	__GETB2MN _polarity,1
                +
0002ff 91e0 0304+LDS R30 , _polarity_not + ( 1 )
                 	__GETB1MN _polarity_not,1
000301 02ea      	MULS R30,R26
000302 01f0      	MOVW R30,R0
000303 0fee      	LSL  R30
000304 2b6e      	OR   R22,R30
                +
000305 91a0 0302+LDS R26 , _polarity + ( 2 )
                 	__GETB2MN _polarity,2
                +
000307 91e0 0305+LDS R30 , _polarity_not + ( 2 )
                 	__GETB1MN _polarity_not,2
000309 02ea      	MULS R30,R26
00030a 01f0      	MOVW R30,R0
00030b 0fee      	LSL  R30
00030c 0fee      	LSL  R30
00030d 2be6      	OR   R30,R22
00030e b9e8      	OUT  0x8,R30
                 ; 0000 008F }
00030f 91e9      	LD   R30,Y+
000310 bfef      	OUT  SREG,R30
000311 91f9      	LD   R31,Y+
000312 91e9      	LD   R30,Y+
000313 91b9      	LD   R27,Y+
000314 91a9      	LD   R26,Y+
000315 9169      	LD   R22,Y+
000316 9019      	LD   R1,Y+
000317 9009      	LD   R0,Y+
000318 9518      	RETI
                 ; .FEND
                 ;
                 ;
                 ;void invertor_setup() {
                 ; 0000 0092 void invertor_setup() {
                 _invertor_setup:
                 ; .FSTART _invertor_setup
                 ; 0000 0093     // Crystal Oscillator division factor: 1
                 ; 0000 0094     #pragma optsize-
                 ; 0000 0095     CLKPR=(1<<CLKPCE);
000319 e8e0      	LDI  R30,LOW(128)
00031a 93e0 0061 	STS  97,R30
                 ; 0000 0096     CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
00031c e0e0      	LDI  R30,LOW(0)
00031d 93e0 0061 	STS  97,R30
                 ; 0000 0097     #ifdef _OPTIMIZE_SIZE_
                 ; 0000 0098     #pragma optsize+
                 ; 0000 0099     #endif
                 ; 0000 009A     ACSR=(1<<ACD);
00031f e8e0      	LDI  R30,LOW(128)
000320 bfe0      	OUT  0x30,R30
                 ; 0000 009B     // Ports init
                 ; 0000 009C     DDRC=(1<<PHASE_NOT_A_PIN) |(1<<PHASE_NOT_B_PIN) | (1<<PHASE_NOT_C_PIN);
000321 e0e7      	LDI  R30,LOW(7)
000322 b9e7      	OUT  0x7,R30
                 ; 0000 009D     DDRD=(1<<PHASE_A_PIN) | (1<<PHASE_B_PIN);
000323 e6e0      	LDI  R30,LOW(96)
000324 b9ea      	OUT  0xA,R30
                 ; 0000 009E     DDRB=(1<<PHASE_C_PIN);
000325 e0e8      	LDI  R30,LOW(8)
000326 b9e4      	OUT  0x4,R30
                 ; 0000 009F     start_PWM(frequency, amplitude);
000327 928a      	ST   -Y,R8
000328 927a      	ST   -Y,R7
000329 2da6      	MOV  R26,R6
00032a df11      	RCALL _start_PWM
                 ; 0000 00A0 }
00032b 9508      	RET
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 00A3 {
                 _main:
                 ; .FSTART _main
                 ; 0000 00A4  invertor_setup();
00032c dfec      	RCALL _invertor_setup
                 ; 0000 00A5 while (1)
                 _0x18:
                 ; 0000 00A6       {
                 ; 0000 00A7       }
00032d cfff      	RJMP _0x18
                 ; 0000 00A8 }
                 _0x1B:
00032e cfff      	RJMP _0x1B
                 ; .FEND
                 
                 	.DSEG
                 _polarity:
000300           	.BYTE 0x3
                 _polarity_not:
000303           	.BYTE 0x3
                 _step:
000306           	.BYTE 0x3
                 _sinus:
000309           	.BYTE 0xB6
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
00032f 81e8      	LD   R30,Y
000330 81f9      	LDD  R31,Y+1
000331 ebae      	LDI  R26,LOW(21950)
000332 e5b5      	LDI  R27,HIGH(21950)
000333 940e 0436 	CALL __DIVW21U
000335 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
000336 e0f0      	LDI  R31,0
000337 5fe7      	SUBI R30,LOW(-_sinus)
000338 4ffc      	SBCI R31,HIGH(-_sinus)
000339 81e0      	LD   R30,Z
00033a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x2:
00033b 010f      	MOVW R0,R30
00033c 81a0      	LD   R26,Z
00033d e0e1      	LDI  R30,LOW(1)
00033e 27ea      	EOR  R30,R26
00033f 01d0      	MOVW R26,R0
000340 93ec      	ST   X,R30
000341 9508      	RET
                 
                 
                 	.CSEG
                 __ROUND_REPACK:
000342 2355      	TST  R21
000343 f442      	BRPL __REPACK
000344 3850      	CPI  R21,0x80
000345 f411      	BRNE __ROUND_REPACK0
000346 ffe0      	SBRS R30,0
000347 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000348 9631      	ADIW R30,1
000349 1f69      	ADC  R22,R25
00034a 1f79      	ADC  R23,R25
00034b f06b      	BRVS __REPACK1
                 
                 __REPACK:
00034c e850      	LDI  R21,0x80
00034d 2757      	EOR  R21,R23
00034e f411      	BRNE __REPACK0
00034f 935f      	PUSH R21
000350 c073      	RJMP __ZERORES
                 __REPACK0:
000351 3f5f      	CPI  R21,0xFF
000352 f031      	BREQ __REPACK1
000353 0f66      	LSL  R22
000354 0c00      	LSL  R0
000355 9557      	ROR  R21
000356 9567      	ROR  R22
000357 2f75      	MOV  R23,R21
000358 9508      	RET
                 __REPACK1:
000359 935f      	PUSH R21
00035a 2000      	TST  R0
00035b f00a      	BRMI __REPACK2
00035c c073      	RJMP __MAXRES
                 __REPACK2:
00035d c06c      	RJMP __MINRES
                 
                 __UNPACK:
00035e e850      	LDI  R21,0x80
00035f 2e19      	MOV  R1,R25
000360 2215      	AND  R1,R21
000361 0f88      	LSL  R24
000362 1f99      	ROL  R25
000363 2795      	EOR  R25,R21
000364 0f55      	LSL  R21
000365 9587      	ROR  R24
                 
                 __UNPACK1:
000366 e850      	LDI  R21,0x80
000367 2e07      	MOV  R0,R23
000368 2205      	AND  R0,R21
000369 0f66      	LSL  R22
00036a 1f77      	ROL  R23
00036b 2775      	EOR  R23,R21
00036c 0f55      	LSL  R21
00036d 9567      	ROR  R22
00036e 9508      	RET
                 
                 __CFD1U:
00036f 9468      	SET
000370 c001      	RJMP __CFD1U0
                 __CFD1:
000371 94e8      	CLT
                 __CFD1U0:
000372 935f      	PUSH R21
000373 dff2      	RCALL __UNPACK1
000374 3870      	CPI  R23,0x80
000375 f018      	BRLO __CFD10
000376 3f7f      	CPI  R23,0xFF
000377 f408      	BRCC __CFD10
000378 c04b      	RJMP __ZERORES
                 __CFD10:
000379 e156      	LDI  R21,22
00037a 1b57      	SUB  R21,R23
00037b f4aa      	BRPL __CFD11
00037c 9551      	NEG  R21
00037d 3058      	CPI  R21,8
00037e f40e      	BRTC __CFD19
00037f 3059      	CPI  R21,9
                 __CFD19:
000380 f030      	BRLO __CFD17
000381 efef      	SER  R30
000382 efff      	SER  R31
000383 ef6f      	SER  R22
000384 e77f      	LDI  R23,0x7F
000385 f977      	BLD  R23,7
000386 c01a      	RJMP __CFD15
                 __CFD17:
000387 2777      	CLR  R23
000388 2355      	TST  R21
000389 f0b9      	BREQ __CFD15
                 __CFD18:
00038a 0fee      	LSL  R30
00038b 1fff      	ROL  R31
00038c 1f66      	ROL  R22
00038d 1f77      	ROL  R23
00038e 955a      	DEC  R21
00038f f7d1      	BRNE __CFD18
000390 c010      	RJMP __CFD15
                 __CFD11:
000391 2777      	CLR  R23
                 __CFD12:
000392 3058      	CPI  R21,8
000393 f028      	BRLO __CFD13
000394 2fef      	MOV  R30,R31
000395 2ff6      	MOV  R31,R22
000396 2f67      	MOV  R22,R23
000397 5058      	SUBI R21,8
000398 cff9      	RJMP __CFD12
                 __CFD13:
000399 2355      	TST  R21
00039a f031      	BREQ __CFD15
                 __CFD14:
00039b 9576      	LSR  R23
00039c 9567      	ROR  R22
00039d 95f7      	ROR  R31
00039e 95e7      	ROR  R30
00039f 955a      	DEC  R21
0003a0 f7d1      	BRNE __CFD14
                 __CFD15:
0003a1 2000      	TST  R0
0003a2 f40a      	BRPL __CFD16
0003a3 d080      	RCALL __ANEGD1
                 __CFD16:
0003a4 915f      	POP  R21
0003a5 9508      	RET
                 
                 __CDF1U:
0003a6 9468      	SET
0003a7 c001      	RJMP __CDF1U0
                 __CDF1:
0003a8 94e8      	CLT
                 __CDF1U0:
0003a9 9730      	SBIW R30,0
0003aa 4060      	SBCI R22,0
0003ab 4070      	SBCI R23,0
0003ac f0b1      	BREQ __CDF10
0003ad 2400      	CLR  R0
0003ae f026      	BRTS __CDF11
0003af 2377      	TST  R23
0003b0 f412      	BRPL __CDF11
0003b1 9400      	COM  R0
0003b2 d071      	RCALL __ANEGD1
                 __CDF11:
0003b3 2e17      	MOV  R1,R23
0003b4 e17e      	LDI  R23,30
0003b5 2011      	TST  R1
                 __CDF12:
0003b6 f032      	BRMI __CDF13
0003b7 957a      	DEC  R23
0003b8 0fee      	LSL  R30
0003b9 1fff      	ROL  R31
0003ba 1f66      	ROL  R22
0003bb 1c11      	ROL  R1
0003bc cff9      	RJMP __CDF12
                 __CDF13:
0003bd 2fef      	MOV  R30,R31
0003be 2ff6      	MOV  R31,R22
0003bf 2d61      	MOV  R22,R1
0003c0 935f      	PUSH R21
0003c1 df8a      	RCALL __REPACK
0003c2 915f      	POP  R21
                 __CDF10:
0003c3 9508      	RET
                 
                 __ZERORES:
0003c4 27ee      	CLR  R30
0003c5 27ff      	CLR  R31
0003c6 2766      	CLR  R22
0003c7 2777      	CLR  R23
0003c8 915f      	POP  R21
0003c9 9508      	RET
                 
                 __MINRES:
0003ca efef      	SER  R30
0003cb efff      	SER  R31
0003cc e76f      	LDI  R22,0x7F
0003cd ef7f      	SER  R23
0003ce 915f      	POP  R21
0003cf 9508      	RET
                 
                 __MAXRES:
0003d0 efef      	SER  R30
0003d1 efff      	SER  R31
0003d2 e76f      	LDI  R22,0x7F
0003d3 e77f      	LDI  R23,0x7F
0003d4 915f      	POP  R21
0003d5 9508      	RET
                 
                 __MULF12:
0003d6 935f      	PUSH R21
0003d7 df86      	RCALL __UNPACK
0003d8 3870      	CPI  R23,0x80
0003d9 f351      	BREQ __ZERORES
0003da 3890      	CPI  R25,0x80
0003db f341      	BREQ __ZERORES
0003dc 2401      	EOR  R0,R1
0003dd 9408      	SEC
0003de 1f79      	ADC  R23,R25
0003df f423      	BRVC __MULF124
0003e0 f31c      	BRLT __ZERORES
                 __MULF125:
0003e1 2000      	TST  R0
0003e2 f33a      	BRMI __MINRES
0003e3 cfec      	RJMP __MAXRES
                 __MULF124:
0003e4 920f      	PUSH R0
0003e5 931f      	PUSH R17
0003e6 932f      	PUSH R18
0003e7 933f      	PUSH R19
0003e8 934f      	PUSH R20
0003e9 2711      	CLR  R17
0003ea 2722      	CLR  R18
0003eb 2799      	CLR  R25
0003ec 9f68      	MUL  R22,R24
0003ed 01a0      	MOVW R20,R0
0003ee 9f8f      	MUL  R24,R31
0003ef 2d30      	MOV  R19,R0
0003f0 0d41      	ADD  R20,R1
0003f1 1f59      	ADC  R21,R25
0003f2 9f6b      	MUL  R22,R27
0003f3 0d30      	ADD  R19,R0
0003f4 1d41      	ADC  R20,R1
0003f5 1f59      	ADC  R21,R25
0003f6 9f8e      	MUL  R24,R30
0003f7 d027      	RCALL __MULF126
0003f8 9fbf      	MUL  R27,R31
0003f9 d025      	RCALL __MULF126
0003fa 9f6a      	MUL  R22,R26
0003fb d023      	RCALL __MULF126
0003fc 9fbe      	MUL  R27,R30
0003fd d01d      	RCALL __MULF127
0003fe 9faf      	MUL  R26,R31
0003ff d01b      	RCALL __MULF127
000400 9fae      	MUL  R26,R30
000401 0d11      	ADD  R17,R1
000402 1f29      	ADC  R18,R25
000403 1f39      	ADC  R19,R25
000404 1f49      	ADC  R20,R25
000405 1f59      	ADC  R21,R25
000406 2fe3      	MOV  R30,R19
000407 2ff4      	MOV  R31,R20
000408 2f65      	MOV  R22,R21
000409 2f52      	MOV  R21,R18
00040a 914f      	POP  R20
00040b 913f      	POP  R19
00040c 912f      	POP  R18
00040d 911f      	POP  R17
00040e 900f      	POP  R0
00040f 2366      	TST  R22
000410 f02a      	BRMI __MULF122
000411 0f55      	LSL  R21
000412 1fee      	ROL  R30
000413 1fff      	ROL  R31
000414 1f66      	ROL  R22
000415 c002      	RJMP __MULF123
                 __MULF122:
000416 9573      	INC  R23
000417 f24b      	BRVS __MULF125
                 __MULF123:
000418 df29      	RCALL __ROUND_REPACK
000419 915f      	POP  R21
00041a 9508      	RET
                 
                 __MULF127:
00041b 0d10      	ADD  R17,R0
00041c 1d21      	ADC  R18,R1
00041d 1f39      	ADC  R19,R25
00041e c002      	RJMP __MULF128
                 __MULF126:
00041f 0d20      	ADD  R18,R0
000420 1d31      	ADC  R19,R1
                 __MULF128:
000421 1f49      	ADC  R20,R25
000422 1f59      	ADC  R21,R25
000423 9508      	RET
                 
                 __ANEGD1:
000424 95f0      	COM  R31
000425 9560      	COM  R22
000426 9570      	COM  R23
000427 95e1      	NEG  R30
000428 4fff      	SBCI R31,-1
000429 4f6f      	SBCI R22,-1
00042a 4f7f      	SBCI R23,-1
00042b 9508      	RET
                 
                 __LSLW2:
00042c 0fee      	LSL  R30
00042d 1fff      	ROL  R31
00042e 0fee      	LSL  R30
00042f 1fff      	ROL  R31
000430 9508      	RET
                 
                 __CWD1:
000431 2f6f      	MOV  R22,R31
000432 0f66      	ADD  R22,R22
000433 0b66      	SBC  R22,R22
000434 2f76      	MOV  R23,R22
000435 9508      	RET
                 
                 __DIVW21U:
000436 2400      	CLR  R0
000437 2411      	CLR  R1
000438 e190      	LDI  R25,16
                 __DIVW21U1:
000439 0faa      	LSL  R26
00043a 1fbb      	ROL  R27
00043b 1c00      	ROL  R0
00043c 1c11      	ROL  R1
00043d 1a0e      	SUB  R0,R30
00043e 0a1f      	SBC  R1,R31
00043f f418      	BRCC __DIVW21U2
000440 0e0e      	ADD  R0,R30
000441 1e1f      	ADC  R1,R31
000442 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000443 60a1      	SBR  R26,1
                 __DIVW21U3:
000444 959a      	DEC  R25
000445 f799      	BRNE __DIVW21U1
000446 01fd      	MOVW R30,R26
000447 01d0      	MOVW R26,R0
000448 9508      	RET
                 
                 __GETD1PF:
000449 9005      	LPM  R0,Z+
00044a 9015      	LPM  R1,Z+
00044b 9165      	LPM  R22,Z+
00044c 9174      	LPM  R23,Z
00044d 01f0      	MOVW R30,R0
00044e 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega328P register use summary:
r0 :  37 r1 :  20 r2 :   0 r3 :   2 r4 :   2 r5 :   0 r6 :   1 r7 :   1 
r8 :   1 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   0 r17:  13 r18:   7 r19:   8 r20:   8 r21:  44 r22:  40 r23:  32 
r24:  14 r25:  23 r26:  60 r27:  17 r28:   3 r29:   1 r30: 184 r31:  45 
x  :   5 y  :  32 z  :  13 
Registers used: 25 out of 35 (71.4%)

ATmega328P instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  17 add   :   8 
adiw  :   3 and   :   2 andi  :   0 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   2 brcs  :   0 break :   0 breq  :  11 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   6 
brlt  :   1 brmi  :   4 brne  :  11 brpl  :   4 brsh  :   3 brtc  :   1 
brts  :   1 brvc  :   1 brvs  :   2 bset  :   0 bst   :   0 call  :   8 
cbi   :   0 cbr   :   0 clc   :   0 clh   :   0 cli   :   2 cln   :   0 
clr   :  14 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   4 
cp    :   2 cpc   :   0 cpi   :  19 cpse  :   0 dec   :   5 des   :   0 
eor   :   7 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   1 inc   :   3 jmp   :  27 ld    :  13 ldd   :   6 ldi   :  77 
lds   :  24 lpm   :  12 lsl   :  15 lsr   :   1 mov   :  22 movw  :  14 
mul   :   9 muls  :   6 mulsu :   0 neg   :   2 nop   :   0 or    :   2 
ori   :   0 out   :  23 pop   :  17 push  :  16 rcall :  26 ret   :  22 
reti  :   1 rjmp  :  23 rol   :  16 ror   :   7 sbc   :   2 sbci  :   7 
sbi   :   0 sbic  :   0 sbis  :   0 sbiw  :   5 sbr   :   1 sbrc  :   0 
sbrs  :   1 sec   :   1 seh   :   0 sei   :   1 sen   :   0 ser   :   8 
ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  20 std   :   0 sts   :  41 sub   :   2 subi  :   7 swap  :   0 
tst   :   9 wdr   :   0 
Instructions used: 65 out of 116 (56.0%)

ATmega328P memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00089e   1464    742   2206   32768   6.7%
[.dseg] 0x000100 0x0003bf      0    191    191    2048   9.3%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 5 warnings
