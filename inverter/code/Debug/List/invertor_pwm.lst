
AVRASM ver. 2.1.30  D:\Студенческое\Системы управления преобразователями\code\Debug\List\invertor_pwm.asm Fri Mar 20 10:23:00 2020

D:\Студенческое\Системы управления преобразователями\code\Debug\List\invertor_pwm.asm(1090): warning: Register r4 already defined by the .DEF directive
D:\Студенческое\Системы управления преобразователями\code\Debug\List\invertor_pwm.asm(1091): warning: Register r3 already defined by the .DEF directive
D:\Студенческое\Системы управления преобразователями\code\Debug\List\invertor_pwm.asm(1092): warning: Register r6 already defined by the .DEF directive
D:\Студенческое\Системы управления преобразователями\code\Debug\List\invertor_pwm.asm(1093): warning: Register r5 already defined by the .DEF directive
D:\Студенческое\Системы управления преобразователями\code\Debug\List\invertor_pwm.asm(1094): warning: Register r7 already defined by the .DEF directive
D:\Студенческое\Системы управления преобразователями\code\Debug\List\invertor_pwm.asm(1095): warning: Register r8 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega328P
                 ;Program type           : Application
                 ;Clock frequency        : 12,000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega328P
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x08FF
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _ADC_input=R4
                 	.DEF _phase_b_step=R3
                 	.DEF _phase_c_step=R6
                 	.DEF _amplitude=R5
                 	.DEF _frequency=R7
                 	.DEF _frequency_msb=R8
                 
                 ;GPIOR0 INITIALIZATION VALUE
                 	.EQU __GPIOR0_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 01a7 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 026f 	JMP  _timer1_compa_isr
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 031f 	JMP  _adc_isr
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
                 
                 _sinus_table:
000034 0000
000035 0000
000036 5c29
000037 3c8f      	.DB  0x0,0x0,0x0,0x0,0x29,0x5C,0x8F,0x3C
000038 5c29
000039 3d0f
00003a fdf4
00003b 3d54      	.DB  0x29,0x5C,0xF,0x3D,0xF4,0xFD,0x54,0x3D
00003c f34d
00003d 3d8e
00003e 2d0e
00003f 3db2      	.DB  0x4D,0xF3,0x8E,0x3D,0xE,0x2D,0xB2,0x3D
000040 0a3d
000041 3dd7
000042 db23
000043 3df9      	.DB  0x3D,0xA,0xD7,0x3D,0x23,0xDB,0xF9,0x3D
000044 5604
000045 3e0e
000046 be77
000047 3e1f      	.DB  0x4,0x56,0xE,0x3E,0x77,0xBE,0x1F,0x3E
000048 2d0e
000049 3e32
00004a 9581
00004b 3e43      	.DB  0xE,0x2D,0x32,0x3E,0x81,0x95,0x43,0x3E
00004c fdf4
00004d 3e54
00004e 6666
00004f 3e66      	.DB  0xF4,0xFD,0x54,0x3E,0x66,0x66,0x66,0x3E
000050 ced9
000051 3e77
000052 9ba6
000053 3e84      	.DB  0xD9,0xCE,0x77,0x3E,0xA6,0x9B,0x84,0x3E
000054 4fdf
000055 3e8d
000056 8106
000057 3e95      	.DB  0xDF,0x4F,0x8D,0x3E,0x6,0x81,0x95,0x3E
000058 353f
000059 3e9e
00005a e979
00005b 3ea6      	.DB  0x3F,0x35,0x9E,0x3E,0x79,0xE9,0xA6,0x3E
00005c 1aa0
00005d 3eaf
00005e 4bc7
00005f 3eb7      	.DB  0xA0,0x1A,0xAF,0x3E,0xC7,0x4B,0xB7,0x3E
000060 0000
000061 3ec0
000062 3127
000063 3ec8      	.DB  0x0,0x0,0xC0,0x3E,0x27,0x31,0xC8,0x3E
000064 624e
000065 3ed0
000066 9375
000067 3ed8      	.DB  0x4E,0x62,0xD0,0x3E,0x75,0x93,0xD8,0x3E
000068 4189
000069 3ee0
00006a 72b0
00006b 3ee8      	.DB  0x89,0x41,0xE0,0x3E,0xB0,0x72,0xE8,0x3E
00006c 20c5
00006d 3ef0
00006e 51ec
00006f 3ef8      	.DB  0xC5,0x20,0xF0,0x3E,0xEC,0x51,0xF8,0x3E
000070 0000
000071 3f00
000072 d70a
000073 3f03      	.DB  0x0,0x0,0x0,0x3F,0xA,0xD7,0x3,0x3F
000074 ae14
000075 3f07
000076 851f
000077 3f0b      	.DB  0x14,0xAE,0x7,0x3F,0x1F,0x85,0xB,0x3F
000078 1aa0
000079 3f0f
00007a f1aa
00007b 3f12      	.DB  0xA0,0x1A,0xF,0x3F,0xAA,0xF1,0x12,0x3F
00007c 872b
00007d 3f16
00007e 1cac
00007f 3f1a      	.DB  0x2B,0x87,0x16,0x3F,0xAC,0x1C,0x1A,0x3F
000080 b22d
000081 3f1d
000082 0625
000083 3f21      	.DB  0x2D,0xB2,0x1D,0x3F,0x25,0x6,0x21,0x3F
000084 9ba6
000085 3f24
000086 ef9e
000087 3f27      	.DB  0xA6,0x9B,0x24,0x3F,0x9E,0xEF,0x27,0x3F
000088 4396
000089 3f2b
00008a 978d
00008b 3f2e      	.DB  0x96,0x43,0x2B,0x3F,0x8D,0x97,0x2E,0x3F
00008c eb85
00008d 3f31
00008e fdf4
00008f 3f34      	.DB  0x85,0xEB,0x31,0x3F,0xF4,0xFD,0x34,0x3F
000090 1062
000091 3f38
000092 22d1
000093 3f3b      	.DB  0x62,0x10,0x38,0x3F,0xD1,0x22,0x3B,0x3F
000094 353f
000095 3f3e
000096 47ae
000097 3f41      	.DB  0x3F,0x35,0x3E,0x3F,0xAE,0x47,0x41,0x3F
000098 1893
000099 3f44
00009a e979
00009b 3f46      	.DB  0x93,0x18,0x44,0x3F,0x79,0xE9,0x46,0x3F
00009c ba5e
00009d 3f49
00009e 8b44
00009f 3f4c      	.DB  0x5E,0xBA,0x49,0x3F,0x44,0x8B,0x4C,0x3F
0000a0 1aa0
0000a1 3f4f
0000a2 a9fc
0000a3 3f51      	.DB  0xA0,0x1A,0x4F,0x3F,0xFC,0xA9,0x51,0x3F
0000a4 3958
0000a5 3f54
0000a6 c8b4
0000a7 3f56      	.DB  0x58,0x39,0x54,0x3F,0xB4,0xC8,0x56,0x3F
0000a8 1687
0000a9 3f59
0000aa 645a
0000ab 3f5b      	.DB  0x87,0x16,0x59,0x3F,0x5A,0x64,0x5B,0x3F
0000ac b22d
0000ad 3f5d
0000ae 0000
0000af 3f60      	.DB  0x2D,0xB2,0x5D,0x3F,0x0,0x0,0x60,0x3F
0000b0 0c4a
0000b1 3f62
0000b2 1893
0000b3 3f64      	.DB  0x4A,0xC,0x62,0x3F,0x93,0x18,0x64,0x3F
0000b4 24dd
0000b5 3f66
0000b6 ef9e
0000b7 3f67      	.DB  0xDD,0x24,0x66,0x3F,0x9E,0xEF,0x67,0x3F
0000b8 fbe7
0000b9 3f69
0000ba c6a8
0000bb 3f6b      	.DB  0xE7,0xFB,0x69,0x3F,0xA8,0xC6,0x6B,0x3F
0000bc 4fdf
0000bd 3f6d
0000be 1aa0
0000bf 3f6f      	.DB  0xDF,0x4F,0x6D,0x3F,0xA0,0x1A,0x6F,0x3F
0000c0 a3d7
0000c1 3f70
0000c2 2d0e
0000c3 3f72      	.DB  0xD7,0xA3,0x70,0x3F,0xE,0x2D,0x72,0x3F
0000c4 74bc
0000c5 3f73
0000c6 bc6a
0000c7 3f74      	.DB  0xBC,0x74,0x73,0x3F,0x6A,0xBC,0x74,0x3F
0000c8 0419
0000c9 3f76
0000ca 4bc7
0000cb 3f77      	.DB  0x19,0x4,0x76,0x3F,0xC7,0x4B,0x77,0x3F
0000cc 51ec
0000cd 3f78
0000ce 5810
0000cf 3f79      	.DB  0xEC,0x51,0x78,0x3F,0x10,0x58,0x79,0x3F
0000d0 5e35
0000d1 3f7a
0000d2 645a
0000d3 3f7b      	.DB  0x35,0x5E,0x7A,0x3F,0x5A,0x64,0x7B,0x3F
0000d4 28f6
0000d5 3f7c
0000d6 ed91
0000d7 3f7c      	.DB  0xF6,0x28,0x7C,0x3F,0x91,0xED,0x7C,0x3F
0000d8 70a4
0000d9 3f7d
0000da 353f
0000db 3f7e      	.DB  0xA4,0x70,0x7D,0x3F,0x3F,0x35,0x7E,0x3F
0000dc b852
0000dd 3f7e
0000de f9db
0000df 3f7e      	.DB  0x52,0xB8,0x7E,0x3F,0xDB,0xF9,0x7E,0x3F
0000e0 7cee
0000e1 3f7f
0000e2 be77
0000e3 3f7f      	.DB  0xEE,0x7C,0x7F,0x3F,0x77,0xBE,0x7F,0x3F
0000e4 be77
0000e5 3f7f
0000e6 0000
0000e7 3f80      	.DB  0x77,0xBE,0x7F,0x3F,0x0,0x0,0x80,0x3F
0000e8 0000
0000e9 3f80
0000ea 0000
0000eb 3f80      	.DB  0x0,0x0,0x80,0x3F,0x0,0x0,0x80,0x3F
0000ec be77
0000ed 3f7f
0000ee be77
0000ef 3f7f      	.DB  0x77,0xBE,0x7F,0x3F,0x77,0xBE,0x7F,0x3F
0000f0 7cee
0000f1 3f7f
0000f2 f9db
0000f3 3f7e      	.DB  0xEE,0x7C,0x7F,0x3F,0xDB,0xF9,0x7E,0x3F
0000f4 b852
0000f5 3f7e
0000f6 353f
0000f7 3f7e      	.DB  0x52,0xB8,0x7E,0x3F,0x3F,0x35,0x7E,0x3F
0000f8 70a4
0000f9 3f7d
0000fa ed91
0000fb 3f7c      	.DB  0xA4,0x70,0x7D,0x3F,0x91,0xED,0x7C,0x3F
0000fc 28f6
0000fd 3f7c
0000fe 645a
0000ff 3f7b      	.DB  0xF6,0x28,0x7C,0x3F,0x5A,0x64,0x7B,0x3F
000100 5e35
000101 3f7a
000102 5810
000103 3f79      	.DB  0x35,0x5E,0x7A,0x3F,0x10,0x58,0x79,0x3F
000104 51ec
000105 3f78
000106 4bc7
000107 3f77      	.DB  0xEC,0x51,0x78,0x3F,0xC7,0x4B,0x77,0x3F
000108 0419
000109 3f76
00010a bc6a
00010b 3f74      	.DB  0x19,0x4,0x76,0x3F,0x6A,0xBC,0x74,0x3F
00010c 74bc
00010d 3f73
00010e 2d0e
00010f 3f72      	.DB  0xBC,0x74,0x73,0x3F,0xE,0x2D,0x72,0x3F
000110 a3d7
000111 3f70
000112 1aa0
000113 3f6f      	.DB  0xD7,0xA3,0x70,0x3F,0xA0,0x1A,0x6F,0x3F
000114 4fdf
000115 3f6d
000116 c6a8
000117 3f6b      	.DB  0xDF,0x4F,0x6D,0x3F,0xA8,0xC6,0x6B,0x3F
000118 fbe7
000119 3f69
00011a ef9e
00011b 3f67      	.DB  0xE7,0xFB,0x69,0x3F,0x9E,0xEF,0x67,0x3F
00011c 24dd
00011d 3f66
00011e 1893
00011f 3f64      	.DB  0xDD,0x24,0x66,0x3F,0x93,0x18,0x64,0x3F
000120 0c4a
000121 3f62
000122 0000
000123 3f60      	.DB  0x4A,0xC,0x62,0x3F,0x0,0x0,0x60,0x3F
000124 b22d
000125 3f5d
000126 645a
000127 3f5b      	.DB  0x2D,0xB2,0x5D,0x3F,0x5A,0x64,0x5B,0x3F
000128 1687
000129 3f59
00012a c8b4
00012b 3f56      	.DB  0x87,0x16,0x59,0x3F,0xB4,0xC8,0x56,0x3F
00012c 3958
00012d 3f54
00012e a9fc
00012f 3f51      	.DB  0x58,0x39,0x54,0x3F,0xFC,0xA9,0x51,0x3F
000130 1aa0
000131 3f4f
000132 8b44
000133 3f4c      	.DB  0xA0,0x1A,0x4F,0x3F,0x44,0x8B,0x4C,0x3F
000134 ba5e
000135 3f49
000136 e979
000137 3f46      	.DB  0x5E,0xBA,0x49,0x3F,0x79,0xE9,0x46,0x3F
000138 1893
000139 3f44
00013a 47ae
00013b 3f41      	.DB  0x93,0x18,0x44,0x3F,0xAE,0x47,0x41,0x3F
00013c 353f
00013d 3f3e
00013e 22d1
00013f 3f3b      	.DB  0x3F,0x35,0x3E,0x3F,0xD1,0x22,0x3B,0x3F
000140 1062
000141 3f38
000142 fdf4
000143 3f34      	.DB  0x62,0x10,0x38,0x3F,0xF4,0xFD,0x34,0x3F
000144 eb85
000145 3f31
000146 978d
000147 3f2e      	.DB  0x85,0xEB,0x31,0x3F,0x8D,0x97,0x2E,0x3F
000148 4396
000149 3f2b
00014a ef9e
00014b 3f27      	.DB  0x96,0x43,0x2B,0x3F,0x9E,0xEF,0x27,0x3F
00014c 9ba6
00014d 3f24
00014e 0625
00014f 3f21      	.DB  0xA6,0x9B,0x24,0x3F,0x25,0x6,0x21,0x3F
000150 b22d
000151 3f1d
000152 1cac
000153 3f1a      	.DB  0x2D,0xB2,0x1D,0x3F,0xAC,0x1C,0x1A,0x3F
000154 872b
000155 3f16
000156 f1aa
000157 3f12      	.DB  0x2B,0x87,0x16,0x3F,0xAA,0xF1,0x12,0x3F
000158 1aa0
000159 3f0f
00015a 851f
00015b 3f0b      	.DB  0xA0,0x1A,0xF,0x3F,0x1F,0x85,0xB,0x3F
00015c ae14
00015d 3f07
00015e d70a
00015f 3f03      	.DB  0x14,0xAE,0x7,0x3F,0xA,0xD7,0x3,0x3F
000160 0000
000161 3f00
000162 51ec
000163 3ef8      	.DB  0x0,0x0,0x0,0x3F,0xEC,0x51,0xF8,0x3E
000164 20c5
000165 3ef0
000166 72b0
000167 3ee8      	.DB  0xC5,0x20,0xF0,0x3E,0xB0,0x72,0xE8,0x3E
000168 4189
000169 3ee0
00016a 9375
00016b 3ed8      	.DB  0x89,0x41,0xE0,0x3E,0x75,0x93,0xD8,0x3E
00016c 624e
00016d 3ed0
00016e 3127
00016f 3ec8      	.DB  0x4E,0x62,0xD0,0x3E,0x27,0x31,0xC8,0x3E
000170 0000
000171 3ec0
000172 4bc7
000173 3eb7      	.DB  0x0,0x0,0xC0,0x3E,0xC7,0x4B,0xB7,0x3E
000174 1aa0
000175 3eaf
000176 e979
000177 3ea6      	.DB  0xA0,0x1A,0xAF,0x3E,0x79,0xE9,0xA6,0x3E
000178 353f
000179 3e9e
00017a 8106
00017b 3e95      	.DB  0x3F,0x35,0x9E,0x3E,0x6,0x81,0x95,0x3E
00017c 4fdf
00017d 3e8d
00017e 9ba6
00017f 3e84      	.DB  0xDF,0x4F,0x8D,0x3E,0xA6,0x9B,0x84,0x3E
000180 ced9
000181 3e77
000182 6666
000183 3e66      	.DB  0xD9,0xCE,0x77,0x3E,0x66,0x66,0x66,0x3E
000184 fdf4
000185 3e54
000186 9581
000187 3e43      	.DB  0xF4,0xFD,0x54,0x3E,0x81,0x95,0x43,0x3E
000188 2d0e
000189 3e32
00018a be77
00018b 3e1f      	.DB  0xE,0x2D,0x32,0x3E,0x77,0xBE,0x1F,0x3E
00018c 5604
00018d 3e0e
00018e db23
00018f 3df9      	.DB  0x4,0x56,0xE,0x3E,0x23,0xDB,0xF9,0x3D
000190 0a3d
000191 3dd7
000192 2d0e
000193 3db2      	.DB  0x3D,0xA,0xD7,0x3D,0xE,0x2D,0xB2,0x3D
000194 f34d
000195 3d8e
000196 fdf4
000197 3d54      	.DB  0x4D,0xF3,0x8E,0x3D,0xF4,0xFD,0x54,0x3D
000198 5c29
000199 3d0f
00019a 5c29
00019b 3c8f      	.DB  0x29,0x5C,0xF,0x3D,0x29,0x5C,0x8F,0x3C
00019c 0000
00019d 0000
00019e 0000
00019f 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
0001a0 0000
0001a1 00ff      	.DB  0x0,0x0,0xFF,0x0
0001a2 0064      	.DB  0x64,0x0
                 
                 
                 __GLOBAL_INI_TBL:
0001a3 0006      	.DW  0x06
0001a4 0003      	.DW  0x03
0001a5 0340      	.DW  __REG_VARS*2
                 
                 _0xFFFFFFFF:
0001a6 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
0001a7 94f8      	CLI
0001a8 27ee      	CLR  R30
0001a9 bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
0001aa e0f1      	LDI  R31,1
0001ab bff5      	OUT  MCUCR,R31
0001ac bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
0001ad e08d      	LDI  R24,(14-2)+1
0001ae e0a2      	LDI  R26,2
0001af 27bb      	CLR  R27
                 __CLEAR_REG:
0001b0 93ed      	ST   X+,R30
0001b1 958a      	DEC  R24
0001b2 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0001b3 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0001b4 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0001b5 e0a0      	LDI  R26,LOW(__SRAM_START)
0001b6 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
0001b7 93ed      	ST   X+,R30
0001b8 9701      	SBIW R24,1
0001b9 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0001ba e4e6      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0001bb e0f3      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0001bc 9185      	LPM  R24,Z+
0001bd 9195      	LPM  R25,Z+
0001be 9700      	SBIW R24,0
0001bf f061      	BREQ __GLOBAL_INI_END
0001c0 91a5      	LPM  R26,Z+
0001c1 91b5      	LPM  R27,Z+
0001c2 9005      	LPM  R0,Z+
0001c3 9015      	LPM  R1,Z+
0001c4 01bf      	MOVW R22,R30
0001c5 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0001c6 9005      	LPM  R0,Z+
0001c7 920d      	ST   X+,R0
0001c8 9701      	SBIW R24,1
0001c9 f7e1      	BRNE __GLOBAL_INI_LOOP
0001ca 01fb      	MOVW R30,R22
0001cb cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0 INITIALIZATION
0001cc e0e0      	LDI  R30,__GPIOR0_INIT
0001cd bbee      	OUT  GPIOR0,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0001ce efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0001cf bfed      	OUT  SPL,R30
0001d0 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0001d1 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0001d2 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0001d3 e0d3      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0001d4 940c 0363 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x300
                 
                 	.CSEG
                 ;#include <mega328p.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 ;
                 ;typedef unsigned char uint8_t;
                 ;typedef unsigned int uint16_t;
                 ;#define low(x)   ((x) & 0xFF)
                 ;#define high(x)   (((x)>>8) & 0xFF)
                 ;
                 ;#define FGEN 11900000UL
                 ;#define TIMER0_PWM (1<<COM0A1) | (0<<COM0A0) | (1<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (1<<WGM00)
                 ;#define TIMER2_PWM (1<<COM2A1) | (0<<COM2A0) | (0<<COM2B1) | (0<<COM2B0) | (0<<WGM21) | (1<<WGM20)
                 ;#define PWM_DIV (0<<WGM02) | (0<<CS02) | (0<<CS01) | (1<<CS00)
                 ;#define TIMER1_DIV (0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (1<<WGM12) | (0<<CS12) | (0<<CS11) | (1<<CS10)
                 ;#define ADC_VREF_TYPE (0<<REFS1) | (1<<REFS0) | (1<<ADLAR)
                 ;#define A 0
                 ;#define B 1
                 ;#define C 2
                 ;
                 ;#define N 181 //points
                 ;#define DEAD_TIME 0
                 ;#define PHASE_B_DELAY N/3
                 ;#define PHASE_C_DELAY 2*N/3
                 ;#define PHASE_A_PIN PORTD6
                 ;#define PHASE_B_PIN PORTD5
                 ;#define PHASE_C_PIN PORTB3
                 ;#define PHASE_NOT_A_PIN PORTB5
                 ;#define PHASE_NOT_B_PIN PORTB6
                 ;#define PHASE_NOT_C_PIN PORTB7
                 ;#define MAX_FREQUENCY 100
                 ;
                 ;uint8_t adc_data[2];
                 ;uint8_t ADC_input=0;
                 ;
                 ;uint8_t polarity[3];
                 ;uint8_t polarity_not[3];
                 ;uint8_t step[3];
                 ;
                 ;uint8_t sinus[N+1];
                 ;
                 ;uint8_t phase_b_step = 0;
                 ;uint8_t phase_c_step = 0;
                 ;
                 ;uint8_t amplitude = 255;
                 ;uint16_t frequency = 100;
                 ;
                 ;const float sinus_table[N+1] ={
                 ;    0.0, 0.0175, 0.035, 0.052, 0.0698, 0.087, 0.105, 0.122, 0.139, 0.156, 0.174, 0.191, 0.208,
                 ;    0.225, 0.242, 0.259, 0.276, 0.292, 0.309, 0.326, 0.342, 0.358, 0.375, 0.391, 0.407,
                 ;    0.423, 0.438, 0.454, 0.469, 0.485, 0.5, 0.515, 0.53, 0.545, 0.559, 0.574, 0.588,
                 ;    0.602, 0.616, 0.629, 0.643, 0.656, 0.669, 0.682, 0.695, 0.707, 0.719, 0.731, 0.743,
                 ;    0.755, 0.766, 0.777, 0.788, 0.799, 0.809, 0.819, 0.829, 0.839, 0.848, 0.857, 0.866,
                 ;    0.875, 0.883, 0.891, 0.899, 0.906, 0.914, 0.921, 0.927, 0.934, 0.94, 0.946, 0.951,
                 ;    0.956, 0.961, 0.966, 0.97, 0.974, 0.978, 0.982, 0.985, 0.988, 0.99, 0.993, 0.995,
                 ;    0.996, 0.998, 0.999, 0.999, 1.0, 1.0, 1.0, 0.999, 0.999, 0.998, 0.996,
                 ;    0.995, 0.993, 0.99, 0.988, 0.985, 0.982, 0.978, 0.974, 0.97, 0.966, 0.961, 0.956,
                 ;    0.951, 0.946, 0.94, 0.934, 0.927, 0.921, 0.914, 0.906, 0.899, 0.891, 0.883, 0.875,
                 ;    0.866, 0.857, 0.848, 0.839, 0.829, 0.819, 0.809, 0.799, 0.788, 0.777, 0.766, 0.755,
                 ;    0.743, 0.731, 0.719, 0.707, 0.695, 0.682, 0.669, 0.656, 0.643, 0.629, 0.616, 0.602,
                 ;    0.588, 0.574, 0.559, 0.545, 0.53, 0.515, 0.5, 0.485, 0.469, 0.454, 0.438, 0.423,
                 ;    0.407, 0.391, 0.375, 0.358, 0.342, 0.326, 0.309, 0.292, 0.276, 0.259, 0.242, 0.225,
                 ;    0.208, 0.191, 0.174, 0.156, 0.139, 0.122, 0.105, 0.087, 0.0698, 0.052, 0.035, 0.0175, 0.0};
                 ;
                 ;void stop_timers() {
                 ; 0000 003E void stop_timers() {
                 
                 	.CSEG
                 _stop_timers:
                 ; .FSTART _stop_timers
                 ; 0000 003F     TCCR0A=0; TCCR0B=0;
0001d6 e0e0      	LDI  R30,LOW(0)
0001d7 bde4      	OUT  0x24,R30
0001d8 bde5      	OUT  0x25,R30
                 ; 0000 0040     OCR0A=0; OCR0B=0;
0001d9 bde7      	OUT  0x27,R30
0001da bde8      	OUT  0x28,R30
                 ; 0000 0041     TCCR1A=0; TCCR1B=0;
0001db 93e0 0080 	STS  128,R30
0001dd 93e0 0081 	STS  129,R30
                 ; 0000 0042     OCR1AH=0; OCR1AL=0;
0001df 93e0 0089 	STS  137,R30
0001e1 93e0 0088 	STS  136,R30
                 ; 0000 0043     TIMSK1=0;
0001e3 93e0 006f 	STS  111,R30
                 ; 0000 0044     TCCR2A=0; TCCR2B=0;
0001e5 93e0 00b0 	STS  176,R30
0001e7 93e0 00b1 	STS  177,R30
                 ; 0000 0045     OCR2A=0; OCR2B=0;
0001e9 93e0 00b3 	STS  179,R30
0001eb 93e0 00b4 	STS  180,R30
                 ; 0000 0046 }
0001ed 9508      	RET
                 ; .FEND
                 ;
                 ;void closed_mode() {
                 ; 0000 0048 void closed_mode() {
                 _closed_mode:
                 ; .FSTART _closed_mode
                 ; 0000 0049     stop_timers();
0001ee dfe7      	RCALL _stop_timers
                 ; 0000 004A     PORTD=(1<<PHASE_A_PIN) | (1<<PHASE_B_PIN);
0001ef e6e0      	LDI  R30,LOW(96)
0001f0 b9eb      	OUT  0xB,R30
                 ; 0000 004B     PORTB=(1<<PHASE_C_PIN) | (1<<PHASE_NOT_A_PIN) | (1<<PHASE_NOT_B_PIN) | (1<<PHASE_NOT_C_PIN);
0001f1 eee8      	LDI  R30,LOW(232)
0001f2 b9e5      	OUT  0x5,R30
                 ; 0000 004C }
0001f3 9508      	RET
                 ; .FEND
                 ;
                 ;void sinus_period(uint16_t frequency) {
                 ; 0000 004E void sinus_period(uint16_t frequency) {
                 _sinus_period:
                 ; .FSTART _sinus_period
                 ; 0000 004F     uint16_t period = FGEN/2/N/frequency;
                 ; 0000 0050     OCR1AH = high(period);
0001f4 93ba      	ST   -Y,R27
0001f5 93aa      	ST   -Y,R26
0001f6 931a      	ST   -Y,R17
0001f7 930a      	ST   -Y,R16
                 ;	frequency -> Y+2
                 ;	period -> R16,R17
0001f8 81ea      	LDD  R30,Y+2
0001f9 81fb      	LDD  R31,Y+2+1
0001fa e6a8      	LDI  R26,LOW(32872)
0001fb e8b0      	LDI  R27,HIGH(32872)
0001fc 940e 04a9 	CALL __DIVW21U
0001fe 018f      	MOVW R16,R30
0001ff 9310 0089 	STS  137,R17
                 ; 0000 0051     OCR1AL = low(period);
000201 93e0 0088 	STS  136,R30
                 ; 0000 0052 }
000203 8119      	LDD  R17,Y+1
000204 8108      	LDD  R16,Y+0
000205 9624      	ADIW R28,4
000206 9508      	RET
                 ; .FEND
                 ;
                 ;void sinus_amplitude(uint8_t amplitude) {
                 ; 0000 0054 void sinus_amplitude(uint8_t amplitude) {
                 _sinus_amplitude:
                 ; .FSTART _sinus_amplitude
                 ; 0000 0055     uint8_t i = 0;
                 ; 0000 0056     for (i = 0; i < N; i++)
000207 93aa      	ST   -Y,R26
000208 931a      	ST   -Y,R17
                 ;	amplitude -> Y+1
                 ;	i -> R17
000209 e010      	LDI  R17,0
00020a e010      	LDI  R17,LOW(0)
                 _0x4:
00020b 3b15      	CPI  R17,181
00020c f500      	BRSH _0x5
                 ; 0000 0057         sinus[i] = amplitude*sinus_table[i];
00020d 2fe1      	MOV  R30,R17
00020e e0f0      	LDI  R31,0
00020f 5fe5      	SUBI R30,LOW(-_sinus)
000210 4ffc      	SBCI R31,HIGH(-_sinus)
000211 93ff      	PUSH R31
000212 93ef      	PUSH R30
000213 8189      	LDD  R24,Y+1
000214 2799      	CLR  R25
000215 2fe1      	MOV  R30,R17
000216 e6a8      	LDI  R26,LOW(_sinus_table*2)
000217 e0b0      	LDI  R27,HIGH(_sinus_table*2)
000218 e0f0      	LDI  R31,0
000219 940e 0495 	CALL __LSLW2
00021b 0fea      	ADD  R30,R26
00021c 1ffb      	ADC  R31,R27
00021d 940e 04cf 	CALL __GETD1PF
00021f 01dc      	MOVW R26,R24
000220 940e 049a 	CALL __CWD2
000222 940e 04d7 	CALL __CDF2
000224 940e 043b 	CALL __MULF12
000226 91af      	POP  R26
000227 91bf      	POP  R27
000228 940e 03d4 	CALL __CFD1U
00022a 93ec      	ST   X,R30
00022b 5f1f      	SUBI R17,-1
00022c cfde      	RJMP _0x4
                 _0x5:
                 ; 0000 0058 }
00022d 8118      	LDD  R17,Y+0
00022e 9622      	ADIW R28,2
00022f 9508      	RET
                 ; .FEND
                 ;
                 ;void start_PWM(uint16_t frequency, uint8_t amplitude) {
                 ; 0000 005A void start_PWM(uint16_t frequency, uint8_t amplitude) {
                 _start_PWM:
                 ; .FSTART _start_PWM
                 ; 0000 005B     polarity[A] = 1;
000230 93aa      	ST   -Y,R26
                 ;	frequency -> Y+1
                 ;	amplitude -> Y+0
000231 e0e1      	LDI  R30,LOW(1)
000232 93e0 0302 	STS  _polarity,R30
                 ; 0000 005C     polarity[B] = 0;
000234 e0e0      	LDI  R30,LOW(0)
                +
000235 93e0 0303+STS _polarity + ( 1 ) , R30
                 	__PUTB1MN _polarity,1
                 ; 0000 005D     polarity[C] = 1;
000237 e0e1      	LDI  R30,LOW(1)
                +
000238 93e0 0304+STS _polarity + ( 2 ) , R30
                 	__PUTB1MN _polarity,2
                 ; 0000 005E     polarity_not[A] = 0;
00023a e0e0      	LDI  R30,LOW(0)
00023b 93e0 0305 	STS  _polarity_not,R30
                 ; 0000 005F     polarity_not[B] = 0;
                +
00023d 93e0 0306+STS _polarity_not + ( 1 ) , R30
                 	__PUTB1MN _polarity_not,1
                 ; 0000 0060     polarity_not[C] = 0;
                +
00023f 93e0 0307+STS _polarity_not + ( 2 ) , R30
                 	__PUTB1MN _polarity_not,2
                 ; 0000 0061     step[A] = 0;
000241 93e0 0308 	STS  _step,R30
                 ; 0000 0062     step[B] = 0;
                +
000243 93e0 0309+STS _step + ( 1 ) , R30
                 	__PUTB1MN _step,1
                 ; 0000 0063     step[C] = 0;
                +
000245 93e0 030a+STS _step + ( 2 ) , R30
                 	__PUTB1MN _step,2
                 ; 0000 0064     // Timer/Counter 0 initialization
                 ; 0000 0065     TCCR0A=TIMER0_PWM;
000247 eae1      	LDI  R30,LOW(161)
000248 bde4      	OUT  0x24,R30
                 ; 0000 0066     TCCR0B=PWM_DIV;
000249 e0e1      	LDI  R30,LOW(1)
00024a bde5      	OUT  0x25,R30
                 ; 0000 0067     TCNT0=0;
00024b e0e0      	LDI  R30,LOW(0)
00024c bde6      	OUT  0x26,R30
                 ; 0000 0068     // Timer/Counter 2 initialization
                 ; 0000 0069     TCCR2A=TIMER2_PWM;
00024d e8e1      	LDI  R30,LOW(129)
00024e 93e0 00b0 	STS  176,R30
                 ; 0000 006A     TCCR2B=PWM_DIV;
000250 e0e1      	LDI  R30,LOW(1)
000251 93e0 00b1 	STS  177,R30
                 ; 0000 006B     TCNT2=0;
000253 e0e0      	LDI  R30,LOW(0)
000254 93e0 00b2 	STS  178,R30
                 ; 0000 006C     // Timer/Counter 1 initialization
                 ; 0000 006D     TCCR1A=0;
000256 93e0 0080 	STS  128,R30
                 ; 0000 006E     TCCR1B= TIMER1_DIV;
000258 e0e9      	LDI  R30,LOW(9)
000259 93e0 0081 	STS  129,R30
                 ; 0000 006F     TCNT1H=0; TCNT1L=0; ICR1H=0; ICR1L=0;
00025b e0e0      	LDI  R30,LOW(0)
00025c 93e0 0085 	STS  133,R30
00025e 93e0 0084 	STS  132,R30
000260 93e0 0087 	STS  135,R30
000262 93e0 0086 	STS  134,R30
                 ; 0000 0070     // Timer/Counter 1 Interrupt(s) initialization
                 ; 0000 0071     TIMSK1=(1<<OCIE1A)|(1 << OCIE1B);
000264 e0e6      	LDI  R30,LOW(6)
000265 93e0 006f 	STS  111,R30
                 ; 0000 0072     #asm("sei")
000267 9478      	sei
                 ; 0000 0073     sinus_period(frequency);
000268 81a9      	LDD  R26,Y+1
000269 81ba      	LDD  R27,Y+1+1
00026a df89      	RCALL _sinus_period
                 ; 0000 0074     sinus_amplitude(amplitude);
00026b 81a8      	LD   R26,Y
00026c df9a      	RCALL _sinus_amplitude
                 ; 0000 0075 }
00026d 9623      	ADIW R28,3
00026e 9508      	RET
                 ; .FEND
                 ;
                 ;interrupt [TIM1_COMPA] void timer1_compa_isr(void)
                 ; 0000 0078 {
                 _timer1_compa_isr:
                 ; .FSTART _timer1_compa_isr
00026f 920a      	ST   -Y,R0
000270 921a      	ST   -Y,R1
000271 936a      	ST   -Y,R22
000272 93aa      	ST   -Y,R26
000273 93ba      	ST   -Y,R27
000274 93ea      	ST   -Y,R30
000275 93fa      	ST   -Y,R31
000276 b7ef      	IN   R30,SREG
000277 93ea      	ST   -Y,R30
                 ; 0000 0079     /* For phase A */
                 ; 0000 007A    if (step[A] > N) {polarity[A] ^= 1; step[A] = 0;};
000278 91a0 0308 	LDS  R26,_step
00027a 3ba6      	CPI  R26,LOW(0xB6)
00027b f048      	BRLO _0x6
00027c 91a0 0302 	LDS  R26,_polarity
00027e e0e1      	LDI  R30,LOW(1)
00027f 27ea      	EOR  R30,R26
000280 93e0 0302 	STS  _polarity,R30
000282 e0e0      	LDI  R30,LOW(0)
000283 93e0 0308 	STS  _step,R30
                 _0x6:
                 ; 0000 007B    if (step[A] == DEAD_TIME || step[A] == N-DEAD_TIME) {polarity_not[A] ^= 1;};
000285 91a0 0308 	LDS  R26,_step
000287 30a0      	CPI  R26,LOW(0x0)
000288 f011      	BREQ _0x8
000289 3ba5      	CPI  R26,LOW(0xB5)
00028a f431      	BRNE _0x7
                 _0x8:
00028b 91a0 0305 	LDS  R26,_polarity_not
00028d e0e1      	LDI  R30,LOW(1)
00028e 27ea      	EOR  R30,R26
00028f 93e0 0305 	STS  _polarity_not,R30
                 _0x7:
                 ; 0000 007C    step[A]++;
000291 91e0 0308 	LDS  R30,_step
000293 5fef      	SUBI R30,-LOW(1)
000294 93e0 0308 	STS  _step,R30
                 ; 0000 007D    OCR0A = polarity[A]*sinus[step[A]];
000296 d0f9      	RCALL SUBOPT_0x0
000297 91a0 0302 	LDS  R26,_polarity
000299 02ea      	MULS R30,R26
00029a 01f0      	MOVW R30,R0
00029b bde7      	OUT  0x27,R30
                 ; 0000 007E    /* For phase B */
                 ; 0000 007F    if (phase_b_step < PHASE_B_DELAY) {phase_b_step++;} else {
00029c e3ec      	LDI  R30,LOW(60)
00029d 163e      	CP   R3,R30
00029e f410      	BRSH _0xA
00029f 9433      	INC  R3
0002a0 c023      	RJMP _0xB
                 _0xA:
                 ; 0000 0080        if (step[B] > N) {polarity[B] ^= 1; step[B] = 0;};
                +
0002a1 91a0 0309+LDS R26 , _step + ( 1 )
                 	__GETB2MN _step,1
0002a3 3ba6      	CPI  R26,LOW(0xB6)
0002a4 f030      	BRLO _0xC
                +
0002a5 e0e3     +LDI R30 , LOW ( _polarity + ( 1 ) )
0002a6 e0f3     +LDI R31 , HIGH ( _polarity + ( 1 ) )
                 	__POINTW1MN _polarity,1
0002a7 d0ed      	RCALL SUBOPT_0x1
0002a8 e0e0      	LDI  R30,LOW(0)
                +
0002a9 93e0 0309+STS _step + ( 1 ) , R30
                 	__PUTB1MN _step,1
                 _0xC:
                 ; 0000 0081        if (step[B] == DEAD_TIME || step[B] == N-DEAD_TIME) {polarity_not[B] ^= 1;};
                +
0002ab 91a0 0309+LDS R26 , _step + ( 1 )
                 	__GETB2MN _step,1
0002ad 30a0      	CPI  R26,LOW(0x0)
0002ae f021      	BREQ _0xE
                +
0002af 91a0 0309+LDS R26 , _step + ( 1 )
                 	__GETB2MN _step,1
0002b1 3ba5      	CPI  R26,LOW(0xB5)
0002b2 f419      	BRNE _0xD
                 _0xE:
                +
0002b3 e0e6     +LDI R30 , LOW ( _polarity_not + ( 1 ) )
0002b4 e0f3     +LDI R31 , HIGH ( _polarity_not + ( 1 ) )
                 	__POINTW1MN _polarity_not,1
0002b5 d0df      	RCALL SUBOPT_0x1
                 _0xD:
                 ; 0000 0082        step[B]++;
                +
0002b6 91e0 0309+LDS R30 , _step + ( 1 )
                 	__GETB1MN _step,1
0002b8 5fef      	SUBI R30,-LOW(1)
                +
0002b9 93e0 0309+STS _step + ( 1 ) , R30
                 	__PUTB1MN _step,1
                 ; 0000 0083        OCR2A = polarity[B]*sinus[step[B]];
                +
0002bb 91a0 0303+LDS R26 , _polarity + ( 1 )
                 	__GETB2MN _polarity,1
                +
0002bd 91e0 0309+LDS R30 , _step + ( 1 )
                 	__GETB1MN _step,1
0002bf d0d0      	RCALL SUBOPT_0x0
0002c0 02ea      	MULS R30,R26
0002c1 01f0      	MOVW R30,R0
0002c2 93e0 00b3 	STS  179,R30
                 ; 0000 0084    }
                 _0xB:
                 ; 0000 0085    /* For phase C */
                 ; 0000 0086    if (phase_c_step < PHASE_C_DELAY) {phase_c_step++;} else {
0002c4 e7e8      	LDI  R30,LOW(120)
0002c5 166e      	CP   R6,R30
0002c6 f410      	BRSH _0x10
0002c7 9463      	INC  R6
0002c8 c022      	RJMP _0x11
                 _0x10:
                 ; 0000 0087        if (step[C] > N) {polarity[C] ^= 1; step[C] = 0;};
                +
0002c9 91a0 030a+LDS R26 , _step + ( 2 )
                 	__GETB2MN _step,2
0002cb 3ba6      	CPI  R26,LOW(0xB6)
0002cc f030      	BRLO _0x12
                +
0002cd e0e4     +LDI R30 , LOW ( _polarity + ( 2 ) )
0002ce e0f3     +LDI R31 , HIGH ( _polarity + ( 2 ) )
                 	__POINTW1MN _polarity,2
0002cf d0c5      	RCALL SUBOPT_0x1
0002d0 e0e0      	LDI  R30,LOW(0)
                +
0002d1 93e0 030a+STS _step + ( 2 ) , R30
                 	__PUTB1MN _step,2
                 _0x12:
                 ; 0000 0088        if (step[C] == DEAD_TIME || step[C] == N-DEAD_TIME) {polarity_not[C] ^= 1;};
                +
0002d3 91a0 030a+LDS R26 , _step + ( 2 )
                 	__GETB2MN _step,2
0002d5 30a0      	CPI  R26,LOW(0x0)
0002d6 f021      	BREQ _0x14
                +
0002d7 91a0 030a+LDS R26 , _step + ( 2 )
                 	__GETB2MN _step,2
0002d9 3ba5      	CPI  R26,LOW(0xB5)
0002da f419      	BRNE _0x13
                 _0x14:
                +
0002db e0e7     +LDI R30 , LOW ( _polarity_not + ( 2 ) )
0002dc e0f3     +LDI R31 , HIGH ( _polarity_not + ( 2 ) )
                 	__POINTW1MN _polarity_not,2
0002dd d0b7      	RCALL SUBOPT_0x1
                 _0x13:
                 ; 0000 0089        step[C]++;
                +
0002de 91e0 030a+LDS R30 , _step + ( 2 )
                 	__GETB1MN _step,2
0002e0 5fef      	SUBI R30,-LOW(1)
                +
0002e1 93e0 030a+STS _step + ( 2 ) , R30
                 	__PUTB1MN _step,2
                 ; 0000 008A        OCR0B = polarity[C]*sinus[step[C]];
                +
0002e3 91a0 0304+LDS R26 , _polarity + ( 2 )
                 	__GETB2MN _polarity,2
                +
0002e5 91e0 030a+LDS R30 , _step + ( 2 )
                 	__GETB1MN _step,2
0002e7 d0a8      	RCALL SUBOPT_0x0
0002e8 02ea      	MULS R30,R26
0002e9 01f0      	MOVW R30,R0
0002ea bde8      	OUT  0x28,R30
                 ; 0000 008B    }
                 _0x11:
                 ; 0000 008C    /* Inverted phases */
                 ; 0000 008D    PORTB =((!polarity[A]*polarity_not[A]) << PHASE_NOT_A_PIN) | ((!polarity[B]*polarity_not[B]) << PHASE_NOT_B_PIN) | (( ...
0002eb 91e0 0302 	LDS  R30,_polarity
0002ed 940e 049f 	CALL __LNEGB1
0002ef 91a0 0305 	LDS  R26,_polarity_not
0002f1 02ea      	MULS R30,R26
0002f2 01f0      	MOVW R30,R0
0002f3 95e2      	SWAP R30
0002f4 7fe0      	ANDI R30,0xF0
0002f5 0fee      	LSL  R30
0002f6 2f6e      	MOV  R22,R30
                +
0002f7 91e0 0303+LDS R30 , _polarity + ( 1 )
                 	__GETB1MN _polarity,1
0002f9 e0f0      	LDI  R31,0
0002fa 940e 04a4 	CALL __LNEGW1
0002fc 2fae      	MOV  R26,R30
                +
0002fd 91e0 0306+LDS R30 , _polarity_not + ( 1 )
                 	__GETB1MN _polarity_not,1
0002ff 02ea      	MULS R30,R26
000300 01f0      	MOVW R30,R0
000301 95e2      	SWAP R30
000302 7fe0      	ANDI R30,0xF0
000303 0fee      	LSL  R30
000304 0fee      	LSL  R30
000305 2b6e      	OR   R22,R30
                +
000306 91e0 0304+LDS R30 , _polarity + ( 2 )
                 	__GETB1MN _polarity,2
000308 e0f0      	LDI  R31,0
000309 940e 04a4 	CALL __LNEGW1
00030b 2fae      	MOV  R26,R30
                +
00030c 91e0 0307+LDS R30 , _polarity_not + ( 2 )
                 	__GETB1MN _polarity_not,2
00030e 02ea      	MULS R30,R26
00030f 01f0      	MOVW R30,R0
000310 95e7      	ROR  R30
000311 e0e0      	LDI  R30,0
000312 95e7      	ROR  R30
000313 2be6      	OR   R30,R22
000314 b9e5      	OUT  0x5,R30
                 ; 0000 008E }
000315 91e9      	LD   R30,Y+
000316 bfef      	OUT  SREG,R30
000317 91f9      	LD   R31,Y+
000318 91e9      	LD   R30,Y+
000319 91b9      	LD   R27,Y+
00031a 91a9      	LD   R26,Y+
00031b 9169      	LD   R22,Y+
00031c 9019      	LD   R1,Y+
00031d 9009      	LD   R0,Y+
00031e 9518      	RETI
                 ; .FEND
                 ;
                 ;interrupt [ADC_INT] void adc_isr(void)
                 ; 0000 0091 {
                 _adc_isr:
                 ; .FSTART _adc_isr
00031f 93aa      	ST   -Y,R26
000320 93ba      	ST   -Y,R27
000321 93ea      	ST   -Y,R30
000322 b7ef      	IN   R30,SREG
000323 93ea      	ST   -Y,R30
                 ; 0000 0092     adc_data[ADC_input]=ADCH;
000324 2da4      	MOV  R26,R4
000325 e0b0      	LDI  R27,0
000326 50a0      	SUBI R26,LOW(-_adc_data)
000327 4fbd      	SBCI R27,HIGH(-_adc_data)
000328 91e0 0079 	LDS  R30,121
00032a 93ec      	ST   X,R30
                 ; 0000 0093     if (ADC_input == 1) {ADC_input=0;} else {ADC_input=1;}
00032b e0e1      	LDI  R30,LOW(1)
00032c 15e4      	CP   R30,R4
00032d f411      	BRNE _0x16
00032e 2444      	CLR  R4
00032f c002      	RJMP _0x17
                 _0x16:
000330 e0e1      	LDI  R30,LOW(1)
000331 2e4e      	MOV  R4,R30
                 _0x17:
                 ; 0000 0094     ADMUX= ADC_input + ADC_VREF_TYPE;
000332 2de4      	MOV  R30,R4
000333 66e0      	ORI  R30,LOW(0x60)
000334 93e0 007c 	STS  124,R30
                 ; 0000 0095     ADCSRA|=(1<<ADSC);
000336 91e0 007a 	LDS  R30,122
000338 64e0      	ORI  R30,0x40
000339 93e0 007a 	STS  122,R30
                 ; 0000 0096 }
00033b 91e9      	LD   R30,Y+
00033c bfef      	OUT  SREG,R30
00033d 91e9      	LD   R30,Y+
00033e 91b9      	LD   R27,Y+
00033f 91a9      	LD   R26,Y+
000340 9518      	RETI
                 ; .FEND
                 ;
                 ;void invertor_setup() {
                 ; 0000 0098 void invertor_setup() {
                 _invertor_setup:
                 ; .FSTART _invertor_setup
                 ; 0000 0099     // Crystal Oscillator division factor: 1
                 ; 0000 009A     #pragma optsize-
                 ; 0000 009B     CLKPR=(1<<CLKPCE);
000341 e8e0      	LDI  R30,LOW(128)
000342 93e0 0061 	STS  97,R30
                 ; 0000 009C     CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
000344 e0e0      	LDI  R30,LOW(0)
000345 93e0 0061 	STS  97,R30
                 ; 0000 009D     #ifdef _OPTIMIZE_SIZE_
                 ; 0000 009E     #pragma optsize+
                 ; 0000 009F     #endif
                 ; 0000 00A0     //ADC init
                 ; 0000 00A1     ACSR=(1<<ACD);
000347 e8e0      	LDI  R30,LOW(128)
000348 bfe0      	OUT  0x30,R30
                 ; 0000 00A2     DIDR0=(1<<ADC5D) | (1<<ADC4D) | (1<<ADC3D) | (1<<ADC2D) | (0<<ADC1D) | (0<<ADC0D);
000349 e3ec      	LDI  R30,LOW(60)
00034a 93e0 007e 	STS  126,R30
                 ; 0000 00A3     ADMUX = ADC_VREF_TYPE;  // Voltage Reference: AVCC pin
00034c e6e0      	LDI  R30,LOW(96)
00034d 93e0 007c 	STS  124,R30
                 ; 0000 00A4     ADCSRA=(1<<ADEN) | (1<<ADSC) | (1<<ADATE) | (0<<ADIF) | (1<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
00034f eeeb      	LDI  R30,LOW(235)
000350 93e0 007a 	STS  122,R30
                 ; 0000 00A5     ADCSRB=(1<<ADTS2) | (0<<ADTS1) | (1<<ADTS0);
000352 e0e5      	LDI  R30,LOW(5)
000353 93e0 007b 	STS  123,R30
                 ; 0000 00A6     OCR1BH=0xFF;
000355 efef      	LDI  R30,LOW(255)
000356 93e0 008b 	STS  139,R30
                 ; 0000 00A7     OCR1BL=0xFF;
000358 93e0 008a 	STS  138,R30
                 ; 0000 00A8     // Ports init
                 ; 0000 00A9     DDRD=(1<<PHASE_A_PIN) | (1<<PHASE_B_PIN);
00035a e6e0      	LDI  R30,LOW(96)
00035b b9ea      	OUT  0xA,R30
                 ; 0000 00AA     DDRB=(1<<PHASE_C_PIN) | (1<<PHASE_NOT_A_PIN) | (1<<PHASE_NOT_B_PIN) | (1<<PHASE_NOT_C_PIN);
00035c eee8      	LDI  R30,LOW(232)
00035d b9e4      	OUT  0x4,R30
                 ; 0000 00AB     start_PWM(frequency, amplitude);
00035e 928a      	ST   -Y,R8
00035f 927a      	ST   -Y,R7
000360 2da5      	MOV  R26,R5
000361 dece      	RCALL _start_PWM
                 ; 0000 00AC }
000362 9508      	RET
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 00AF {
                 _main:
                 ; .FSTART _main
                 ; 0000 00B0     invertor_setup();
000363 dfdd      	RCALL _invertor_setup
                 ; 0000 00B1     while (1)
                 _0x18:
                 ; 0000 00B2           {
                 ; 0000 00B3           /* if frequency/amplitude is 0, stop invertor */
                 ; 0000 00B4           if (adc_data[0] == 0 || adc_data[1] == 0) {
000364 91a0 0300 	LDS  R26,_adc_data
000366 30a0      	CPI  R26,LOW(0x0)
000367 f021      	BREQ _0x1C
                +
000368 91a0 0301+LDS R26 , _adc_data + ( 1 )
                 	__GETB2MN _adc_data,1
00036a 30a0      	CPI  R26,LOW(0x0)
00036b f481      	BRNE _0x1B
                 _0x1C:
                 ; 0000 00B5             while (adc_data[0] == 0 || adc_data[1] == 0) {closed_mode();};
                 _0x1E:
00036c 91a0 0300 	LDS  R26,_adc_data
00036e 30a0      	CPI  R26,LOW(0x0)
00036f f021      	BREQ _0x21
                +
000370 91a0 0301+LDS R26 , _adc_data + ( 1 )
                 	__GETB2MN _adc_data,1
000372 30a0      	CPI  R26,LOW(0x0)
000373 f411      	BRNE _0x20
                 _0x21:
000374 de79      	RCALL _closed_mode
000375 cff6      	RJMP _0x1E
                 _0x20:
                 ; 0000 00B6             start_PWM(MAX_FREQUENCY*adc_data[1]/255, adc_data[0]);
000376 d025      	RCALL SUBOPT_0x2
000377 93fa      	ST   -Y,R31
000378 93ea      	ST   -Y,R30
000379 91a0 0300 	LDS  R26,_adc_data
00037b deb4      	RCALL _start_PWM
                 ; 0000 00B7           }
                 ; 0000 00B8           /* if ADC data is updated, change frequency/amplitude*/
                 ; 0000 00B9           if (amplitude != adc_data[0]) {amplitude = adc_data[0]; sinus_amplitude(amplitude);}
                 _0x1B:
00037c 91e0 0300 	LDS  R30,_adc_data
00037e 15e5      	CP   R30,R5
00037f f021      	BREQ _0x23
000380 9050 0300 	LDS  R5,_adc_data
000382 2da5      	MOV  R26,R5
000383 de83      	RCALL _sinus_amplitude
                 ; 0000 00BA           if (frequency != MAX_FREQUENCY*adc_data[1]/255) {frequency = MAX_FREQUENCY*adc_data[1]/255; sinus_period(frequ ...
                 _0x23:
000384 d017      	RCALL SUBOPT_0x2
000385 15e7      	CP   R30,R7
000386 05f8      	CPC  R31,R8
000387 f031      	BREQ _0x24
000388 d013      	RCALL SUBOPT_0x2
                +
000389 2e7e     +MOV R7 , R30
00038a 2e8f     +MOV R8 , R31
                 	__PUTW1R 7,8
                +
00038b 2da7     +MOV R26 , R7
00038c 2db8     +MOV R27 , R8
                 	__GETW2R 7,8
00038d de66      	RCALL _sinus_period
                 ; 0000 00BB           }
                 _0x24:
00038e cfd5      	RJMP _0x18
                 ; 0000 00BC }
                 _0x25:
00038f cfff      	RJMP _0x25
                 ; .FEND
                 
                 	.DSEG
                 _adc_data:
000300           	.BYTE 0x2
                 _polarity:
000302           	.BYTE 0x3
                 _polarity_not:
000305           	.BYTE 0x3
                 _step:
000308           	.BYTE 0x3
                 _sinus:
00030b           	.BYTE 0xB6
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
000390 e0f0      	LDI  R31,0
000391 5fe5      	SUBI R30,LOW(-_sinus)
000392 4ffc      	SBCI R31,HIGH(-_sinus)
000393 81e0      	LD   R30,Z
000394 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1:
000395 010f      	MOVW R0,R30
000396 81a0      	LD   R26,Z
000397 e0e1      	LDI  R30,LOW(1)
000398 27ea      	EOR  R30,R26
000399 01d0      	MOVW R26,R0
00039a 93ec      	ST   X,R30
00039b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x2:
                +
00039c 91e0 0301+LDS R30 , _adc_data + ( 1 )
                 	__GETB1MN _adc_data,1
00039e e6a4      	LDI  R26,LOW(100)
00039f 9fea      	MUL  R30,R26
0003a0 01f0      	MOVW R30,R0
0003a1 01df      	MOVW R26,R30
0003a2 efef      	LDI  R30,LOW(255)
0003a3 e0f0      	LDI  R31,HIGH(255)
0003a4 940e 04bc 	CALL __DIVW21
0003a6 9508      	RET
                 
                 
                 	.CSEG
                 __ROUND_REPACK:
0003a7 2355      	TST  R21
0003a8 f442      	BRPL __REPACK
0003a9 3850      	CPI  R21,0x80
0003aa f411      	BRNE __ROUND_REPACK0
0003ab ffe0      	SBRS R30,0
0003ac c004      	RJMP __REPACK
                 __ROUND_REPACK0:
0003ad 9631      	ADIW R30,1
0003ae 1f69      	ADC  R22,R25
0003af 1f79      	ADC  R23,R25
0003b0 f06b      	BRVS __REPACK1
                 
                 __REPACK:
0003b1 e850      	LDI  R21,0x80
0003b2 2757      	EOR  R21,R23
0003b3 f411      	BRNE __REPACK0
0003b4 935f      	PUSH R21
0003b5 c073      	RJMP __ZERORES
                 __REPACK0:
0003b6 3f5f      	CPI  R21,0xFF
0003b7 f031      	BREQ __REPACK1
0003b8 0f66      	LSL  R22
0003b9 0c00      	LSL  R0
0003ba 9557      	ROR  R21
0003bb 9567      	ROR  R22
0003bc 2f75      	MOV  R23,R21
0003bd 9508      	RET
                 __REPACK1:
0003be 935f      	PUSH R21
0003bf 2000      	TST  R0
0003c0 f00a      	BRMI __REPACK2
0003c1 c073      	RJMP __MAXRES
                 __REPACK2:
0003c2 c06c      	RJMP __MINRES
                 
                 __UNPACK:
0003c3 e850      	LDI  R21,0x80
0003c4 2e19      	MOV  R1,R25
0003c5 2215      	AND  R1,R21
0003c6 0f88      	LSL  R24
0003c7 1f99      	ROL  R25
0003c8 2795      	EOR  R25,R21
0003c9 0f55      	LSL  R21
0003ca 9587      	ROR  R24
                 
                 __UNPACK1:
0003cb e850      	LDI  R21,0x80
0003cc 2e07      	MOV  R0,R23
0003cd 2205      	AND  R0,R21
0003ce 0f66      	LSL  R22
0003cf 1f77      	ROL  R23
0003d0 2775      	EOR  R23,R21
0003d1 0f55      	LSL  R21
0003d2 9567      	ROR  R22
0003d3 9508      	RET
                 
                 __CFD1U:
0003d4 9468      	SET
0003d5 c001      	RJMP __CFD1U0
                 __CFD1:
0003d6 94e8      	CLT
                 __CFD1U0:
0003d7 935f      	PUSH R21
0003d8 dff2      	RCALL __UNPACK1
0003d9 3870      	CPI  R23,0x80
0003da f018      	BRLO __CFD10
0003db 3f7f      	CPI  R23,0xFF
0003dc f408      	BRCC __CFD10
0003dd c04b      	RJMP __ZERORES
                 __CFD10:
0003de e156      	LDI  R21,22
0003df 1b57      	SUB  R21,R23
0003e0 f4aa      	BRPL __CFD11
0003e1 9551      	NEG  R21
0003e2 3058      	CPI  R21,8
0003e3 f40e      	BRTC __CFD19
0003e4 3059      	CPI  R21,9
                 __CFD19:
0003e5 f030      	BRLO __CFD17
0003e6 efef      	SER  R30
0003e7 efff      	SER  R31
0003e8 ef6f      	SER  R22
0003e9 e77f      	LDI  R23,0x7F
0003ea f977      	BLD  R23,7
0003eb c01a      	RJMP __CFD15
                 __CFD17:
0003ec 2777      	CLR  R23
0003ed 2355      	TST  R21
0003ee f0b9      	BREQ __CFD15
                 __CFD18:
0003ef 0fee      	LSL  R30
0003f0 1fff      	ROL  R31
0003f1 1f66      	ROL  R22
0003f2 1f77      	ROL  R23
0003f3 955a      	DEC  R21
0003f4 f7d1      	BRNE __CFD18
0003f5 c010      	RJMP __CFD15
                 __CFD11:
0003f6 2777      	CLR  R23
                 __CFD12:
0003f7 3058      	CPI  R21,8
0003f8 f028      	BRLO __CFD13
0003f9 2fef      	MOV  R30,R31
0003fa 2ff6      	MOV  R31,R22
0003fb 2f67      	MOV  R22,R23
0003fc 5058      	SUBI R21,8
0003fd cff9      	RJMP __CFD12
                 __CFD13:
0003fe 2355      	TST  R21
0003ff f031      	BREQ __CFD15
                 __CFD14:
000400 9576      	LSR  R23
000401 9567      	ROR  R22
000402 95f7      	ROR  R31
000403 95e7      	ROR  R30
000404 955a      	DEC  R21
000405 f7d1      	BRNE __CFD14
                 __CFD15:
000406 2000      	TST  R0
000407 f40a      	BRPL __CFD16
000408 d084      	RCALL __ANEGD1
                 __CFD16:
000409 915f      	POP  R21
00040a 9508      	RET
                 
                 __CDF1U:
00040b 9468      	SET
00040c c001      	RJMP __CDF1U0
                 __CDF1:
00040d 94e8      	CLT
                 __CDF1U0:
00040e 9730      	SBIW R30,0
00040f 4060      	SBCI R22,0
000410 4070      	SBCI R23,0
000411 f0b1      	BREQ __CDF10
000412 2400      	CLR  R0
000413 f026      	BRTS __CDF11
000414 2377      	TST  R23
000415 f412      	BRPL __CDF11
000416 9400      	COM  R0
000417 d075      	RCALL __ANEGD1
                 __CDF11:
000418 2e17      	MOV  R1,R23
000419 e17e      	LDI  R23,30
00041a 2011      	TST  R1
                 __CDF12:
00041b f032      	BRMI __CDF13
00041c 957a      	DEC  R23
00041d 0fee      	LSL  R30
00041e 1fff      	ROL  R31
00041f 1f66      	ROL  R22
000420 1c11      	ROL  R1
000421 cff9      	RJMP __CDF12
                 __CDF13:
000422 2fef      	MOV  R30,R31
000423 2ff6      	MOV  R31,R22
000424 2d61      	MOV  R22,R1
000425 935f      	PUSH R21
000426 df8a      	RCALL __REPACK
000427 915f      	POP  R21
                 __CDF10:
000428 9508      	RET
                 
                 __ZERORES:
000429 27ee      	CLR  R30
00042a 27ff      	CLR  R31
00042b 2766      	CLR  R22
00042c 2777      	CLR  R23
00042d 915f      	POP  R21
00042e 9508      	RET
                 
                 __MINRES:
00042f efef      	SER  R30
000430 efff      	SER  R31
000431 e76f      	LDI  R22,0x7F
000432 ef7f      	SER  R23
000433 915f      	POP  R21
000434 9508      	RET
                 
                 __MAXRES:
000435 efef      	SER  R30
000436 efff      	SER  R31
000437 e76f      	LDI  R22,0x7F
000438 e77f      	LDI  R23,0x7F
000439 915f      	POP  R21
00043a 9508      	RET
                 
                 __MULF12:
00043b 935f      	PUSH R21
00043c df86      	RCALL __UNPACK
00043d 3870      	CPI  R23,0x80
00043e f351      	BREQ __ZERORES
00043f 3890      	CPI  R25,0x80
000440 f341      	BREQ __ZERORES
000441 2401      	EOR  R0,R1
000442 9408      	SEC
000443 1f79      	ADC  R23,R25
000444 f423      	BRVC __MULF124
000445 f31c      	BRLT __ZERORES
                 __MULF125:
000446 2000      	TST  R0
000447 f33a      	BRMI __MINRES
000448 cfec      	RJMP __MAXRES
                 __MULF124:
000449 920f      	PUSH R0
00044a 931f      	PUSH R17
00044b 932f      	PUSH R18
00044c 933f      	PUSH R19
00044d 934f      	PUSH R20
00044e 2711      	CLR  R17
00044f 2722      	CLR  R18
000450 2799      	CLR  R25
000451 9f68      	MUL  R22,R24
000452 01a0      	MOVW R20,R0
000453 9f8f      	MUL  R24,R31
000454 2d30      	MOV  R19,R0
000455 0d41      	ADD  R20,R1
000456 1f59      	ADC  R21,R25
000457 9f6b      	MUL  R22,R27
000458 0d30      	ADD  R19,R0
000459 1d41      	ADC  R20,R1
00045a 1f59      	ADC  R21,R25
00045b 9f8e      	MUL  R24,R30
00045c d027      	RCALL __MULF126
00045d 9fbf      	MUL  R27,R31
00045e d025      	RCALL __MULF126
00045f 9f6a      	MUL  R22,R26
000460 d023      	RCALL __MULF126
000461 9fbe      	MUL  R27,R30
000462 d01d      	RCALL __MULF127
000463 9faf      	MUL  R26,R31
000464 d01b      	RCALL __MULF127
000465 9fae      	MUL  R26,R30
000466 0d11      	ADD  R17,R1
000467 1f29      	ADC  R18,R25
000468 1f39      	ADC  R19,R25
000469 1f49      	ADC  R20,R25
00046a 1f59      	ADC  R21,R25
00046b 2fe3      	MOV  R30,R19
00046c 2ff4      	MOV  R31,R20
00046d 2f65      	MOV  R22,R21
00046e 2f52      	MOV  R21,R18
00046f 914f      	POP  R20
000470 913f      	POP  R19
000471 912f      	POP  R18
000472 911f      	POP  R17
000473 900f      	POP  R0
000474 2366      	TST  R22
000475 f02a      	BRMI __MULF122
000476 0f55      	LSL  R21
000477 1fee      	ROL  R30
000478 1fff      	ROL  R31
000479 1f66      	ROL  R22
00047a c002      	RJMP __MULF123
                 __MULF122:
00047b 9573      	INC  R23
00047c f24b      	BRVS __MULF125
                 __MULF123:
00047d df29      	RCALL __ROUND_REPACK
00047e 915f      	POP  R21
00047f 9508      	RET
                 
                 __MULF127:
000480 0d10      	ADD  R17,R0
000481 1d21      	ADC  R18,R1
000482 1f39      	ADC  R19,R25
000483 c002      	RJMP __MULF128
                 __MULF126:
000484 0d20      	ADD  R18,R0
000485 1d31      	ADC  R19,R1
                 __MULF128:
000486 1f49      	ADC  R20,R25
000487 1f59      	ADC  R21,R25
000488 9508      	RET
                 
                 __ANEGW1:
000489 95f1      	NEG  R31
00048a 95e1      	NEG  R30
00048b 40f0      	SBCI R31,0
00048c 9508      	RET
                 
                 __ANEGD1:
00048d 95f0      	COM  R31
00048e 9560      	COM  R22
00048f 9570      	COM  R23
000490 95e1      	NEG  R30
000491 4fff      	SBCI R31,-1
000492 4f6f      	SBCI R22,-1
000493 4f7f      	SBCI R23,-1
000494 9508      	RET
                 
                 __LSLW2:
000495 0fee      	LSL  R30
000496 1fff      	ROL  R31
000497 0fee      	LSL  R30
000498 1fff      	ROL  R31
000499 9508      	RET
                 
                 __CWD2:
00049a 2f8b      	MOV  R24,R27
00049b 0f88      	ADD  R24,R24
00049c 0b88      	SBC  R24,R24
00049d 2f98      	MOV  R25,R24
00049e 9508      	RET
                 
                 __LNEGB1:
00049f 23ee      	TST  R30
0004a0 e0e1      	LDI  R30,1
0004a1 f009      	BREQ __LNEGB1F
0004a2 27ee      	CLR  R30
                 __LNEGB1F:
0004a3 9508      	RET
                 
                 __LNEGW1:
0004a4 2bef      	OR   R30,R31
0004a5 e0e1      	LDI  R30,1
0004a6 f009      	BREQ __LNEGW1F
0004a7 e0e0      	LDI  R30,0
                 __LNEGW1F:
0004a8 9508      	RET
                 
                 __DIVW21U:
0004a9 2400      	CLR  R0
0004aa 2411      	CLR  R1
0004ab e190      	LDI  R25,16
                 __DIVW21U1:
0004ac 0faa      	LSL  R26
0004ad 1fbb      	ROL  R27
0004ae 1c00      	ROL  R0
0004af 1c11      	ROL  R1
0004b0 1a0e      	SUB  R0,R30
0004b1 0a1f      	SBC  R1,R31
0004b2 f418      	BRCC __DIVW21U2
0004b3 0e0e      	ADD  R0,R30
0004b4 1e1f      	ADC  R1,R31
0004b5 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0004b6 60a1      	SBR  R26,1
                 __DIVW21U3:
0004b7 959a      	DEC  R25
0004b8 f799      	BRNE __DIVW21U1
0004b9 01fd      	MOVW R30,R26
0004ba 01d0      	MOVW R26,R0
0004bb 9508      	RET
                 
                 __DIVW21:
0004bc d004      	RCALL __CHKSIGNW
0004bd dfeb      	RCALL __DIVW21U
0004be f40e      	BRTC __DIVW211
0004bf dfc9      	RCALL __ANEGW1
                 __DIVW211:
0004c0 9508      	RET
                 
                 __CHKSIGNW:
0004c1 94e8      	CLT
0004c2 fff7      	SBRS R31,7
0004c3 c002      	RJMP __CHKSW1
0004c4 dfc4      	RCALL __ANEGW1
0004c5 9468      	SET
                 __CHKSW1:
0004c6 ffb7      	SBRS R27,7
0004c7 c006      	RJMP __CHKSW2
0004c8 95a0      	COM  R26
0004c9 95b0      	COM  R27
0004ca 9611      	ADIW R26,1
0004cb f800      	BLD  R0,0
0004cc 9403      	INC  R0
0004cd fa00      	BST  R0,0
                 __CHKSW2:
0004ce 9508      	RET
                 
                 __GETD1PF:
0004cf 9005      	LPM  R0,Z+
0004d0 9015      	LPM  R1,Z+
0004d1 9165      	LPM  R22,Z+
0004d2 9174      	LPM  R23,Z
0004d3 01f0      	MOVW R30,R0
0004d4 9508      	RET
                 
                 __CDF2U:
0004d5 9468      	SET
0004d6 c001      	RJMP __CDF2U0
                 __CDF2:
0004d7 94e8      	CLT
                 __CDF2U0:
0004d8 d001      	RCALL __SWAPD12
0004d9 df34      	RCALL __CDF1U0
                 
                 __SWAPD12:
0004da 2e18      	MOV  R1,R24
0004db 2f86      	MOV  R24,R22
0004dc 2d61      	MOV  R22,R1
0004dd 2e19      	MOV  R1,R25
0004de 2f97      	MOV  R25,R23
0004df 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
0004e0 2e1b      	MOV  R1,R27
0004e1 2fbf      	MOV  R27,R31
0004e2 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
0004e3 2e1a      	MOV  R1,R26
0004e4 2fae      	MOV  R26,R30
0004e5 2de1      	MOV  R30,R1
0004e6 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega328P register use summary:
r0 :  41 r1 :  28 r2 :   0 r3 :   2 r4 :   5 r5 :   4 r6 :   2 r7 :   4 
r8 :   4 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   3 r17:  16 r18:   7 r19:   8 r20:   8 r21:  44 r22:  35 r23:  32 
r24:  22 r25:  25 r26:  81 r27:  25 r28:   4 r29:   1 r30: 238 r31:  51 
x  :   6 y  :  44 z  :  13 
Registers used: 27 out of 35 (77.1%)

ATmega328P instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  17 add   :   8 
adiw  :   5 and   :   2 andi  :   2 asr   :   0 bclr  :   0 bld   :   2 
brbc  :   0 brbs  :   0 brcc  :   2 brcs  :   0 break :   0 breq  :  16 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   6 
brlt  :   1 brmi  :   4 brne  :  14 brpl  :   4 brsh  :   3 brtc  :   2 
brts  :   1 brvc  :   1 brvs  :   2 bset  :   0 bst   :   1 call  :  11 
cbi   :   0 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  17 cls   :   0 clt   :   4 clv   :   0 clz   :   0 com   :   6 
cp    :   5 cpc   :   1 cpi   :  23 cpse  :   0 dec   :   5 des   :   0 
eor   :   7 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   2 inc   :   4 jmp   :  27 ld    :  15 ldd   :   8 ldi   :  87 
lds   :  34 lpm   :  12 lsl   :  15 lsr   :   1 mov   :  43 movw  :  19 
mul   :  10 muls  :   6 mulsu :   0 neg   :   4 nop   :   0 or    :   3 
ori   :   2 out   :  23 pop   :  13 push  :  12 rcall :  36 ret   :  29 
reti  :   2 rjmp  :  26 rol   :  16 ror   :   9 sbc   :   2 sbci  :   9 
sbi   :   0 sbic  :   0 sbis  :   0 sbiw  :   4 sbr   :   1 sbrc  :   0 
sbrs  :   3 sec   :   1 seh   :   0 sei   :   1 sen   :   0 ser   :   8 
ses   :   0 set   :   4 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  29 std   :   0 sts   :  49 sub   :   2 subi  :   8 swap  :   2 
tst   :  10 wdr   :   0 
Instructions used: 70 out of 116 (60.3%)

ATmega328P memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0009ce   1768    742   2510   32768   7.7%
[.dseg] 0x000100 0x0003c1      0    193    193    2048   9.4%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 6 warnings
