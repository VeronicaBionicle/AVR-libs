
AVRASM ver. 2.1.30  D:\Студенческое\Системы управления преобразователями\code\Debug\List\invertor_pwm.asm Tue Mar 17 09:26:14 2020

D:\Студенческое\Системы управления преобразователями\code\Debug\List\invertor_pwm.asm(1090): warning: Register r4 already defined by the .DEF directive
D:\Студенческое\Системы управления преобразователями\code\Debug\List\invertor_pwm.asm(1091): warning: Register r3 already defined by the .DEF directive
D:\Студенческое\Системы управления преобразователями\code\Debug\List\invertor_pwm.asm(1092): warning: Register r6 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega328P
                 ;Program type           : Application
                 ;Clock frequency        : 7,680000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega328P
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x08FF
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _polarity=R4
                 	.DEF _B_polarity=R3
                 	.DEF _step=R6
                 
                 ;GPIOR0 INITIALIZATION VALUE
                 	.EQU __GPIOR0_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0095 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 00d2 	JMP  _timer1_compa_isr
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
                 
                 _sinus:
000034 0400
000035 0d09
000036 1612
000037 1f1b      	.DB  0x0,0x4,0x9,0xD,0x12,0x16,0x1B,0x1F
000038 2823
000039 312c
00003a 3935
00003b 423e      	.DB  0x23,0x28,0x2C,0x31,0x35,0x39,0x3E,0x42
00003c 4b46
00003d 534f
00003e 5b57
00003f 6460      	.DB  0x46,0x4B,0x4F,0x53,0x57,0x5B,0x60,0x64
000040 6c68
000041 7470
000042 7c78
000043 837f      	.DB  0x68,0x6C,0x70,0x74,0x78,0x7C,0x7F,0x83
000044 8b87
000045 928f
000046 9996
000047 a09d      	.DB  0x87,0x8B,0x8F,0x92,0x96,0x99,0x9D,0xA0
000048 a7a4
000049 aeab
00004a b4b1
00004b bab7      	.DB  0xA4,0xA7,0xAB,0xAE,0xB1,0xB4,0xB7,0xBA
00004c c0be
00004d c6c3
00004e ccc9
00004f d1ce      	.DB  0xBE,0xC0,0xC3,0xC6,0xC9,0xCC,0xCE,0xD1
000050 d6d3
000051 dbd8
000052 dfdd
000053 e3e1      	.DB  0xD3,0xD6,0xD8,0xDB,0xDD,0xDF,0xE1,0xE3
000054 e7e5
000055 ebe9
000056 eeec
000057 f1f0      	.DB  0xE5,0xE7,0xE9,0xEB,0xEC,0xEE,0xF0,0xF1
000058 f4f3
000059 f6f5
00005a f8f7
00005b faf9      	.DB  0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA
00005c fcfb
00005d fdfd
00005e fefe
00005f fffe      	.DB  0xFB,0xFC,0xFD,0xFD,0xFE,0xFE,0xFE,0xFF
000060 ffff
000061 ffff
000062 ffff
000063 fefe      	.DB  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,0xFE
000064 fdfe
000065 fcfd
000066 fafb
000067 f8f9      	.DB  0xFE,0xFD,0xFD,0xFC,0xFB,0xFA,0xF9,0xF8
000068 f6f7
000069 f4f5
00006a f1f3
00006b eef0      	.DB  0xF7,0xF6,0xF5,0xF4,0xF3,0xF1,0xF0,0xEE
00006c ebec
00006d e7e9
00006e e3e5
00006f dfe1      	.DB  0xEC,0xEB,0xE9,0xE7,0xE5,0xE3,0xE1,0xDF
000070 dbdd
000071 d6d8
000072 d1d3
000073 ccce      	.DB  0xDD,0xDB,0xD8,0xD6,0xD3,0xD1,0xCE,0xCC
000074 c6c9
000075 c0c3
000076 babe
000077 b4b7      	.DB  0xC9,0xC6,0xC3,0xC0,0xBE,0xBA,0xB7,0xB4
000078 aeb1
000079 a7ab
00007a a0a4
00007b 999d      	.DB  0xB1,0xAE,0xAB,0xA7,0xA4,0xA0,0x9D,0x99
00007c 9296
00007d 8b8f
00007e 8387
00007f 7c7f      	.DB  0x96,0x92,0x8F,0x8B,0x87,0x83,0x7F,0x7C
000080 7478
000081 6c70
000082 6468
000083 5b60      	.DB  0x78,0x74,0x70,0x6C,0x68,0x64,0x60,0x5B
000084 5357
000085 4b4f
000086 4246
000087 393e      	.DB  0x57,0x53,0x4F,0x4B,0x46,0x42,0x3E,0x39
000088 3135
000089 282c
00008a 1f23
00008b 161b      	.DB  0x35,0x31,0x2C,0x28,0x23,0x1F,0x1B,0x16
00008c 0d12
00008d 0409
D:\Студенческое\Системы управления преобразователями\code\Debug\List\invertor_pwm.asm(1154): warning: .cseg .db misalignment - padding zero byte
00008e 0000      	.DB  0x12,0xD,0x9,0x4,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00008f 0100
000090 0000      	.DB  0x0,0x1,0x0,0x0
                 
                 
                 __GLOBAL_INI_TBL:
000091 0004      	.DW  0x04
000092 0003      	.DW  0x03
000093 011e      	.DW  __REG_VARS*2
                 
                 _0xFFFFFFFF:
000094 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000095 94f8      	CLI
000096 27ee      	CLR  R30
000097 bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000098 e0f1      	LDI  R31,1
000099 bff5      	OUT  MCUCR,R31
00009a bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00009b e08d      	LDI  R24,(14-2)+1
00009c e0a2      	LDI  R26,2
00009d 27bb      	CLR  R27
                 __CLEAR_REG:
00009e 93ed      	ST   X+,R30
00009f 958a      	DEC  R24
0000a0 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0000a1 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0000a2 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0000a3 e0a0      	LDI  R26,LOW(__SRAM_START)
0000a4 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
0000a5 93ed      	ST   X+,R30
0000a6 9701      	SBIW R24,1
0000a7 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0000a8 e2e2      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0000a9 e0f1      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0000aa 9185      	LPM  R24,Z+
0000ab 9195      	LPM  R25,Z+
0000ac 9700      	SBIW R24,0
0000ad f061      	BREQ __GLOBAL_INI_END
0000ae 91a5      	LPM  R26,Z+
0000af 91b5      	LPM  R27,Z+
0000b0 9005      	LPM  R0,Z+
0000b1 9015      	LPM  R1,Z+
0000b2 01bf      	MOVW R22,R30
0000b3 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0000b4 9005      	LPM  R0,Z+
0000b5 920d      	ST   X+,R0
0000b6 9701      	SBIW R24,1
0000b7 f7e1      	BRNE __GLOBAL_INI_LOOP
0000b8 01fb      	MOVW R30,R22
0000b9 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0 INITIALIZATION
0000ba e0e0      	LDI  R30,__GPIOR0_INIT
0000bb bbee      	OUT  GPIOR0,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0000bc efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000bd bfed      	OUT  SPL,R30
0000be e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000bf bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000c0 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000c1 e0d3      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000c2 940c 012b 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x300
                 
                 	.CSEG
                 ;#include <mega328p.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 ;
                 ;#define low(x)   ((x) & 0xFF)
                 ;#define high(x)   (((x)>>8) & 0xFF)
                 ;
                 ;#define FGEN 7680000UL
                 ;#define TIMER0_A_PWM (1<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (1<<WGM00)
                 ;#define TIMER0_B_PWM (0<<COM0A1) | (0<<COM0A0) | (1<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (1<<WGM00)
                 ;#define N 180 //points
                 ;
                 ;unsigned char polarity = 1;
                 ;unsigned char B_polarity = 0;
                 ;unsigned char step = 0;
                 ;
                 ;
                 ;void sinus_period(unsigned int frequency, unsigned char points) {
                 ; 0000 0010 void sinus_period(unsigned int frequency, unsigned char points) {
                 
                 	.CSEG
                 _sinus_period:
                 ; .FSTART _sinus_period
                 ; 0000 0011     OCR1AH = high(FGEN/2/points/frequency);
0000c4 93aa      	ST   -Y,R26
                 ;	frequency -> Y+1
                 ;	points -> Y+0
0000c5 d068      	RCALL SUBOPT_0x0
0000c6 01df      	MOVW R26,R30
0000c7 01cb      	MOVW R24,R22
0000c8 e0e8      	LDI  R30,LOW(8)
0000c9 940e 0150 	CALL __ASRD12
0000cb 93e0 0089 	STS  137,R30
                 ; 0000 0012     OCR1AL = low(FGEN/2/points/frequency);
0000cd d060      	RCALL SUBOPT_0x0
0000ce 93e0 0088 	STS  136,R30
                 ; 0000 0013 }
0000d0 9623      	ADIW R28,3
0000d1 9508      	RET
                 ; .FEND
                 ;
                 ;const unsigned char sinus[N+1] = {0, 4, 9, 13, 18, 22, 27, 31, 35, 40, 44, 49, 53, 57, 62, 66,
                 ;                                    70, 75, 79, 83, 87, 91, 96, 100, 104, 108, 112, 116, 120, 124, 127,
                 ;                                    131, 135, 139, 143, 146, 150, 153, 157, 160, 164, 167, 171, 174, 177,
                 ;                                    180, 183, 186, 190, 192, 195, 198, 201, 204, 206, 209, 211, 214, 216,
                 ;                                    219, 221, 223, 225, 227, 229, 231, 233, 235, 236, 238, 240, 241, 243,
                 ;                                    244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 253, 254, 254, 254,
                 ;                                    255, 255, 255, 255, 255, 255, 255, 254, 254, 254, 253, 253, 252, 251,
                 ;                                    250, 249, 248, 247, 246, 245, 244, 243, 241, 240, 238, 236, 235, 233,
                 ;                                    231, 229, 227, 225, 223, 221, 219, 216, 214, 211, 209, 206, 204, 201,
                 ;                                    198, 195, 192, 190, 186, 183, 180, 177, 174, 171, 167, 164, 160, 157,
                 ;                                    153, 150, 146, 143, 139, 135, 131, 127, 124, 120, 116, 112, 108, 104,
                 ;                                    100, 96, 91, 87, 83, 79, 75, 70, 66, 62, 57, 53, 49, 44, 40, 35,
                 ;                                    31, 27, 22, 18, 13, 9, 4, 0};
                 ;
                 ;
                 ;interrupt [TIM1_COMPA] void timer1_compa_isr(void)
                 ; 0000 0025 {
                 _timer1_compa_isr:
                 ; .FSTART _timer1_compa_isr
0000d2 920a      	ST   -Y,R0
0000d3 93ea      	ST   -Y,R30
0000d4 93fa      	ST   -Y,R31
0000d5 b7ef      	IN   R30,SREG
0000d6 93ea      	ST   -Y,R30
                 ; 0000 0026    if (step > N) {polarity ^= 1; step = 0;};
0000d7 ebe4      	LDI  R30,LOW(180)
0000d8 15e6      	CP   R30,R6
0000d9 f418      	BRSH _0x3
0000da e0e1      	LDI  R30,LOW(1)
0000db 264e      	EOR  R4,R30
0000dc 2466      	CLR  R6
                 _0x3:
                 ; 0000 0027    if (step == 2 || step == N-2) {B_polarity ^= 1;};
0000dd e0e2      	LDI  R30,LOW(2)
0000de 15e6      	CP   R30,R6
0000df f019      	BREQ _0x5
0000e0 ebe2      	LDI  R30,LOW(178)
0000e1 15e6      	CP   R30,R6
0000e2 f411      	BRNE _0x4
                 _0x5:
0000e3 e0e1      	LDI  R30,LOW(1)
0000e4 263e      	EOR  R3,R30
                 _0x4:
                 ; 0000 0028    step++;
0000e5 9463      	INC  R6
                 ; 0000 0029    if (polarity == 1) {
0000e6 e0e1      	LDI  R30,LOW(1)
0000e7 15e4      	CP   R30,R4
0000e8 f429      	BRNE _0x7
                 ; 0000 002A     TCCR0A = TIMER0_A_PWM;
0000e9 e8e1      	LDI  R30,LOW(129)
0000ea d056      	RCALL SUBOPT_0x1
                 ; 0000 002B     OCR0A = sinus[step];
0000eb bc07      	OUT  0x27,R0
                 ; 0000 002C     PORTC = (B_polarity << PORTC0);
0000ec b838      	OUT  0x8,R3
                 ; 0000 002D    } else {
0000ed c006      	RJMP _0x8
                 _0x7:
                 ; 0000 002E     TCCR0A=TIMER0_B_PWM;
0000ee e2e1      	LDI  R30,LOW(33)
0000ef d051      	RCALL SUBOPT_0x1
                 ; 0000 002F     OCR0B = sinus[step];
0000f0 bc08      	OUT  0x28,R0
                 ; 0000 0030     PORTC = (B_polarity << PORTC1);
0000f1 2de3      	MOV  R30,R3
0000f2 0fee      	LSL  R30
0000f3 b9e8      	OUT  0x8,R30
                 ; 0000 0031    }
                 _0x8:
                 ; 0000 0032 }
0000f4 91e9      	LD   R30,Y+
0000f5 bfef      	OUT  SREG,R30
0000f6 91f9      	LD   R31,Y+
0000f7 91e9      	LD   R30,Y+
0000f8 9009      	LD   R0,Y+
0000f9 9518      	RETI
                 ; .FEND
                 ;
                 ;void setup() {
                 ; 0000 0034 void setup() {
                 _setup:
                 ; .FSTART _setup
                 ; 0000 0035 // Crystal Oscillator division factor: 1
                 ; 0000 0036 #pragma optsize-
                 ; 0000 0037 CLKPR=(1<<CLKPCE);
0000fa e8e0      	LDI  R30,LOW(128)
0000fb 93e0 0061 	STS  97,R30
                 ; 0000 0038 CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
0000fd e0e0      	LDI  R30,LOW(0)
0000fe 93e0 0061 	STS  97,R30
                 ; 0000 0039 #ifdef _OPTIMIZE_SIZE_
                 ; 0000 003A #pragma optsize+
                 ; 0000 003B #endif
                 ; 0000 003C 
                 ; 0000 003D // Ports init
                 ; 0000 003E DDRC=(1<<DDC1) | (1<<DDC0);
000100 e0e3      	LDI  R30,LOW(3)
000101 b9e7      	OUT  0x7,R30
                 ; 0000 003F DDRD=(1<<DDD6) | (1<<DDD5);
000102 e6e0      	LDI  R30,LOW(96)
000103 b9ea      	OUT  0xA,R30
                 ; 0000 0040 
                 ; 0000 0041 // Timer/Counter 0 initialization
                 ; 0000 0042 TCCR0A=TIMER0_A_PWM;
000104 e8e1      	LDI  R30,LOW(129)
000105 bde4      	OUT  0x24,R30
                 ; 0000 0043 TCCR0B=(0<<WGM02) | (0<<CS02) | (0<<CS01) | (1<<CS00);
000106 e0e1      	LDI  R30,LOW(1)
000107 bde5      	OUT  0x25,R30
                 ; 0000 0044 TCNT0=0;
000108 e0e0      	LDI  R30,LOW(0)
000109 bde6      	OUT  0x26,R30
                 ; 0000 0045 OCR0A=0;
00010a bde7      	OUT  0x27,R30
                 ; 0000 0046 OCR0B=0;
00010b bde8      	OUT  0x28,R30
                 ; 0000 0047 
                 ; 0000 0048 // Timer/Counter 1 initialization
                 ; 0000 0049 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
00010c 93e0 0080 	STS  128,R30
                 ; 0000 004A TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (1<<WGM12) | (0<<CS12) | (0<<CS11) | (1<<CS10);
00010e e0e9      	LDI  R30,LOW(9)
00010f 93e0 0081 	STS  129,R30
                 ; 0000 004B TCNT1H=0;
000111 e0e0      	LDI  R30,LOW(0)
000112 93e0 0085 	STS  133,R30
                 ; 0000 004C TCNT1L=0;
000114 93e0 0084 	STS  132,R30
                 ; 0000 004D ICR1H=0;
000116 93e0 0087 	STS  135,R30
                 ; 0000 004E ICR1L=0;
000118 93e0 0086 	STS  134,R30
                 ; 0000 004F OCR1BH=0;
00011a 93e0 008b 	STS  139,R30
                 ; 0000 0050 OCR1BL=0;
00011c 93e0 008a 	STS  138,R30
                 ; 0000 0051 // Timer/Counter 1 Interrupt(s) initialization
                 ; 0000 0052 TIMSK1=(0<<ICIE1) | (0<<OCIE1B) | (1<<OCIE1A) | (0<<TOIE1);
00011e e0e2      	LDI  R30,LOW(2)
00011f 93e0 006f 	STS  111,R30
                 ; 0000 0053 ACSR=(1<<ACD);
000121 e8e0      	LDI  R30,LOW(128)
000122 bfe0      	OUT  0x30,R30
                 ; 0000 0054 
                 ; 0000 0055 sinus_period(50, N);
000123 e3e2      	LDI  R30,LOW(50)
000124 e0f0      	LDI  R31,HIGH(50)
000125 93fa      	ST   -Y,R31
000126 93ea      	ST   -Y,R30
000127 eba4      	LDI  R26,LOW(180)
000128 df9b      	RCALL _sinus_period
                 ; 0000 0056 
                 ; 0000 0057 #asm("sei")
000129 9478      	sei
                 ; 0000 0058 }
00012a 9508      	RET
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 005B {
                 _main:
                 ; .FSTART _main
                 ; 0000 005C  setup();
00012b dfce      	RCALL _setup
                 ; 0000 005D while (1)
                 _0x9:
                 ; 0000 005E       {
                 ; 0000 005F       }
00012c cfff      	RJMP _0x9
                 ; 0000 0060 }
                 _0xC:
00012d cfff      	RJMP _0xC
                 ; .FEND
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x0:
00012e 81e8      	LD   R30,Y
00012f e0f0      	LDI  R31,0
000130 940e 015c 	CALL __CWD1
                +
000132 e0a0     +LDI R26 , LOW ( 0x3A9800 )
000133 e9b8     +LDI R27 , HIGH ( 0x3A9800 )
000134 e38a     +LDI R24 , BYTE3 ( 0x3A9800 )
000135 e090     +LDI R25 , BYTE4 ( 0x3A9800 )
                 	__GETD2N 0x3A9800
000136 940e 0186 	CALL __DIVD21
000138 01df      	MOVW R26,R30
000139 01cb      	MOVW R24,R22
00013a 81e9      	LDD  R30,Y+1
00013b 81fa      	LDD  R31,Y+1+1
00013c 2766      	CLR  R22
00013d 2777      	CLR  R23
00013e 940e 0186 	CALL __DIVD21
000140 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
000141 bde4      	OUT  0x24,R30
000142 2de6      	MOV  R30,R6
000143 e0f0      	LDI  R31,0
000144 59e8      	SUBI R30,LOW(-_sinus*2)
000145 4fff      	SBCI R31,HIGH(-_sinus*2)
000146 9004      	LPM  R0,Z
000147 9508      	RET
                 
                 
                 	.CSEG
                 __ANEGD1:
000148 95f0      	COM  R31
000149 9560      	COM  R22
00014a 9570      	COM  R23
00014b 95e1      	NEG  R30
00014c 4fff      	SBCI R31,-1
00014d 4f6f      	SBCI R22,-1
00014e 4f7f      	SBCI R23,-1
00014f 9508      	RET
                 
                 __ASRD12:
000150 23ee      	TST  R30
000151 2e0e      	MOV  R0,R30
000152 01fd      	MOVW R30,R26
000153 01bc      	MOVW R22,R24
000154 f031      	BREQ __ASRD12R
                 __ASRD12L:
000155 9575      	ASR  R23
000156 9567      	ROR  R22
000157 95f7      	ROR  R31
000158 95e7      	ROR  R30
000159 940a      	DEC  R0
00015a f7d1      	BRNE __ASRD12L
                 __ASRD12R:
00015b 9508      	RET
                 
                 __CWD1:
00015c 2f6f      	MOV  R22,R31
00015d 0f66      	ADD  R22,R22
00015e 0b66      	SBC  R22,R22
00015f 2f76      	MOV  R23,R22
000160 9508      	RET
                 
                 __DIVD21U:
000161 933f      	PUSH R19
000162 934f      	PUSH R20
000163 935f      	PUSH R21
000164 2400      	CLR  R0
000165 2411      	CLR  R1
000166 2744      	CLR  R20
000167 2755      	CLR  R21
000168 e230      	LDI  R19,32
                 __DIVD21U1:
000169 0faa      	LSL  R26
00016a 1fbb      	ROL  R27
00016b 1f88      	ROL  R24
00016c 1f99      	ROL  R25
00016d 1c00      	ROL  R0
00016e 1c11      	ROL  R1
00016f 1f44      	ROL  R20
000170 1f55      	ROL  R21
000171 1a0e      	SUB  R0,R30
000172 0a1f      	SBC  R1,R31
000173 0b46      	SBC  R20,R22
000174 0b57      	SBC  R21,R23
000175 f428      	BRCC __DIVD21U2
000176 0e0e      	ADD  R0,R30
000177 1e1f      	ADC  R1,R31
000178 1f46      	ADC  R20,R22
000179 1f57      	ADC  R21,R23
00017a c001      	RJMP __DIVD21U3
                 __DIVD21U2:
00017b 60a1      	SBR  R26,1
                 __DIVD21U3:
00017c 953a      	DEC  R19
00017d f759      	BRNE __DIVD21U1
00017e 01fd      	MOVW R30,R26
00017f 01bc      	MOVW R22,R24
000180 01d0      	MOVW R26,R0
000181 01ca      	MOVW R24,R20
000182 915f      	POP  R21
000183 914f      	POP  R20
000184 913f      	POP  R19
000185 9508      	RET
                 
                 __DIVD21:
000186 d004      	RCALL __CHKSIGND
000187 dfd9      	RCALL __DIVD21U
000188 f40e      	BRTC __DIVD211
000189 dfbe      	RCALL __ANEGD1
                 __DIVD211:
00018a 9508      	RET
                 
                 __CHKSIGND:
00018b 94e8      	CLT
00018c ff77      	SBRS R23,7
00018d c002      	RJMP __CHKSD1
00018e dfb9      	RCALL __ANEGD1
00018f 9468      	SET
                 __CHKSD1:
000190 ff97      	SBRS R25,7
000191 c00b      	RJMP __CHKSD2
000192 2400      	CLR  R0
000193 95a0      	COM  R26
000194 95b0      	COM  R27
000195 9580      	COM  R24
000196 9590      	COM  R25
000197 9611      	ADIW R26,1
000198 1d80      	ADC  R24,R0
000199 1d90      	ADC  R25,R0
00019a f800      	BLD  R0,0
00019b 9403      	INC  R0
00019c fa00      	BST  R0,0
                 __CHKSD2:
00019d 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega328P register use summary:
r0 :  22 r1 :   5 r2 :   0 r3 :   3 r4 :   2 r5 :   0 r6 :   6 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   0 r17:   0 r18:   0 r19:   4 r20:   7 r21:   6 r22:  18 r23:   8 
r24:  16 r25:   7 r26:  15 r27:   6 r28:   2 r29:   1 r30:  88 r31:  17 
x  :   3 y  :  14 z  :   8 
Registers used: 21 out of 35 (60.0%)

ATmega328P instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   5 add   :   2 
adiw  :   2 and   :   0 andi  :   0 asr   :   1 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   3 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :   7 brpl  :   0 brsh  :   1 brtc  :   1 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :   4 
cbi   :   0 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  10 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   7 
cp    :   4 cpc   :   0 cpi   :   0 cpse  :   0 dec   :   3 des   :   0 
eor   :   2 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   1 inc   :   2 jmp   :  27 ld    :   5 ldd   :   2 ldi   :  44 
lds   :   0 lpm   :   9 lsl   :   2 lsr   :   0 mov   :   5 movw  :  13 
mul   :   0 muls  :   0 mulsu :   0 neg   :   1 nop   :   0 or    :   0 
ori   :   0 out   :  20 pop   :   3 push  :   3 rcall :  10 ret   :  10 
reti  :   1 rjmp  :   7 rol   :   7 ror   :   3 sbc   :   4 sbci  :   4 
sbi   :   0 sbic  :   0 sbis  :   0 sbiw  :   3 sbr   :   1 sbrc  :   0 
sbrs  :   2 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  10 std   :   0 sts   :  13 sub   :   1 subi  :   1 swap  :   0 
tst   :   1 wdr   :   0 
Instructions used: 51 out of 116 (44.0%)

ATmega328P memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00033c    634    194    828   32768   2.5%
[.dseg] 0x000100 0x000300      0      0      0    2048   0.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 4 warnings
