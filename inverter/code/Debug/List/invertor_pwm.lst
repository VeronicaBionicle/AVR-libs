
AVRASM ver. 2.1.30  D:\Студенческое\Системы управления преобразователями\code\Debug\List\invertor_pwm.asm Thu Apr 09 12:06:18 2020

D:\Студенческое\Системы управления преобразователями\code\Debug\List\invertor_pwm.asm(1090): warning: Register r4 already defined by the .DEF directive
D:\Студенческое\Системы управления преобразователями\code\Debug\List\invertor_pwm.asm(1091): warning: Register r3 already defined by the .DEF directive
D:\Студенческое\Системы управления преобразователями\code\Debug\List\invertor_pwm.asm(1092): warning: Register r6 already defined by the .DEF directive
D:\Студенческое\Системы управления преобразователями\code\Debug\List\invertor_pwm.asm(1093): warning: Register r5 already defined by the .DEF directive
D:\Студенческое\Системы управления преобразователями\code\Debug\List\invertor_pwm.asm(1094): warning: Register r8 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega328P
                 ;Program type           : Application
                 ;Clock frequency        : 12,000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': No
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega328P
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x08FF
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _ADC_input=R4
                 	.DEF _phase_b_step=R3
                 	.DEF _phase_c_step=R6
                 	.DEF _amplitude=R5
                 	.DEF _frequency=R8
                 
                 ;GPIOR0 INITIALIZATION VALUE
                 	.EQU __GPIOR0_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 01a7 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0260 	JMP  _timer1_compa_isr
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 02a6 	JMP  _adc_isr
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
                 
                 _sinus_table:
000034 0000
000035 3f00
000036 5a1d
000037 3f04      	.DB  0x0,0x0,0x0,0x3F,0x1D,0x5A,0x4,0x3F
000038 f5c3
000039 3f08
00003a 4fdf
00003b 3f0d      	.DB  0xC3,0xF5,0x8,0x3F,0xDF,0x4F,0xD,0x3F
00003c eb85
00003d 3f11
00003e 45a2
00003f 3f16      	.DB  0x85,0xEB,0x11,0x3F,0xA2,0x45,0x16,0x3F
000040 9fbe
000041 3f1a
000042 f9db
000043 3f1e      	.DB  0xBE,0x9F,0x1A,0x3F,0xDB,0xF9,0x1E,0x3F
000044 53f8
000045 3f23
000046 ae14
000047 3f27      	.DB  0xF8,0x53,0x23,0x3F,0x14,0xAE,0x27,0x3F
000048 c6a8
000049 3f2b
00004a df3b
00004b 3f2f      	.DB  0xA8,0xC6,0x2B,0x3F,0x3B,0xDF,0x2F,0x3F
00004c f7cf
00004d 3f33
00004e 1062
00004f 3f38      	.DB  0xCF,0xF7,0x33,0x3F,0x62,0x10,0x38,0x3F
000050 28f6
000051 3f3c
000052 0000
000053 3f40      	.DB  0xF6,0x28,0x3C,0x3F,0x0,0x0,0x40,0x3F
000054 d70a
000055 3f43
000056 ae14
000057 3f47      	.DB  0xA,0xD7,0x43,0x3F,0x14,0xAE,0x47,0x3F
000058 4396
000059 3f4b
00005a d917
00005b 3f4e      	.DB  0x96,0x43,0x4B,0x3F,0x17,0xD9,0x4E,0x3F
00005c 2d0e
00005d 3f52
00005e c28f
00005f 3f55      	.DB  0xE,0x2D,0x52,0x3F,0x8F,0xC2,0x55,0x3F
000060 d4fe
000061 3f58
000062 28f6
000063 3f5c      	.DB  0xFE,0xD4,0x58,0x3F,0xF6,0x28,0x5C,0x3F
000064 3b64
000065 3f5f
000066 0c4a
000067 3f62      	.DB  0x64,0x3B,0x5F,0x3F,0x4A,0xC,0x62,0x3F
000068 dd2f
000069 3f64
00006a ae14
00006b 3f67      	.DB  0x2F,0xDD,0x64,0x3F,0x14,0xAE,0x67,0x3F
00006c 3d71
00006d 3f6a
00006e 8b44
00006f 3f6c      	.DB  0x71,0x3D,0x6A,0x3F,0x44,0x8B,0x6C,0x3F
000070 d917
000071 3f6e
000072 e560
000073 3f70      	.DB  0x17,0xD9,0x6E,0x3F,0x60,0xE5,0x70,0x3F
000074 f1aa
000075 3f72
000076 fdf4
000077 3f74      	.DB  0xAA,0xF1,0x72,0x3F,0xF4,0xFD,0x74,0x3F
000078 c8b4
000079 3f76
00007a 51ec
00007b 3f78      	.DB  0xB4,0xC8,0x76,0x3F,0xEC,0x51,0x78,0x3F
00007c db23
00007d 3f79
00007e 22d1
00007f 3f7b      	.DB  0x23,0xDB,0x79,0x3F,0xD1,0x22,0x7B,0x3F
000080 28f6
000081 3f7c
000082 2f1b
000083 3f7d      	.DB  0xF6,0x28,0x7C,0x3F,0x1B,0x2F,0x7D,0x3F
000084 f3b6
000085 3f7d
000086 b852
000087 3f7e      	.DB  0xB6,0xF3,0x7D,0x3F,0x52,0xB8,0x7E,0x3F
000088 3b64
000089 3f7f
00008a be77
00008b 3f7f      	.DB  0x64,0x3B,0x7F,0x3F,0x77,0xBE,0x7F,0x3F
00008c 0000
00008d 3f80
00008e 0000
00008f 3f80      	.DB  0x0,0x0,0x80,0x3F,0x0,0x0,0x80,0x3F
000090 0000
000091 3f80
000092 be77
000093 3f7f      	.DB  0x0,0x0,0x80,0x3F,0x77,0xBE,0x7F,0x3F
000094 3b64
000095 3f7f
000096 b852
000097 3f7e      	.DB  0x64,0x3B,0x7F,0x3F,0x52,0xB8,0x7E,0x3F
000098 f3b6
000099 3f7d
00009a 2f1b
00009b 3f7d      	.DB  0xB6,0xF3,0x7D,0x3F,0x1B,0x2F,0x7D,0x3F
00009c 28f6
00009d 3f7c
00009e 22d1
00009f 3f7b      	.DB  0xF6,0x28,0x7C,0x3F,0xD1,0x22,0x7B,0x3F
0000a0 db23
0000a1 3f79
0000a2 51ec
0000a3 3f78      	.DB  0x23,0xDB,0x79,0x3F,0xEC,0x51,0x78,0x3F
0000a4 c8b4
0000a5 3f76
0000a6 fdf4
0000a7 3f74      	.DB  0xB4,0xC8,0x76,0x3F,0xF4,0xFD,0x74,0x3F
0000a8 f1aa
0000a9 3f72
0000aa e560
0000ab 3f70      	.DB  0xAA,0xF1,0x72,0x3F,0x60,0xE5,0x70,0x3F
0000ac d917
0000ad 3f6e
0000ae 8b44
0000af 3f6c      	.DB  0x17,0xD9,0x6E,0x3F,0x44,0x8B,0x6C,0x3F
0000b0 3d71
0000b1 3f6a
0000b2 ae14
0000b3 3f67      	.DB  0x71,0x3D,0x6A,0x3F,0x14,0xAE,0x67,0x3F
0000b4 dd2f
0000b5 3f64
0000b6 0c4a
0000b7 3f62      	.DB  0x2F,0xDD,0x64,0x3F,0x4A,0xC,0x62,0x3F
0000b8 3b64
0000b9 3f5f
0000ba 28f6
0000bb 3f5c      	.DB  0x64,0x3B,0x5F,0x3F,0xF6,0x28,0x5C,0x3F
0000bc d4fe
0000bd 3f58
0000be c28f
0000bf 3f55      	.DB  0xFE,0xD4,0x58,0x3F,0x8F,0xC2,0x55,0x3F
0000c0 2d0e
0000c1 3f52
0000c2 d917
0000c3 3f4e      	.DB  0xE,0x2D,0x52,0x3F,0x17,0xD9,0x4E,0x3F
0000c4 4396
0000c5 3f4b
0000c6 ae14
0000c7 3f47      	.DB  0x96,0x43,0x4B,0x3F,0x14,0xAE,0x47,0x3F
0000c8 d70a
0000c9 3f43
0000ca 0000
0000cb 3f40      	.DB  0xA,0xD7,0x43,0x3F,0x0,0x0,0x40,0x3F
0000cc 28f6
0000cd 3f3c
0000ce 1062
0000cf 3f38      	.DB  0xF6,0x28,0x3C,0x3F,0x62,0x10,0x38,0x3F
0000d0 f7cf
0000d1 3f33
0000d2 df3b
0000d3 3f2f      	.DB  0xCF,0xF7,0x33,0x3F,0x3B,0xDF,0x2F,0x3F
0000d4 c6a8
0000d5 3f2b
0000d6 ae14
0000d7 3f27      	.DB  0xA8,0xC6,0x2B,0x3F,0x14,0xAE,0x27,0x3F
0000d8 53f8
0000d9 3f23
0000da f9db
0000db 3f1e      	.DB  0xF8,0x53,0x23,0x3F,0xDB,0xF9,0x1E,0x3F
0000dc 9fbe
0000dd 3f1a
0000de 45a2
0000df 3f16      	.DB  0xBE,0x9F,0x1A,0x3F,0xA2,0x45,0x16,0x3F
0000e0 eb85
0000e1 3f11
0000e2 4fdf
0000e3 3f0d      	.DB  0x85,0xEB,0x11,0x3F,0xDF,0x4F,0xD,0x3F
0000e4 f5c3
0000e5 3f08
0000e6 5a1d
0000e7 3f04      	.DB  0xC3,0xF5,0x8,0x3F,0x1D,0x5A,0x4,0x3F
0000e8 0000
0000e9 3f00
0000ea 4bc7
0000eb 3ef7      	.DB  0x0,0x0,0x0,0x3F,0xC7,0x4B,0xF7,0x3E
0000ec 147b
0000ed 3eee
0000ee 6042
0000ef 3ee5      	.DB  0x7B,0x14,0xEE,0x3E,0x42,0x60,0xE5,0x3E
0000f0 28f6
0000f1 3edc
0000f2 74bc
0000f3 3ed3      	.DB  0xF6,0x28,0xDC,0x3E,0xBC,0x74,0xD3,0x3E
0000f4 c083
0000f5 3eca
0000f6 0c4a
0000f7 3ec2      	.DB  0x83,0xC0,0xCA,0x3E,0x4A,0xC,0xC2,0x3E
0000f8 5810
0000f9 3eb9
0000fa a3d7
0000fb 3eb0      	.DB  0x10,0x58,0xB9,0x3E,0xD7,0xA3,0xB0,0x3E
0000fc 72b0
0000fd 3ea8
0000fe 4189
0000ff 3ea0      	.DB  0xB0,0x72,0xA8,0x3E,0x89,0x41,0xA0,0x3E
000100 1062
000101 3e98
000102 df3b
000103 3e8f      	.DB  0x62,0x10,0x98,0x3E,0x3B,0xDF,0x8F,0x3E
000104 ae14
000105 3e87
000106 0000
000107 3e80      	.DB  0x14,0xAE,0x87,0x3E,0x0,0x0,0x80,0x3E
000108 a3d7
000109 3e70
00010a 47ae
00010b 3e61      	.DB  0xD7,0xA3,0x70,0x3E,0xAE,0x47,0x61,0x3E
00010c f1aa
00010d 3e52
00010e 9ba6
00010f 3e44      	.DB  0xAA,0xF1,0x52,0x3E,0xA6,0x9B,0x44,0x3E
000110 4bc7
000111 3e37
000112 f5c3
000113 3e28      	.DB  0xC7,0x4B,0x37,0x3E,0xC3,0xF5,0x28,0x3E
000114 ac08
000115 3e1c
000116 5c29
000117 3e0f      	.DB  0x8,0xAC,0x1C,0x3E,0x29,0x5C,0xF,0x3E
000118 126f
000119 3e03
00011a 9db2
00011b 3def      	.DB  0x6F,0x12,0x3,0x3E,0xB2,0x9D,0xEF,0x3D
00011c 1687
00011d 3dd9
00011e 9581
00011f 3dc3      	.DB  0x87,0x16,0xD9,0x3D,0x81,0x95,0xC3,0x3D
000120 1aa0
000121 3daf
000122 a5e3
000123 3d9b      	.DB  0xA0,0x1A,0xAF,0x3D,0xE3,0xA5,0x9B,0x3D
000124 374c
000125 3d89
000126 9db2
000127 3d6f      	.DB  0x4C,0x37,0x89,0x3D,0xB2,0x9D,0x6F,0x3D
000128 41f2
000129 3d4f
00012a f27c
00012b 3d30      	.DB  0xF2,0x41,0x4F,0x3D,0x7C,0xF2,0x30,0x3D
00012c 182b
00012d 3d15
00012e 65fe
00012f 3cf7      	.DB  0x2B,0x18,0x15,0x3D,0xFE,0x65,0xF7,0x3C
000130 b439
000131 3cc8
000132 ecc0
000133 3c9e      	.DB  0x39,0xB4,0xC8,0x3C,0xC0,0xEC,0x9E,0x3C
000134 1f21
000135 3c74
000136 95ea
000137 3c32      	.DB  0x21,0x1F,0x74,0x3C,0xEA,0x95,0x32,0x3C
000138 096c
000139 3bf9
00013a 9485
00013b 3b9f      	.DB  0x6C,0x9,0xF9,0x3B,0x85,0x94,0x9F,0x3B
00013c 9192
00013d 3b33
00013e e868
00013f 3a9f      	.DB  0x92,0x91,0x33,0x3B,0x68,0xE8,0x9F,0x3A
000140 e868
000141 399f
000142 0000
000143 0000      	.DB  0x68,0xE8,0x9F,0x39,0x0,0x0,0x0,0x0
000144 e868
000145 399f
000146 e868
000147 3a9f      	.DB  0x68,0xE8,0x9F,0x39,0x68,0xE8,0x9F,0x3A
000148 9192
000149 3b33
00014a 9485
00014b 3b9f      	.DB  0x92,0x91,0x33,0x3B,0x85,0x94,0x9F,0x3B
00014c 096c
00014d 3bf9
00014e 95ea
00014f 3c32      	.DB  0x6C,0x9,0xF9,0x3B,0xEA,0x95,0x32,0x3C
000150 1f21
000151 3c74
000152 ecc0
000153 3c9e      	.DB  0x21,0x1F,0x74,0x3C,0xC0,0xEC,0x9E,0x3C
000154 b439
000155 3cc8
000156 65fe
000157 3cf7      	.DB  0x39,0xB4,0xC8,0x3C,0xFE,0x65,0xF7,0x3C
000158 182b
000159 3d15
00015a f27c
00015b 3d30      	.DB  0x2B,0x18,0x15,0x3D,0x7C,0xF2,0x30,0x3D
00015c 41f2
00015d 3d4f
00015e 9db2
00015f 3d6f      	.DB  0xF2,0x41,0x4F,0x3D,0xB2,0x9D,0x6F,0x3D
000160 374c
000161 3d89
000162 a5e3
000163 3d9b      	.DB  0x4C,0x37,0x89,0x3D,0xE3,0xA5,0x9B,0x3D
000164 1aa0
000165 3daf
000166 9581
000167 3dc3      	.DB  0xA0,0x1A,0xAF,0x3D,0x81,0x95,0xC3,0x3D
000168 1687
000169 3dd9
00016a 9db2
00016b 3def      	.DB  0x87,0x16,0xD9,0x3D,0xB2,0x9D,0xEF,0x3D
00016c 126f
00016d 3e03
00016e 5c29
00016f 3e0f      	.DB  0x6F,0x12,0x3,0x3E,0x29,0x5C,0xF,0x3E
000170 ac08
000171 3e1c
000172 f5c3
000173 3e28      	.DB  0x8,0xAC,0x1C,0x3E,0xC3,0xF5,0x28,0x3E
000174 4bc7
000175 3e37
000176 9ba6
000177 3e44      	.DB  0xC7,0x4B,0x37,0x3E,0xA6,0x9B,0x44,0x3E
000178 f1aa
000179 3e52
00017a 47ae
00017b 3e61      	.DB  0xAA,0xF1,0x52,0x3E,0xAE,0x47,0x61,0x3E
00017c a3d7
00017d 3e70
00017e 0000
00017f 3e80      	.DB  0xD7,0xA3,0x70,0x3E,0x0,0x0,0x80,0x3E
000180 ae14
000181 3e87
000182 df3b
000183 3e8f      	.DB  0x14,0xAE,0x87,0x3E,0x3B,0xDF,0x8F,0x3E
000184 1062
000185 3e98
000186 4189
000187 3ea0      	.DB  0x62,0x10,0x98,0x3E,0x89,0x41,0xA0,0x3E
000188 72b0
000189 3ea8
00018a a3d7
00018b 3eb0      	.DB  0xB0,0x72,0xA8,0x3E,0xD7,0xA3,0xB0,0x3E
00018c 5810
00018d 3eb9
00018e 0c4a
00018f 3ec2      	.DB  0x10,0x58,0xB9,0x3E,0x4A,0xC,0xC2,0x3E
000190 c083
000191 3eca
000192 74bc
000193 3ed3      	.DB  0x83,0xC0,0xCA,0x3E,0xBC,0x74,0xD3,0x3E
000194 28f6
000195 3edc
000196 6042
000197 3ee5      	.DB  0xF6,0x28,0xDC,0x3E,0x42,0x60,0xE5,0x3E
000198 147b
000199 3eee
00019a 4bc7
00019b 3ef7      	.DB  0x7B,0x14,0xEE,0x3E,0xC7,0x4B,0xF7,0x3E
00019c 0000
00019d 3f00
00019e 0000
00019f 0000      	.DB  0x0,0x0,0x0,0x3F,0x0,0x0,0x0,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
0001a0 0000
0001a1 00ff      	.DB  0x0,0x0,0xFF,0x0
0001a2 6400      	.DB  0x0,0x64
                 
                 
                 __GLOBAL_INI_TBL:
0001a3 0006      	.DW  0x06
0001a4 0003      	.DW  0x03
0001a5 0340      	.DW  __REG_VARS*2
                 
                 _0xFFFFFFFF:
0001a6 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
0001a7 94f8      	CLI
0001a8 27ee      	CLR  R30
0001a9 bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
0001aa e0f1      	LDI  R31,1
0001ab bff5      	OUT  MCUCR,R31
0001ac bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
0001ad e08d      	LDI  R24,(14-2)+1
0001ae e0a2      	LDI  R26,2
0001af 27bb      	CLR  R27
                 __CLEAR_REG:
0001b0 93ed      	ST   X+,R30
0001b1 958a      	DEC  R24
0001b2 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0001b3 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0001b4 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0001b5 e0a0      	LDI  R26,LOW(__SRAM_START)
0001b6 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
0001b7 93ed      	ST   X+,R30
0001b8 9701      	SBIW R24,1
0001b9 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0001ba e4e6      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0001bb e0f3      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0001bc 9185      	LPM  R24,Z+
0001bd 9195      	LPM  R25,Z+
0001be 9700      	SBIW R24,0
0001bf f061      	BREQ __GLOBAL_INI_END
0001c0 91a5      	LPM  R26,Z+
0001c1 91b5      	LPM  R27,Z+
0001c2 9005      	LPM  R0,Z+
0001c3 9015      	LPM  R1,Z+
0001c4 01bf      	MOVW R22,R30
0001c5 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0001c6 9005      	LPM  R0,Z+
0001c7 920d      	ST   X+,R0
0001c8 9701      	SBIW R24,1
0001c9 f7e1      	BRNE __GLOBAL_INI_LOOP
0001ca 01fb      	MOVW R30,R22
0001cb cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0 INITIALIZATION
0001cc e0e0      	LDI  R30,__GPIOR0_INIT
0001cd bbee      	OUT  GPIOR0,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0001ce efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0001cf bfed      	OUT  SPL,R30
0001d0 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0001d1 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0001d2 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0001d3 e0d3      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0001d4 940c 02ee 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x300
                 
                 	.CSEG
                 ;#include <mega328p.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 ;
                 ;typedef unsigned char uint8_t;
                 ;typedef unsigned int uint16_t;
                 ;
                 ;#define low(x)   ((x) & 0xFF)
                 ;#define high(x)   (((x)>>8) & 0xFF)
                 ;
                 ;#define FGEN 11900000UL
                 ;#define TIMER0_PWM (1<<COM0A1) | (0<<COM0A0) | (1<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (1<<WGM00)
                 ;#define TIMER2_PWM (1<<COM2A1) | (0<<COM2A0) | (0<<COM2B1) | (0<<COM2B0) | (0<<WGM21) | (1<<WGM20)
                 ;#define PWM_DIV (0<<WGM02) | (0<<CS02) | (1<<CS01) | (0<<CS00)
                 ;#define TIMER1_DIV (0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (1<<WGM12) | (0<<CS12) | (0<<CS11) | (1<<CS10)
                 ;#define ADC_VREF_TYPE (0<<REFS1) | (1<<REFS0) | (1<<ADLAR)
                 ;#define A 0
                 ;#define B 1
                 ;#define C 2
                 ;
                 ;#define N 181 //points
                 ;#define PHASE_B_DELAY 2*N/3
                 ;#define PHASE_C_DELAY N/3
                 ;#define PHASE_A_PIN PORTD6
                 ;#define PHASE_B_PIN PORTD5
                 ;#define PHASE_C_PIN PORTB3
                 ;#define MAX_FREQUENCY 100
                 ;
                 ;uint8_t adc_data[2];
                 ;uint8_t ADC_input=0;
                 ;
                 ;uint8_t step[3];
                 ;
                 ;uint8_t sinus[N+1];
                 ;
                 ;uint8_t phase_b_step = 0;
                 ;uint8_t phase_c_step = 0;
                 ;
                 ;uint8_t amplitude = 255;
                 ;uint8_t frequency = 100;
                 ;
                 ;const float sinus_table[N+1] = {
                 ;    0.5,0.517,0.535,0.552,0.57,0.587,0.604,0.621,0.638,0.655,0.671,0.687,0.703,0.719,0.735,0.75,
                 ;    0.765,0.78,0.794,0.808,0.821,0.835,0.847,0.86,0.872,0.883,0.894,0.905,0.915,0.924,0.933,0.941,
                 ;    0.949,0.957,0.964,0.97,0.976,0.981,0.985,0.989,0.992,0.995,0.997,0.999,1.0,1.0,1.0,0.999,0.997,
                 ;    0.995,0.992,0.989,0.985,0.981,0.976,0.97,0.964,0.957,0.949,0.941,0.933,0.924,0.915,0.905,0.894,
                 ;    0.883,0.872,0.86,0.847,0.835,0.821,0.808,0.794,0.78,0.765,0.75,0.735,0.719,0.703,0.687,0.671,
                 ;    0.655,0.638,0.621,0.604,0.587,0.57,0.552,0.535,0.517,0.5,0.483,0.465,0.448,0.43,0.413,0.396,0.379,
                 ;    0.362,0.345,0.329,0.313,0.297,0.281,0.265,0.25,0.235,0.22,0.206,0.192,0.179,0.165,0.153,0.14,0.128,
                 ;    0.117,0.106,0.0955,0.0855,0.076,0.067,0.0585,0.0506,0.0432,0.0364,0.0302,
                 ;    0.0245,0.0194,0.0149,0.0109,0.0076,0.00487,0.00274,0.00122,0.000305,0.0,
                 ;    0.000305,0.00122,0.00274,0.00487,0.0076,0.0109,0.0149,0.0194,0.0245,0.0302,
                 ;    0.0364,0.0432,0.0506,0.0585,0.067,0.076,0.0855,0.0955,0.106,0.117,0.128,
                 ;    0.14,0.153,0.165,0.179,0.192,0.206,0.22,0.235,0.25,0.265,0.281,0.297,
                 ;    0.313,0.329,0.345,0.362,0.379,0.396,0.413,0.43,0.448,0.465,0.483,0.5
                 ;};
                 ;
                 ;void stop_timers() {
                 ; 0000 0038 void stop_timers() {
                 
                 	.CSEG
                 _stop_timers:
                 ; .FSTART _stop_timers
                 ; 0000 0039     TCCR0A=0; TCCR0B=0;
0001d6 e0e0      	LDI  R30,LOW(0)
0001d7 bde4      	OUT  0x24,R30
0001d8 bde5      	OUT  0x25,R30
                 ; 0000 003A     OCR0A=0; OCR0B=0;
0001d9 bde7      	OUT  0x27,R30
0001da bde8      	OUT  0x28,R30
                 ; 0000 003B     TCCR1A=0; TCCR1B=0;
0001db 93e0 0080 	STS  128,R30
0001dd 93e0 0081 	STS  129,R30
                 ; 0000 003C     OCR1AH=0; OCR1AL=0;
0001df 93e0 0089 	STS  137,R30
0001e1 93e0 0088 	STS  136,R30
                 ; 0000 003D     TIMSK1= (1<<OCIE1B);
0001e3 e0e4      	LDI  R30,LOW(4)
0001e4 93e0 006f 	STS  111,R30
                 ; 0000 003E     TCCR2A=0; TCCR2B=0;
0001e6 e0e0      	LDI  R30,LOW(0)
0001e7 93e0 00b0 	STS  176,R30
0001e9 93e0 00b1 	STS  177,R30
                 ; 0000 003F     OCR2A=0; OCR2B=0;
0001eb 93e0 00b3 	STS  179,R30
0001ed 93e0 00b4 	STS  180,R30
                 ; 0000 0040 }
0001ef 9508      	RET
                 ; .FEND
                 ;
                 ;void closed_mode() {
                 ; 0000 0042 void closed_mode() {
                 _closed_mode:
                 ; .FSTART _closed_mode
                 ; 0000 0043     stop_timers();
0001f0 dfe5      	RCALL _stop_timers
                 ; 0000 0044     PORTD=(1<<PHASE_A_PIN) | (1<<PHASE_B_PIN);
0001f1 e6e0      	LDI  R30,LOW(96)
0001f2 b9eb      	OUT  0xB,R30
                 ; 0000 0045     PORTB=(1<<PHASE_C_PIN);
0001f3 e0e8      	LDI  R30,LOW(8)
0001f4 b9e5      	OUT  0x5,R30
                 ; 0000 0046 }
0001f5 9508      	RET
                 ; .FEND
                 ;
                 ;void sinus_period(uint8_t frequency) {
                 ; 0000 0048 void sinus_period(uint8_t frequency) {
                 _sinus_period:
                 ; .FSTART _sinus_period
                 ; 0000 0049     uint16_t period = FGEN/2/N/frequency;
                 ; 0000 004A     OCR1AH = high(period);
0001f6 93aa      	ST   -Y,R26
0001f7 931a      	ST   -Y,R17
0001f8 930a      	ST   -Y,R16
                 ;	frequency -> Y+2
                 ;	period -> R16,R17
0001f9 81ea      	LDD  R30,Y+2
0001fa e0f0      	LDI  R31,0
0001fb e6a8      	LDI  R26,LOW(32872)
0001fc e8b0      	LDI  R27,HIGH(32872)
0001fd 940e 041f 	CALL __DIVW21U
0001ff 018f      	MOVW R16,R30
000200 9310 0089 	STS  137,R17
                 ; 0000 004B     OCR1AL = low(period);
000202 93e0 0088 	STS  136,R30
                 ; 0000 004C }
000204 8119      	LDD  R17,Y+1
000205 8108      	LDD  R16,Y+0
000206 9623      	ADIW R28,3
000207 9508      	RET
                 ; .FEND
                 ;
                 ;void sinus_amplitude(uint8_t amplitude) {
                 ; 0000 004E void sinus_amplitude(uint8_t amplitude) {
                 _sinus_amplitude:
                 ; .FSTART _sinus_amplitude
                 ; 0000 004F     uint8_t i = 0;
                 ; 0000 0050     for (i = 0; i < N; i++)
000208 93aa      	ST   -Y,R26
000209 931a      	ST   -Y,R17
                 ;	amplitude -> Y+1
                 ;	i -> R17
00020a e010      	LDI  R17,0
00020b e010      	LDI  R17,LOW(0)
                 _0x4:
00020c 3b15      	CPI  R17,181
00020d f4f8      	BRSH _0x5
                 ; 0000 0051         sinus[i] = amplitude*sinus_table[i];
00020e 2fe1      	MOV  R30,R17
00020f e0f0      	LDI  R31,0
000210 5feb      	SUBI R30,LOW(-_sinus)
000211 4ffc      	SBCI R31,HIGH(-_sinus)
000212 93ff      	PUSH R31
000213 93ef      	PUSH R30
000214 2fe1      	MOV  R30,R17
000215 e6a8      	LDI  R26,LOW(_sinus_table*2)
000216 e0b0      	LDI  R27,HIGH(_sinus_table*2)
000217 e0f0      	LDI  R31,0
000218 940e 0414 	CALL __LSLW2
00021a 0fea      	ADD  R30,R26
00021b 1ffb      	ADC  R31,R27
00021c 940e 0432 	CALL __GETD1PF
00021e 81a9      	LDD  R26,Y+1
00021f 27bb      	CLR  R27
000220 2788      	CLR  R24
000221 2799      	CLR  R25
000222 940e 043a 	CALL __CDF2
000224 940e 03be 	CALL __MULF12
000226 91af      	POP  R26
000227 91bf      	POP  R27
000228 940e 0357 	CALL __CFD1U
00022a 93ec      	ST   X,R30
00022b 5f1f      	SUBI R17,-1
00022c cfdf      	RJMP _0x4
                 _0x5:
                 ; 0000 0052 }
00022d 8118      	LDD  R17,Y+0
00022e c02f      	RJMP _0x2000001
                 ; .FEND
                 ;
                 ;void start_PWM(uint8_t frequency, uint8_t amplitude) {
                 ; 0000 0054 void start_PWM(uint8_t frequency, uint8_t amplitude) {
                 _start_PWM:
                 ; .FSTART _start_PWM
                 ; 0000 0055     sinus_period(frequency);
00022f 93aa      	ST   -Y,R26
                 ;	frequency -> Y+1
                 ;	amplitude -> Y+0
000230 81a9      	LDD  R26,Y+1
000231 dfc4      	RCALL _sinus_period
                 ; 0000 0056     sinus_amplitude(amplitude);
000232 81a8      	LD   R26,Y
000233 dfd4      	RCALL _sinus_amplitude
                 ; 0000 0057     step[A] = 0;
000234 e0e0      	LDI  R30,LOW(0)
000235 93e0 0302 	STS  _step,R30
                 ; 0000 0058     step[B] = 0;
                +
000237 93e0 0303+STS _step + ( 1 ) , R30
                 	__PUTB1MN _step,1
                 ; 0000 0059     step[C] = 0;
                +
000239 93e0 0304+STS _step + ( 2 ) , R30
                 	__PUTB1MN _step,2
                 ; 0000 005A     // Timer/Counter 0 initialization
                 ; 0000 005B     TCCR0A=TIMER0_PWM;
00023b eae1      	LDI  R30,LOW(161)
00023c bde4      	OUT  0x24,R30
                 ; 0000 005C     TCCR0B=PWM_DIV;
00023d e0e2      	LDI  R30,LOW(2)
00023e bde5      	OUT  0x25,R30
                 ; 0000 005D     TCNT0=0;
00023f e0e0      	LDI  R30,LOW(0)
000240 bde6      	OUT  0x26,R30
                 ; 0000 005E     // Timer/Counter 2 initialization
                 ; 0000 005F     TCCR2A=TIMER2_PWM;
000241 e8e1      	LDI  R30,LOW(129)
000242 93e0 00b0 	STS  176,R30
                 ; 0000 0060     TCCR2B=PWM_DIV;
000244 e0e2      	LDI  R30,LOW(2)
000245 93e0 00b1 	STS  177,R30
                 ; 0000 0061     TCNT2=0;
000247 e0e0      	LDI  R30,LOW(0)
000248 93e0 00b2 	STS  178,R30
                 ; 0000 0062     // Timer/Counter 1 initialization
                 ; 0000 0063     TCCR1A=0;
00024a 93e0 0080 	STS  128,R30
                 ; 0000 0064     TCCR1B= TIMER1_DIV;
00024c e0e9      	LDI  R30,LOW(9)
00024d 93e0 0081 	STS  129,R30
                 ; 0000 0065     TCNT1H=0; TCNT1L=0; ICR1H=0; ICR1L=0;
00024f e0e0      	LDI  R30,LOW(0)
000250 93e0 0085 	STS  133,R30
000252 93e0 0084 	STS  132,R30
000254 93e0 0087 	STS  135,R30
000256 93e0 0086 	STS  134,R30
                 ; 0000 0066     TIMSK1 |= (1<<OCIE1A);
000258 91e0 006f 	LDS  R30,111
00025a 60e2      	ORI  R30,2
00025b 93e0 006f 	STS  111,R30
                 ; 0000 0067     #asm("sei")
00025d 9478      	sei
                 ; 0000 0068 }
                 _0x2000001:
00025e 9622      	ADIW R28,2
00025f 9508      	RET
                 ; .FEND
                 ;
                 ;interrupt [TIM1_COMPA] void timer1_compa_isr(void)
                 ; 0000 006B {
                 _timer1_compa_isr:
                 ; .FSTART _timer1_compa_isr
000260 93aa      	ST   -Y,R26
000261 93ea      	ST   -Y,R30
000262 93fa      	ST   -Y,R31
000263 b7ef      	IN   R30,SREG
000264 93ea      	ST   -Y,R30
                 ; 0000 006C     /* For phase A */
                 ; 0000 006D    step[A]++;
000265 91e0 0302 	LDS  R30,_step
000267 5fef      	SUBI R30,-LOW(1)
000268 93e0 0302 	STS  _step,R30
                 ; 0000 006E    if (step[A] > N-1) step[A] = 0;
00026a 91a0 0302 	LDS  R26,_step
00026c 3ba5      	CPI  R26,LOW(0xB5)
00026d f018      	BRLO _0x6
00026e e0e0      	LDI  R30,LOW(0)
00026f 93e0 0302 	STS  _step,R30
                 ; 0000 006F    OCR0A = sinus[step[A]];
                 _0x6:
000271 91e0 0302 	LDS  R30,_step
000273 d0a6      	RCALL SUBOPT_0x0
000274 bde7      	OUT  0x27,R30
                 ; 0000 0070    /* For phase B */
                 ; 0000 0071    if (phase_b_step < PHASE_B_DELAY) {phase_b_step++;} else {
000275 e7e8      	LDI  R30,LOW(120)
000276 163e      	CP   R3,R30
000277 f410      	BRSH _0x7
000278 9433      	INC  R3
000279 c011      	RJMP _0x8
                 _0x7:
                 ; 0000 0072        step[B]++;
                +
00027a 91e0 0303+LDS R30 , _step + ( 1 )
                 	__GETB1MN _step,1
00027c 5fef      	SUBI R30,-LOW(1)
                +
00027d 93e0 0303+STS _step + ( 1 ) , R30
                 	__PUTB1MN _step,1
                 ; 0000 0073        if (step[B] > N-1) step[B] = 0;
                +
00027f 91a0 0303+LDS R26 , _step + ( 1 )
                 	__GETB2MN _step,1
000281 3ba5      	CPI  R26,LOW(0xB5)
000282 f018      	BRLO _0x9
000283 e0e0      	LDI  R30,LOW(0)
                +
000284 93e0 0303+STS _step + ( 1 ) , R30
                 	__PUTB1MN _step,1
                 ; 0000 0074        OCR2A = sinus[step[B]];
                 _0x9:
                +
000286 91e0 0303+LDS R30 , _step + ( 1 )
                 	__GETB1MN _step,1
000288 d091      	RCALL SUBOPT_0x0
000289 93e0 00b3 	STS  179,R30
                 ; 0000 0075    }
                 _0x8:
                 ; 0000 0076    /* For phase C */
                 ; 0000 0077    if (phase_c_step < PHASE_C_DELAY) {phase_c_step++;} else {
00028b e3ec      	LDI  R30,LOW(60)
00028c 166e      	CP   R6,R30
00028d f410      	BRSH _0xA
00028e 9463      	INC  R6
00028f c010      	RJMP _0xB
                 _0xA:
                 ; 0000 0078        step[C]++;
                +
000290 91e0 0304+LDS R30 , _step + ( 2 )
                 	__GETB1MN _step,2
000292 5fef      	SUBI R30,-LOW(1)
                +
000293 93e0 0304+STS _step + ( 2 ) , R30
                 	__PUTB1MN _step,2
                 ; 0000 0079        if (step[C] > N-1) step[C] = 0;
                +
000295 91a0 0304+LDS R26 , _step + ( 2 )
                 	__GETB2MN _step,2
000297 3ba5      	CPI  R26,LOW(0xB5)
000298 f018      	BRLO _0xC
000299 e0e0      	LDI  R30,LOW(0)
                +
00029a 93e0 0304+STS _step + ( 2 ) , R30
                 	__PUTB1MN _step,2
                 ; 0000 007A        OCR0B = sinus[step[C]];
                 _0xC:
                +
00029c 91e0 0304+LDS R30 , _step + ( 2 )
                 	__GETB1MN _step,2
00029e d07b      	RCALL SUBOPT_0x0
00029f bde8      	OUT  0x28,R30
                 ; 0000 007B    }
                 _0xB:
                 ; 0000 007C }
0002a0 91e9      	LD   R30,Y+
0002a1 bfef      	OUT  SREG,R30
0002a2 91f9      	LD   R31,Y+
0002a3 91e9      	LD   R30,Y+
0002a4 91a9      	LD   R26,Y+
0002a5 9518      	RETI
                 ; .FEND
                 ;
                 ;interrupt [ADC_INT] void adc_isr(void)
                 ; 0000 007F {
                 _adc_isr:
                 ; .FSTART _adc_isr
0002a6 93aa      	ST   -Y,R26
0002a7 93ba      	ST   -Y,R27
0002a8 93ea      	ST   -Y,R30
0002a9 b7ef      	IN   R30,SREG
0002aa 93ea      	ST   -Y,R30
                 ; 0000 0080     adc_data[ADC_input]=ADCH;
0002ab 2da4      	MOV  R26,R4
0002ac e0b0      	LDI  R27,0
0002ad 50a0      	SUBI R26,LOW(-_adc_data)
0002ae 4fbd      	SBCI R27,HIGH(-_adc_data)
0002af 91e0 0079 	LDS  R30,121
0002b1 93ec      	ST   X,R30
                 ; 0000 0081     if (ADC_input == 1) {ADC_input=0;} else {ADC_input=1;}
0002b2 e0e1      	LDI  R30,LOW(1)
0002b3 15e4      	CP   R30,R4
0002b4 f411      	BRNE _0xD
0002b5 2444      	CLR  R4
0002b6 c002      	RJMP _0xE
                 _0xD:
0002b7 e0e1      	LDI  R30,LOW(1)
0002b8 2e4e      	MOV  R4,R30
                 _0xE:
                 ; 0000 0082     ADMUX= ADC_input + ADC_VREF_TYPE;
0002b9 2de4      	MOV  R30,R4
0002ba 66e0      	ORI  R30,LOW(0x60)
0002bb 93e0 007c 	STS  124,R30
                 ; 0000 0083     ADCSRA|=(1<<ADSC);
0002bd 91e0 007a 	LDS  R30,122
0002bf 64e0      	ORI  R30,0x40
0002c0 93e0 007a 	STS  122,R30
                 ; 0000 0084 }
0002c2 91e9      	LD   R30,Y+
0002c3 bfef      	OUT  SREG,R30
0002c4 91e9      	LD   R30,Y+
0002c5 91b9      	LD   R27,Y+
0002c6 91a9      	LD   R26,Y+
0002c7 9518      	RETI
                 ; .FEND
                 ;
                 ;void invertor_setup() {
                 ; 0000 0086 void invertor_setup() {
                 _invertor_setup:
                 ; .FSTART _invertor_setup
                 ; 0000 0087     // Crystal Oscillator division factor: 1
                 ; 0000 0088     #pragma optsize-
                 ; 0000 0089     CLKPR=(1<<CLKPCE);
0002c8 e8e0      	LDI  R30,LOW(128)
0002c9 93e0 0061 	STS  97,R30
                 ; 0000 008A     CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
0002cb e0e0      	LDI  R30,LOW(0)
0002cc 93e0 0061 	STS  97,R30
                 ; 0000 008B     #ifdef _OPTIMIZE_SIZE_
                 ; 0000 008C     #pragma optsize+
                 ; 0000 008D     #endif
                 ; 0000 008E     //ADC init (read each ~5 ms - CTCB Timer1 interrupt)
                 ; 0000 008F     ACSR=(1<<ACD);
0002ce e8e0      	LDI  R30,LOW(128)
0002cf bfe0      	OUT  0x30,R30
                 ; 0000 0090     DIDR0=(1<<ADC5D) | (1<<ADC4D) | (1<<ADC3D) | (1<<ADC2D) | (0<<ADC1D) | (0<<ADC0D);  //ADC0, ADC1 are used
0002d0 e3ec      	LDI  R30,LOW(60)
0002d1 93e0 007e 	STS  126,R30
                 ; 0000 0091     ADMUX = ADC_VREF_TYPE;  // Voltage Reference: AVCC pin
0002d3 e6e0      	LDI  R30,LOW(96)
0002d4 93e0 007c 	STS  124,R30
                 ; 0000 0092     ADCSRA=(1<<ADEN) | (1<<ADSC) | (1<<ADATE) | (0<<ADIF) | (1<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
0002d6 eeeb      	LDI  R30,LOW(235)
0002d7 93e0 007a 	STS  122,R30
                 ; 0000 0093     ADCSRB=(1<<ADTS2) | (0<<ADTS1) | (1<<ADTS0);
0002d9 e0e5      	LDI  R30,LOW(5)
0002da 93e0 007b 	STS  123,R30
                 ; 0000 0094     TIMSK1 |= (1<<OCIE1B);
0002dc 91e0 006f 	LDS  R30,111
0002de 60e4      	ORI  R30,4
0002df 93e0 006f 	STS  111,R30
                 ; 0000 0095     OCR1BH=0xFF;
0002e1 efef      	LDI  R30,LOW(255)
0002e2 93e0 008b 	STS  139,R30
                 ; 0000 0096     OCR1BL=0xFF;
0002e4 93e0 008a 	STS  138,R30
                 ; 0000 0097     // Ports init
                 ; 0000 0098     DDRD=(1<<PHASE_A_PIN) | (1<<PHASE_B_PIN);
0002e6 e6e0      	LDI  R30,LOW(96)
0002e7 b9ea      	OUT  0xA,R30
                 ; 0000 0099     DDRB=(1<<PHASE_C_PIN);
0002e8 e0e8      	LDI  R30,LOW(8)
0002e9 b9e4      	OUT  0x4,R30
                 ; 0000 009A     start_PWM(frequency, amplitude);
0002ea 928a      	ST   -Y,R8
0002eb 2da5      	MOV  R26,R5
0002ec df42      	RCALL _start_PWM
                 ; 0000 009B }
0002ed 9508      	RET
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 009E {
                 _main:
                 ; .FSTART _main
                 ; 0000 009F     invertor_setup();
0002ee dfd9      	RCALL _invertor_setup
                 ; 0000 00A0     while (1)
                 _0xF:
                 ; 0000 00A1           {
                 ; 0000 00A2           /* if frequency/amplitude is 0, stop invertor */
                 ; 0000 00A3           if (adc_data[0] == 0 || adc_data[1] == 0) {
0002ef 91a0 0300 	LDS  R26,_adc_data
0002f1 30a0      	CPI  R26,LOW(0x0)
0002f2 f021      	BREQ _0x13
                +
0002f3 91a0 0301+LDS R26 , _adc_data + ( 1 )
                 	__GETB2MN _adc_data,1
0002f5 30a0      	CPI  R26,LOW(0x0)
0002f6 f479      	BRNE _0x12
                 _0x13:
                 ; 0000 00A4             while (adc_data[0] == 0 || adc_data[1] == 0) {closed_mode();};
                 _0x15:
0002f7 91a0 0300 	LDS  R26,_adc_data
0002f9 30a0      	CPI  R26,LOW(0x0)
0002fa f021      	BREQ _0x18
                +
0002fb 91a0 0301+LDS R26 , _adc_data + ( 1 )
                 	__GETB2MN _adc_data,1
0002fd 30a0      	CPI  R26,LOW(0x0)
0002fe f411      	BRNE _0x17
                 _0x18:
0002ff def0      	RCALL _closed_mode
000300 cff6      	RJMP _0x15
                 _0x17:
                 ; 0000 00A5             start_PWM(MAX_FREQUENCY*(uint16_t)adc_data[1]/255, adc_data[0]);
000301 d01d      	RCALL SUBOPT_0x1
000302 93ea      	ST   -Y,R30
000303 91a0 0300 	LDS  R26,_adc_data
000305 df29      	RCALL _start_PWM
                 ; 0000 00A6           }
                 ; 0000 00A7           /* if ADC data is updated, change frequency/amplitude*/
                 ; 0000 00A8           if (amplitude != adc_data[0]) {amplitude = adc_data[0]; sinus_amplitude(amplitude);}
                 _0x12:
000306 91e0 0300 	LDS  R30,_adc_data
000308 15e5      	CP   R30,R5
000309 f021      	BREQ _0x1A
00030a 9050 0300 	LDS  R5,_adc_data
00030c 2da5      	MOV  R26,R5
00030d defa      	RCALL _sinus_amplitude
                 ; 0000 00A9           if (frequency != MAX_FREQUENCY*(uint16_t)adc_data[1]/255) {frequency = MAX_FREQUENCY*(uint16_t)adc_data[1]/255 ...
                 _0x1A:
00030e d010      	RCALL SUBOPT_0x1
00030f 2da8      	MOV  R26,R8
000310 e0b0      	LDI  R27,0
000311 17ea      	CP   R30,R26
000312 07fb      	CPC  R31,R27
000313 f021      	BREQ _0x1B
000314 d00a      	RCALL SUBOPT_0x1
000315 2e8e      	MOV  R8,R30
000316 2da8      	MOV  R26,R8
000317 dede      	RCALL _sinus_period
                 ; 0000 00AA           }
                 _0x1B:
000318 cfd6      	RJMP _0xF
                 ; 0000 00AB }
                 _0x1C:
000319 cfff      	RJMP _0x1C
                 ; .FEND
                 
                 	.DSEG
                 _adc_data:
000300           	.BYTE 0x2
                 _step:
000302           	.BYTE 0x3
                 _sinus:
000305           	.BYTE 0xB6
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
00031a e0f0      	LDI  R31,0
00031b 5feb      	SUBI R30,LOW(-_sinus)
00031c 4ffc      	SBCI R31,HIGH(-_sinus)
00031d 81e0      	LD   R30,Z
00031e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x1:
                +
00031f 91e0 0301+LDS R30 , _adc_data + ( 1 )
                 	__GETB1MN _adc_data,1
000321 e6a4      	LDI  R26,LOW(100)
000322 9fea      	MUL  R30,R26
000323 01f0      	MOVW R30,R0
000324 01df      	MOVW R26,R30
000325 efef      	LDI  R30,LOW(255)
000326 e0f0      	LDI  R31,HIGH(255)
000327 940e 041f 	CALL __DIVW21U
000329 9508      	RET
                 
                 
                 	.CSEG
                 __ROUND_REPACK:
00032a 2355      	TST  R21
00032b f442      	BRPL __REPACK
00032c 3850      	CPI  R21,0x80
00032d f411      	BRNE __ROUND_REPACK0
00032e ffe0      	SBRS R30,0
00032f c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000330 9631      	ADIW R30,1
000331 1f69      	ADC  R22,R25
000332 1f79      	ADC  R23,R25
000333 f06b      	BRVS __REPACK1
                 
                 __REPACK:
000334 e850      	LDI  R21,0x80
000335 2757      	EOR  R21,R23
000336 f411      	BRNE __REPACK0
000337 935f      	PUSH R21
000338 c073      	RJMP __ZERORES
                 __REPACK0:
000339 3f5f      	CPI  R21,0xFF
00033a f031      	BREQ __REPACK1
00033b 0f66      	LSL  R22
00033c 0c00      	LSL  R0
00033d 9557      	ROR  R21
00033e 9567      	ROR  R22
00033f 2f75      	MOV  R23,R21
000340 9508      	RET
                 __REPACK1:
000341 935f      	PUSH R21
000342 2000      	TST  R0
000343 f00a      	BRMI __REPACK2
000344 c073      	RJMP __MAXRES
                 __REPACK2:
000345 c06c      	RJMP __MINRES
                 
                 __UNPACK:
000346 e850      	LDI  R21,0x80
000347 2e19      	MOV  R1,R25
000348 2215      	AND  R1,R21
000349 0f88      	LSL  R24
00034a 1f99      	ROL  R25
00034b 2795      	EOR  R25,R21
00034c 0f55      	LSL  R21
00034d 9587      	ROR  R24
                 
                 __UNPACK1:
00034e e850      	LDI  R21,0x80
00034f 2e07      	MOV  R0,R23
000350 2205      	AND  R0,R21
000351 0f66      	LSL  R22
000352 1f77      	ROL  R23
000353 2775      	EOR  R23,R21
000354 0f55      	LSL  R21
000355 9567      	ROR  R22
000356 9508      	RET
                 
                 __CFD1U:
000357 9468      	SET
000358 c001      	RJMP __CFD1U0
                 __CFD1:
000359 94e8      	CLT
                 __CFD1U0:
00035a 935f      	PUSH R21
00035b dff2      	RCALL __UNPACK1
00035c 3870      	CPI  R23,0x80
00035d f018      	BRLO __CFD10
00035e 3f7f      	CPI  R23,0xFF
00035f f408      	BRCC __CFD10
000360 c04b      	RJMP __ZERORES
                 __CFD10:
000361 e156      	LDI  R21,22
000362 1b57      	SUB  R21,R23
000363 f4aa      	BRPL __CFD11
000364 9551      	NEG  R21
000365 3058      	CPI  R21,8
000366 f40e      	BRTC __CFD19
000367 3059      	CPI  R21,9
                 __CFD19:
000368 f030      	BRLO __CFD17
000369 efef      	SER  R30
00036a efff      	SER  R31
00036b ef6f      	SER  R22
00036c e77f      	LDI  R23,0x7F
00036d f977      	BLD  R23,7
00036e c01a      	RJMP __CFD15
                 __CFD17:
00036f 2777      	CLR  R23
000370 2355      	TST  R21
000371 f0b9      	BREQ __CFD15
                 __CFD18:
000372 0fee      	LSL  R30
000373 1fff      	ROL  R31
000374 1f66      	ROL  R22
000375 1f77      	ROL  R23
000376 955a      	DEC  R21
000377 f7d1      	BRNE __CFD18
000378 c010      	RJMP __CFD15
                 __CFD11:
000379 2777      	CLR  R23
                 __CFD12:
00037a 3058      	CPI  R21,8
00037b f028      	BRLO __CFD13
00037c 2fef      	MOV  R30,R31
00037d 2ff6      	MOV  R31,R22
00037e 2f67      	MOV  R22,R23
00037f 5058      	SUBI R21,8
000380 cff9      	RJMP __CFD12
                 __CFD13:
000381 2355      	TST  R21
000382 f031      	BREQ __CFD15
                 __CFD14:
000383 9576      	LSR  R23
000384 9567      	ROR  R22
000385 95f7      	ROR  R31
000386 95e7      	ROR  R30
000387 955a      	DEC  R21
000388 f7d1      	BRNE __CFD14
                 __CFD15:
000389 2000      	TST  R0
00038a f40a      	BRPL __CFD16
00038b d080      	RCALL __ANEGD1
                 __CFD16:
00038c 915f      	POP  R21
00038d 9508      	RET
                 
                 __CDF1U:
00038e 9468      	SET
00038f c001      	RJMP __CDF1U0
                 __CDF1:
000390 94e8      	CLT
                 __CDF1U0:
000391 9730      	SBIW R30,0
000392 4060      	SBCI R22,0
000393 4070      	SBCI R23,0
000394 f0b1      	BREQ __CDF10
000395 2400      	CLR  R0
000396 f026      	BRTS __CDF11
000397 2377      	TST  R23
000398 f412      	BRPL __CDF11
000399 9400      	COM  R0
00039a d071      	RCALL __ANEGD1
                 __CDF11:
00039b 2e17      	MOV  R1,R23
00039c e17e      	LDI  R23,30
00039d 2011      	TST  R1
                 __CDF12:
00039e f032      	BRMI __CDF13
00039f 957a      	DEC  R23
0003a0 0fee      	LSL  R30
0003a1 1fff      	ROL  R31
0003a2 1f66      	ROL  R22
0003a3 1c11      	ROL  R1
0003a4 cff9      	RJMP __CDF12
                 __CDF13:
0003a5 2fef      	MOV  R30,R31
0003a6 2ff6      	MOV  R31,R22
0003a7 2d61      	MOV  R22,R1
0003a8 935f      	PUSH R21
0003a9 df8a      	RCALL __REPACK
0003aa 915f      	POP  R21
                 __CDF10:
0003ab 9508      	RET
                 
                 __ZERORES:
0003ac 27ee      	CLR  R30
0003ad 27ff      	CLR  R31
0003ae 2766      	CLR  R22
0003af 2777      	CLR  R23
0003b0 915f      	POP  R21
0003b1 9508      	RET
                 
                 __MINRES:
0003b2 efef      	SER  R30
0003b3 efff      	SER  R31
0003b4 e76f      	LDI  R22,0x7F
0003b5 ef7f      	SER  R23
0003b6 915f      	POP  R21
0003b7 9508      	RET
                 
                 __MAXRES:
0003b8 efef      	SER  R30
0003b9 efff      	SER  R31
0003ba e76f      	LDI  R22,0x7F
0003bb e77f      	LDI  R23,0x7F
0003bc 915f      	POP  R21
0003bd 9508      	RET
                 
                 __MULF12:
0003be 935f      	PUSH R21
0003bf df86      	RCALL __UNPACK
0003c0 3870      	CPI  R23,0x80
0003c1 f351      	BREQ __ZERORES
0003c2 3890      	CPI  R25,0x80
0003c3 f341      	BREQ __ZERORES
0003c4 2401      	EOR  R0,R1
0003c5 9408      	SEC
0003c6 1f79      	ADC  R23,R25
0003c7 f423      	BRVC __MULF124
0003c8 f31c      	BRLT __ZERORES
                 __MULF125:
0003c9 2000      	TST  R0
0003ca f33a      	BRMI __MINRES
0003cb cfec      	RJMP __MAXRES
                 __MULF124:
0003cc 920f      	PUSH R0
0003cd 931f      	PUSH R17
0003ce 932f      	PUSH R18
0003cf 933f      	PUSH R19
0003d0 934f      	PUSH R20
0003d1 2711      	CLR  R17
0003d2 2722      	CLR  R18
0003d3 2799      	CLR  R25
0003d4 9f68      	MUL  R22,R24
0003d5 01a0      	MOVW R20,R0
0003d6 9f8f      	MUL  R24,R31
0003d7 2d30      	MOV  R19,R0
0003d8 0d41      	ADD  R20,R1
0003d9 1f59      	ADC  R21,R25
0003da 9f6b      	MUL  R22,R27
0003db 0d30      	ADD  R19,R0
0003dc 1d41      	ADC  R20,R1
0003dd 1f59      	ADC  R21,R25
0003de 9f8e      	MUL  R24,R30
0003df d027      	RCALL __MULF126
0003e0 9fbf      	MUL  R27,R31
0003e1 d025      	RCALL __MULF126
0003e2 9f6a      	MUL  R22,R26
0003e3 d023      	RCALL __MULF126
0003e4 9fbe      	MUL  R27,R30
0003e5 d01d      	RCALL __MULF127
0003e6 9faf      	MUL  R26,R31
0003e7 d01b      	RCALL __MULF127
0003e8 9fae      	MUL  R26,R30
0003e9 0d11      	ADD  R17,R1
0003ea 1f29      	ADC  R18,R25
0003eb 1f39      	ADC  R19,R25
0003ec 1f49      	ADC  R20,R25
0003ed 1f59      	ADC  R21,R25
0003ee 2fe3      	MOV  R30,R19
0003ef 2ff4      	MOV  R31,R20
0003f0 2f65      	MOV  R22,R21
0003f1 2f52      	MOV  R21,R18
0003f2 914f      	POP  R20
0003f3 913f      	POP  R19
0003f4 912f      	POP  R18
0003f5 911f      	POP  R17
0003f6 900f      	POP  R0
0003f7 2366      	TST  R22
0003f8 f02a      	BRMI __MULF122
0003f9 0f55      	LSL  R21
0003fa 1fee      	ROL  R30
0003fb 1fff      	ROL  R31
0003fc 1f66      	ROL  R22
0003fd c002      	RJMP __MULF123
                 __MULF122:
0003fe 9573      	INC  R23
0003ff f24b      	BRVS __MULF125
                 __MULF123:
000400 df29      	RCALL __ROUND_REPACK
000401 915f      	POP  R21
000402 9508      	RET
                 
                 __MULF127:
000403 0d10      	ADD  R17,R0
000404 1d21      	ADC  R18,R1
000405 1f39      	ADC  R19,R25
000406 c002      	RJMP __MULF128
                 __MULF126:
000407 0d20      	ADD  R18,R0
000408 1d31      	ADC  R19,R1
                 __MULF128:
000409 1f49      	ADC  R20,R25
00040a 1f59      	ADC  R21,R25
00040b 9508      	RET
                 
                 __ANEGD1:
00040c 95f0      	COM  R31
00040d 9560      	COM  R22
00040e 9570      	COM  R23
00040f 95e1      	NEG  R30
000410 4fff      	SBCI R31,-1
000411 4f6f      	SBCI R22,-1
000412 4f7f      	SBCI R23,-1
000413 9508      	RET
                 
                 __LSLW2:
000414 0fee      	LSL  R30
000415 1fff      	ROL  R31
000416 0fee      	LSL  R30
000417 1fff      	ROL  R31
000418 9508      	RET
                 
                 __CBD2:
000419 2fba      	MOV  R27,R26
00041a 0fbb      	ADD  R27,R27
00041b 0bbb      	SBC  R27,R27
00041c 2f8b      	MOV  R24,R27
00041d 2f9b      	MOV  R25,R27
00041e 9508      	RET
                 
                 __DIVW21U:
00041f 2400      	CLR  R0
000420 2411      	CLR  R1
000421 e190      	LDI  R25,16
                 __DIVW21U1:
000422 0faa      	LSL  R26
000423 1fbb      	ROL  R27
000424 1c00      	ROL  R0
000425 1c11      	ROL  R1
000426 1a0e      	SUB  R0,R30
000427 0a1f      	SBC  R1,R31
000428 f418      	BRCC __DIVW21U2
000429 0e0e      	ADD  R0,R30
00042a 1e1f      	ADC  R1,R31
00042b c001      	RJMP __DIVW21U3
                 __DIVW21U2:
00042c 60a1      	SBR  R26,1
                 __DIVW21U3:
00042d 959a      	DEC  R25
00042e f799      	BRNE __DIVW21U1
00042f 01fd      	MOVW R30,R26
000430 01d0      	MOVW R26,R0
000431 9508      	RET
                 
                 __GETD1PF:
000432 9005      	LPM  R0,Z+
000433 9015      	LPM  R1,Z+
000434 9165      	LPM  R22,Z+
000435 9174      	LPM  R23,Z
000436 01f0      	MOVW R30,R0
000437 9508      	RET
                 
                 __CDF2U:
000438 9468      	SET
000439 c001      	RJMP __CDF2U0
                 __CDF2:
00043a 94e8      	CLT
                 __CDF2U0:
00043b d001      	RCALL __SWAPD12
00043c df54      	RCALL __CDF1U0
                 
                 __SWAPD12:
00043d 2e18      	MOV  R1,R24
00043e 2f86      	MOV  R24,R22
00043f 2d61      	MOV  R22,R1
000440 2e19      	MOV  R1,R25
000441 2f97      	MOV  R25,R23
000442 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
000443 2e1b      	MOV  R1,R27
000444 2fbf      	MOV  R27,R31
000445 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
000446 2e1a      	MOV  R1,R26
000447 2fae      	MOV  R26,R30
000448 2de1      	MOV  R30,R1
000449 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega328P register use summary:
r0 :  28 r1 :  26 r2 :   0 r3 :   2 r4 :   5 r5 :   4 r6 :   2 r7 :   0 
r8 :   4 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   3 r17:  16 r18:   7 r19:   8 r20:   8 r21:  44 r22:  30 r23:  32 
r24:  16 r25:  25 r26:  52 r27:  27 r28:   3 r29:   1 r30: 182 r31:  39 
x  :   5 y  :  31 z  :  12 
Registers used: 26 out of 35 (74.3%)

ATmega328P instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  17 add   :   8 
adiw  :   3 and   :   2 andi  :   0 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   2 brcs  :   0 break :   0 breq  :  11 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   6 
brlt  :   1 brmi  :   4 brne  :  11 brpl  :   4 brsh  :   3 brtc  :   1 
brts  :   1 brvc  :   1 brvs  :   2 bset  :   0 bst   :   0 call  :   7 
cbi   :   0 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  18 cls   :   0 clt   :   3 clv   :   0 clz   :   0 com   :   4 
cp    :   5 cpc   :   1 cpi   :  17 cpse  :   0 dec   :   5 des   :   0 
eor   :   4 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   2 inc   :   3 jmp   :  27 ld    :  10 ldd   :   6 ldi   :  70 
lds   :  21 lpm   :  12 lsl   :  12 lsr   :   1 mov   :  40 movw  :  10 
mul   :  10 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   0 
ori   :   4 out   :  22 pop   :  13 push  :  12 rcall :  28 ret   :  22 
reti  :   2 rjmp  :  25 rol   :  16 ror   :   7 sbc   :   2 sbci  :   8 
sbi   :   0 sbic  :   0 sbis  :   0 sbiw  :   4 sbr   :   1 sbrc  :   0 
sbrs  :   1 sec   :   1 seh   :   0 sei   :   1 sen   :   0 ser   :   8 
ses   :   0 set   :   3 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  21 std   :   0 sts   :  42 sub   :   2 subi  :   8 swap  :   0 
tst   :   9 wdr   :   0 
Instructions used: 65 out of 116 (56.0%)

ATmega328P memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000894   1454    742   2196   32768   6.7%
[.dseg] 0x000100 0x0003bb      0    187    187    2048   9.1%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 5 warnings
