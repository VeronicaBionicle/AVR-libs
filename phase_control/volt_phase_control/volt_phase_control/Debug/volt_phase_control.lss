
volt_phase_control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  0000025c  000002f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000025c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800114  00800114  00000304  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000334  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009b8  00000000  00000000  0000041c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007ef  00000000  00000000  00000dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000471  00000000  00000000  000015c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000194  00000000  00000000  00001a34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004e4  00000000  00000000  00001bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000023a  00000000  00000000  000020ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  000022e6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__vector_7>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e5       	ldi	r30, 0x5C	; 92
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 31       	cpi	r26, 0x14	; 20
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e1       	ldi	r26, 0x14	; 20
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 31       	cpi	r26, 0x16	; 22
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 2c 01 	jmp	0x258	; 0x258 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include "timer_class.h"

#define OUT_PIN 0

int main(void){
	PhaseControlSetup(OUT_PIN);
  a6:	80 e0       	ldi	r24, 0x00	; 0
  a8:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <_Z17PhaseControlSetuph>
  ac:	ff cf       	rjmp	.-2      	; 0xac <main+0x6>

000000ae <_Z10OutputInith>:
}

void ZerocrossStop (void) {
	INTERRUPT_INIT &= ~(1<<ISC01) | (1<<ISC00);
	GENERAL_INTERRUPT &= ~(1<<INT0);
	INTERRUPT_FLAG &= ~(1<<INTF0);
  ae:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
  b2:	44 b1       	in	r20, 0x04	; 4
  b4:	21 e0       	ldi	r18, 0x01	; 1
  b6:	30 e0       	ldi	r19, 0x00	; 0
  b8:	b9 01       	movw	r22, r18
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <_Z10OutputInith+0x12>
  bc:	66 0f       	add	r22, r22
  be:	77 1f       	adc	r23, r23
  c0:	8a 95       	dec	r24
  c2:	e2 f7       	brpl	.-8      	; 0xbc <_Z10OutputInith+0xe>
  c4:	cb 01       	movw	r24, r22
  c6:	84 2b       	or	r24, r20
  c8:	84 b9       	out	0x04, r24	; 4
  ca:	08 95       	ret

000000cc <_Z2Onv>:
  cc:	25 b1       	in	r18, 0x05	; 5
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	00 90 14 01 	lds	r0, 0x0114	; 0x800114 <__data_end>
  d6:	02 c0       	rjmp	.+4      	; 0xdc <_Z2Onv+0x10>
  d8:	88 0f       	add	r24, r24
  da:	99 1f       	adc	r25, r25
  dc:	0a 94       	dec	r0
  de:	e2 f7       	brpl	.-8      	; 0xd8 <_Z2Onv+0xc>
  e0:	82 2b       	or	r24, r18
  e2:	85 b9       	out	0x05, r24	; 5
  e4:	08 95       	ret

000000e6 <_Z3Offv>:
  e6:	25 b1       	in	r18, 0x05	; 5
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	00 90 14 01 	lds	r0, 0x0114	; 0x800114 <__data_end>
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <_Z3Offv+0x10>
  f2:	88 0f       	add	r24, r24
  f4:	99 1f       	adc	r25, r25
  f6:	0a 94       	dec	r0
  f8:	e2 f7       	brpl	.-8      	; 0xf2 <_Z3Offv+0xc>
  fa:	80 95       	com	r24
  fc:	82 23       	and	r24, r18
  fe:	85 b9       	out	0x05, r24	; 5
 100:	08 95       	ret

00000102 <_Z13ZerocrossInitv>:
 102:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <zerocross>
 106:	52 98       	cbi	0x0a, 2	; 10
 108:	e9 e6       	ldi	r30, 0x69	; 105
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	83 60       	ori	r24, 0x03	; 3
 110:	80 83       	st	Z, r24
 112:	e8 9a       	sbi	0x1d, 0	; 29
 114:	e0 9a       	sbi	0x1c, 0	; 28
 116:	08 95       	ret

00000118 <__vector_1>:
}

ISR (EXT_INT){
 118:	1f 92       	push	r1
 11a:	0f 92       	push	r0
 11c:	0f b6       	in	r0, 0x3f	; 63
 11e:	0f 92       	push	r0
 120:	11 24       	eor	r1, r1
 122:	2f 93       	push	r18
 124:	3f 93       	push	r19
 126:	4f 93       	push	r20
 128:	5f 93       	push	r21
 12a:	6f 93       	push	r22
 12c:	7f 93       	push	r23
 12e:	8f 93       	push	r24
 130:	9f 93       	push	r25
 132:	af 93       	push	r26
 134:	bf 93       	push	r27
 136:	ef 93       	push	r30
 138:	ff 93       	push	r31
	if (zerocross < MAX_DELTAS) {
 13a:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <zerocross>
 13e:	8a 30       	cpi	r24, 0x0A	; 10
 140:	98 f4       	brcc	.+38     	; 0x168 <__vector_1+0x50>
		Off();
 142:	0e 94 73 00 	call	0xe6	; 0xe6 <_Z3Offv>
		startTimer(deltas[zerocross]);
 146:	e0 91 15 01 	lds	r30, 0x0115	; 0x800115 <zerocross>
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	ee 0f       	add	r30, r30
 14e:	ff 1f       	adc	r31, r31
 150:	e0 50       	subi	r30, 0x00	; 0
 152:	ff 4f       	sbci	r31, 0xFF	; 255
 154:	80 81       	ld	r24, Z
 156:	91 81       	ldd	r25, Z+1	; 0x01
 158:	0e 94 10 01 	call	0x220	; 0x220 <_Z10startTimerj>
		zerocross++;
 15c:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <zerocross>
 160:	8f 5f       	subi	r24, 0xFF	; 255
 162:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <zerocross>
 166:	0e c0       	rjmp	.+28     	; 0x184 <__vector_1+0x6c>
		zerocross = 0;
		stopTimer();
		On();
		*/
		 //Debugging
		if (zerocross != 2*MAX_DELTAS) {
 168:	84 31       	cpi	r24, 0x14	; 20
 16a:	51 f0       	breq	.+20     	; 0x180 <__vector_1+0x68>
			stopTimer();
 16c:	0e 94 26 01 	call	0x24c	; 0x24c <_Z9stopTimerv>
			Off();
 170:	0e 94 73 00 	call	0xe6	; 0xe6 <_Z3Offv>
			zerocross++;
 174:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <zerocross>
 178:	8f 5f       	subi	r24, 0xFF	; 255
 17a:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <zerocross>
 17e:	02 c0       	rjmp	.+4      	; 0x184 <__vector_1+0x6c>
		} else zerocross = 0;
 180:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <zerocross>
		
	} 
}
 184:	ff 91       	pop	r31
 186:	ef 91       	pop	r30
 188:	bf 91       	pop	r27
 18a:	af 91       	pop	r26
 18c:	9f 91       	pop	r25
 18e:	8f 91       	pop	r24
 190:	7f 91       	pop	r23
 192:	6f 91       	pop	r22
 194:	5f 91       	pop	r21
 196:	4f 91       	pop	r20
 198:	3f 91       	pop	r19
 19a:	2f 91       	pop	r18
 19c:	0f 90       	pop	r0
 19e:	0f be       	out	0x3f, r0	; 63
 1a0:	0f 90       	pop	r0
 1a2:	1f 90       	pop	r1
 1a4:	18 95       	reti

000001a6 <_Z17PhaseControlSetuph>:

void PhaseControlSetup (uint8_t output_pin) {
 1a6:	cf 93       	push	r28
 1a8:	c8 2f       	mov	r28, r24
	cli();
 1aa:	f8 94       	cli
	initTimer();
 1ac:	0e 94 07 01 	call	0x20e	; 0x20e <_Z9initTimerv>
	OutputInit(output_pin);
 1b0:	8c 2f       	mov	r24, r28
 1b2:	0e 94 57 00 	call	0xae	; 0xae <_Z10OutputInith>
	ZerocrossInit();
 1b6:	0e 94 81 00 	call	0x102	; 0x102 <_Z13ZerocrossInitv>
	sei();
 1ba:	78 94       	sei
 1bc:	cf 91       	pop	r28
 1be:	08 95       	ret

000001c0 <__vector_7>:
#include "timer_class.h"
#include "PhaseControl.h"

ISR(TIMER_INT) { if (PIND != (1<<ZEROCROSS_PIN)) On();  }
 1c0:	1f 92       	push	r1
 1c2:	0f 92       	push	r0
 1c4:	0f b6       	in	r0, 0x3f	; 63
 1c6:	0f 92       	push	r0
 1c8:	11 24       	eor	r1, r1
 1ca:	2f 93       	push	r18
 1cc:	3f 93       	push	r19
 1ce:	4f 93       	push	r20
 1d0:	5f 93       	push	r21
 1d2:	6f 93       	push	r22
 1d4:	7f 93       	push	r23
 1d6:	8f 93       	push	r24
 1d8:	9f 93       	push	r25
 1da:	af 93       	push	r26
 1dc:	bf 93       	push	r27
 1de:	ef 93       	push	r30
 1e0:	ff 93       	push	r31
 1e2:	89 b1       	in	r24, 0x09	; 9
 1e4:	84 30       	cpi	r24, 0x04	; 4
 1e6:	11 f0       	breq	.+4      	; 0x1ec <__vector_7+0x2c>
 1e8:	0e 94 66 00 	call	0xcc	; 0xcc <_Z2Onv>
 1ec:	ff 91       	pop	r31
 1ee:	ef 91       	pop	r30
 1f0:	bf 91       	pop	r27
 1f2:	af 91       	pop	r26
 1f4:	9f 91       	pop	r25
 1f6:	8f 91       	pop	r24
 1f8:	7f 91       	pop	r23
 1fa:	6f 91       	pop	r22
 1fc:	5f 91       	pop	r21
 1fe:	4f 91       	pop	r20
 200:	3f 91       	pop	r19
 202:	2f 91       	pop	r18
 204:	0f 90       	pop	r0
 206:	0f be       	out	0x3f, r0	; 63
 208:	0f 90       	pop	r0
 20a:	1f 90       	pop	r1
 20c:	18 95       	reti

0000020e <_Z9initTimerv>:

void initTimer () {
  TCCR_A = TCCR_A_FOR_TIMER;
 20e:	82 e0       	ldi	r24, 0x02	; 2
 210:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
  TCCR_B = CS_FOR_4_PRESC;
 214:	87 e0       	ldi	r24, 0x07	; 7
 216:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
  TCNT2 = 0;	
 21a:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
 21e:	08 95       	ret

00000220 <_Z10startTimerj>:
}

void startTimer(uint16_t Period) {
  cli();
 220:	f8 94       	cli
  OCR_A = ((uint32_t)Period * F_CPU_SH) / PRESCALER_4 - 1;
 222:	a0 e0       	ldi	r26, 0x00	; 0
 224:	b0 e0       	ldi	r27, 0x00	; 0
 226:	88 0f       	add	r24, r24
 228:	99 1f       	adc	r25, r25
 22a:	aa 1f       	adc	r26, r26
 22c:	bb 1f       	adc	r27, r27
 22e:	88 0f       	add	r24, r24
 230:	99 1f       	adc	r25, r25
 232:	aa 1f       	adc	r26, r26
 234:	bb 1f       	adc	r27, r27
 236:	8f ef       	ldi	r24, 0xFF	; 255
 238:	89 0f       	add	r24, r25
 23a:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
  TCNT2 = 0;
 23e:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
  TIMSK_ = (1<<OCIE_A);
 242:	82 e0       	ldi	r24, 0x02	; 2
 244:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
  sei();
 248:	78 94       	sei
 24a:	08 95       	ret

0000024c <_Z9stopTimerv>:
}

void stopTimer() { TIMSK_ &= ~(1<<OCIE_A); }
 24c:	e0 e7       	ldi	r30, 0x70	; 112
 24e:	f0 e0       	ldi	r31, 0x00	; 0
 250:	80 81       	ld	r24, Z
 252:	8d 7f       	andi	r24, 0xFD	; 253
 254:	80 83       	st	Z, r24
 256:	08 95       	ret

00000258 <_exit>:
 258:	f8 94       	cli

0000025a <__stop_program>:
 25a:	ff cf       	rjmp	.-2      	; 0x25a <__stop_program>
