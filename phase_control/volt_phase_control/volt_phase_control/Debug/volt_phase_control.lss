
volt_phase_control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  000002ba  0000034e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800114  00800114  00000362  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000362  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000394  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  000003d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b62  00000000  00000000  00000494  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008a7  00000000  00000000  00000ff6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005fe  00000000  00000000  0000189d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001cc  00000000  00000000  00001e9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005c8  00000000  00000000  00002068  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002d1  00000000  00000000  00002630  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00002901  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 df 00 	jmp	0x1be	; 0x1be <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__vector_7>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea eb       	ldi	r30, 0xBA	; 186
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 31       	cpi	r26, 0x14	; 20
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e1       	ldi	r26, 0x14	; 20
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 31       	cpi	r26, 0x17	; 23
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 5b 00 	call	0xb6	; 0xb6 <main>
  9e:	0c 94 5b 01 	jmp	0x2b6	; 0x2b6 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_Z5setupv>:
#include <util/delay.h>

#define OUT_PIN 0

void setup () {
	InitPhaseControlTimer();
  a6:	0e 94 36 01 	call	0x26c	; 0x26c <_Z21InitPhaseControlTimerv>
	OutputInit(OUT_PIN);
  aa:	80 e0       	ldi	r24, 0x00	; 0
  ac:	0e 94 76 00 	call	0xec	; 0xec <_Z10OutputInith>
	ZerocrossInit();
  b0:	0e 94 a0 00 	call	0x140	; 0x140 <_Z13ZerocrossInitv>
  b4:	08 95       	ret

000000b6 <main>:
}

int main(void){
	setup();
  b6:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z5setupv>
	while (1) {
		PhaseSmooth(ON);
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	0e 94 05 01 	call	0x20a	; 0x20a <_Z11PhaseSmoothh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c0:	2f ef       	ldi	r18, 0xFF	; 255
  c2:	89 e6       	ldi	r24, 0x69	; 105
  c4:	98 e1       	ldi	r25, 0x18	; 24
  c6:	21 50       	subi	r18, 0x01	; 1
  c8:	80 40       	sbci	r24, 0x00	; 0
  ca:	90 40       	sbci	r25, 0x00	; 0
  cc:	e1 f7       	brne	.-8      	; 0xc6 <main+0x10>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <main+0x1a>
  d0:	00 00       	nop
		_delay_ms(500);
		PhaseSmooth(OFF);
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	0e 94 05 01 	call	0x20a	; 0x20a <_Z11PhaseSmoothh>
  d8:	2f ef       	ldi	r18, 0xFF	; 255
  da:	89 e6       	ldi	r24, 0x69	; 105
  dc:	98 e1       	ldi	r25, 0x18	; 24
  de:	21 50       	subi	r18, 0x01	; 1
  e0:	80 40       	sbci	r24, 0x00	; 0
  e2:	90 40       	sbci	r25, 0x00	; 0
  e4:	e1 f7       	brne	.-8      	; 0xde <main+0x28>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <main+0x32>
  e8:	00 00       	nop
  ea:	e7 cf       	rjmp	.-50     	; 0xba <main+0x4>

000000ec <_Z10OutputInith>:
#define MAX_STEPS 10

uint16_t deltas[MAX_STEPS] = {7000, 6500, 6000, 5500, 5000, 4500, 4000, 3500, 3000, 2000};

void OutputInit (uint8_t output_pin){
	out_pin = output_pin;
  ec:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <out_pin>
	OUT_DDR |= (1<<out_pin);
  f0:	44 b1       	in	r20, 0x04	; 4
  f2:	21 e0       	ldi	r18, 0x01	; 1
  f4:	30 e0       	ldi	r19, 0x00	; 0
  f6:	b9 01       	movw	r22, r18
  f8:	02 c0       	rjmp	.+4      	; 0xfe <_Z10OutputInith+0x12>
  fa:	66 0f       	add	r22, r22
  fc:	77 1f       	adc	r23, r23
  fe:	8a 95       	dec	r24
 100:	e2 f7       	brpl	.-8      	; 0xfa <_Z10OutputInith+0xe>
 102:	cb 01       	movw	r24, r22
 104:	84 2b       	or	r24, r20
 106:	84 b9       	out	0x04, r24	; 4
 108:	08 95       	ret

0000010a <_Z2Onv>:
}

void On (void){ OUT_PORT |= (1<<out_pin); }
 10a:	25 b1       	in	r18, 0x05	; 5
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	00 90 15 01 	lds	r0, 0x0115	; 0x800115 <out_pin>
 114:	02 c0       	rjmp	.+4      	; 0x11a <_Z2Onv+0x10>
 116:	88 0f       	add	r24, r24
 118:	99 1f       	adc	r25, r25
 11a:	0a 94       	dec	r0
 11c:	e2 f7       	brpl	.-8      	; 0x116 <_Z2Onv+0xc>
 11e:	82 2b       	or	r24, r18
 120:	85 b9       	out	0x05, r24	; 5
 122:	08 95       	ret

00000124 <_Z3Offv>:

void Off (void){ OUT_PORT &= ~(1<<out_pin); }
 124:	25 b1       	in	r18, 0x05	; 5
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	00 90 15 01 	lds	r0, 0x0115	; 0x800115 <out_pin>
 12e:	02 c0       	rjmp	.+4      	; 0x134 <_Z3Offv+0x10>
 130:	88 0f       	add	r24, r24
 132:	99 1f       	adc	r25, r25
 134:	0a 94       	dec	r0
 136:	e2 f7       	brpl	.-8      	; 0x130 <_Z3Offv+0xc>
 138:	80 95       	com	r24
 13a:	82 23       	and	r24, r18
 13c:	85 b9       	out	0x05, r24	; 5
 13e:	08 95       	ret

00000140 <_Z13ZerocrossInitv>:

void ZerocrossInit (void) {
	EXTERNAL_INTERRUPT_PORT &= ~(1<<ZEROCROSS_PIN);
 140:	52 98       	cbi	0x0a, 2	; 10
	INTERRUPT_INIT |= (1<<ISC01) | (1<<ISC00);
 142:	e9 e6       	ldi	r30, 0x69	; 105
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	83 60       	ori	r24, 0x03	; 3
 14a:	80 83       	st	Z, r24
	INTERRUPT_FLAG |= (1<<INTF0);
 14c:	e0 9a       	sbi	0x1c, 0	; 28
 14e:	08 95       	ret

00000150 <_Z14ZerocrossStartv>:
}

void ZerocrossStart (void) {
	zerocross = 0;
 150:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <zerocross>
	GENERAL_INTERRUPT |= (1<<INT0);
 154:	e8 9a       	sbi	0x1d, 0	; 29
 156:	08 95       	ret

00000158 <_Z13ZerocrossStopv>:
}

void ZerocrossStop (void) { GENERAL_INTERRUPT &= ~(1<<INT0); }
 158:	e8 98       	cbi	0x1d, 0	; 29
 15a:	08 95       	ret

0000015c <_Z12PhaseControlh>:

ISR (EXT_INT){
	PhaseControl(state);
}

void PhaseControl (uint8_t state) {
 15c:	cf 93       	push	r28
 15e:	c8 2f       	mov	r28, r24
	if (zerocross < MAX_STEPS) {
 160:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <zerocross>
 164:	8a 30       	cpi	r24, 0x0A	; 10
 166:	e0 f4       	brcc	.+56     	; 0x1a0 <_Z12PhaseControlh+0x44>
		Off();
 168:	0e 94 92 00 	call	0x124	; 0x124 <_Z3Offv>
		StartPhaseControlTimer(deltas[state == ON ? zerocross : MAX_STEPS-zerocross-1]);
 16c:	c1 30       	cpi	r28, 0x01	; 1
 16e:	21 f4       	brne	.+8      	; 0x178 <_Z12PhaseControlh+0x1c>
 170:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <zerocross>
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	06 c0       	rjmp	.+12     	; 0x184 <_Z12PhaseControlh+0x28>
 178:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <zerocross>
 17c:	e9 e0       	ldi	r30, 0x09	; 9
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	e8 1b       	sub	r30, r24
 182:	f1 09       	sbc	r31, r1
 184:	ee 0f       	add	r30, r30
 186:	ff 1f       	adc	r31, r31
 188:	e0 50       	subi	r30, 0x00	; 0
 18a:	ff 4f       	sbci	r31, 0xFF	; 255
 18c:	80 81       	ld	r24, Z
 18e:	91 81       	ldd	r25, Z+1	; 0x01
 190:	0e 94 3f 01 	call	0x27e	; 0x27e <_Z22StartPhaseControlTimerj>
		zerocross++;
 194:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <zerocross>
 198:	8f 5f       	subi	r24, 0xFF	; 255
 19a:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <zerocross>
 19e:	0d c0       	rjmp	.+26     	; 0x1ba <_Z12PhaseControlh+0x5e>
	} else {
		ZerocrossStop();
 1a0:	0e 94 ac 00 	call	0x158	; 0x158 <_Z13ZerocrossStopv>
		zerocross = 0;
 1a4:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <zerocross>
		StopPhaseControlTimer();
 1a8:	0e 94 55 01 	call	0x2aa	; 0x2aa <_Z21StopPhaseControlTimerv>
		if (state == ON) On(); else Off();
 1ac:	c1 30       	cpi	r28, 0x01	; 1
 1ae:	19 f4       	brne	.+6      	; 0x1b6 <_Z12PhaseControlh+0x5a>
 1b0:	0e 94 85 00 	call	0x10a	; 0x10a <_Z2Onv>
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <_Z12PhaseControlh+0x5e>
 1b6:	0e 94 92 00 	call	0x124	; 0x124 <_Z3Offv>
	}
}
 1ba:	cf 91       	pop	r28
 1bc:	08 95       	ret

000001be <__vector_1>:
	GENERAL_INTERRUPT |= (1<<INT0);
}

void ZerocrossStop (void) { GENERAL_INTERRUPT &= ~(1<<INT0); }

ISR (EXT_INT){
 1be:	1f 92       	push	r1
 1c0:	0f 92       	push	r0
 1c2:	0f b6       	in	r0, 0x3f	; 63
 1c4:	0f 92       	push	r0
 1c6:	11 24       	eor	r1, r1
 1c8:	2f 93       	push	r18
 1ca:	3f 93       	push	r19
 1cc:	4f 93       	push	r20
 1ce:	5f 93       	push	r21
 1d0:	6f 93       	push	r22
 1d2:	7f 93       	push	r23
 1d4:	8f 93       	push	r24
 1d6:	9f 93       	push	r25
 1d8:	af 93       	push	r26
 1da:	bf 93       	push	r27
 1dc:	ef 93       	push	r30
 1de:	ff 93       	push	r31
	PhaseControl(state);
 1e0:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 1e4:	0e 94 ae 00 	call	0x15c	; 0x15c <_Z12PhaseControlh>
}
 1e8:	ff 91       	pop	r31
 1ea:	ef 91       	pop	r30
 1ec:	bf 91       	pop	r27
 1ee:	af 91       	pop	r26
 1f0:	9f 91       	pop	r25
 1f2:	8f 91       	pop	r24
 1f4:	7f 91       	pop	r23
 1f6:	6f 91       	pop	r22
 1f8:	5f 91       	pop	r21
 1fa:	4f 91       	pop	r20
 1fc:	3f 91       	pop	r19
 1fe:	2f 91       	pop	r18
 200:	0f 90       	pop	r0
 202:	0f be       	out	0x3f, r0	; 63
 204:	0f 90       	pop	r0
 206:	1f 90       	pop	r1
 208:	18 95       	reti

0000020a <_Z11PhaseSmoothh>:
		StopPhaseControlTimer();
		if (state == ON) On(); else Off();
	}
}

void PhaseSmooth (uint8_t final_state) {
 20a:	cf 93       	push	r28
 20c:	c8 2f       	mov	r28, r24
	cli();
 20e:	f8 94       	cli
	ZerocrossStart();
 210:	0e 94 a8 00 	call	0x150	; 0x150 <_Z14ZerocrossStartv>
	state = final_state;
 214:	c0 93 14 01 	sts	0x0114, r28	; 0x800114 <__data_end>
	sei();
 218:	78 94       	sei
 21a:	cf 91       	pop	r28
 21c:	08 95       	ret

0000021e <__vector_7>:
#include "PhaseControlTimer.h"
#include "PhaseControl.h"

ISR(TIMER_INT) {
 21e:	1f 92       	push	r1
 220:	0f 92       	push	r0
 222:	0f b6       	in	r0, 0x3f	; 63
 224:	0f 92       	push	r0
 226:	11 24       	eor	r1, r1
 228:	2f 93       	push	r18
 22a:	3f 93       	push	r19
 22c:	4f 93       	push	r20
 22e:	5f 93       	push	r21
 230:	6f 93       	push	r22
 232:	7f 93       	push	r23
 234:	8f 93       	push	r24
 236:	9f 93       	push	r25
 238:	af 93       	push	r26
 23a:	bf 93       	push	r27
 23c:	ef 93       	push	r30
 23e:	ff 93       	push	r31
	if (PIND != (1<<ZEROCROSS_PIN)) On(); 
 240:	89 b1       	in	r24, 0x09	; 9
 242:	84 30       	cpi	r24, 0x04	; 4
 244:	11 f0       	breq	.+4      	; 0x24a <__vector_7+0x2c>
 246:	0e 94 85 00 	call	0x10a	; 0x10a <_Z2Onv>
}
 24a:	ff 91       	pop	r31
 24c:	ef 91       	pop	r30
 24e:	bf 91       	pop	r27
 250:	af 91       	pop	r26
 252:	9f 91       	pop	r25
 254:	8f 91       	pop	r24
 256:	7f 91       	pop	r23
 258:	6f 91       	pop	r22
 25a:	5f 91       	pop	r21
 25c:	4f 91       	pop	r20
 25e:	3f 91       	pop	r19
 260:	2f 91       	pop	r18
 262:	0f 90       	pop	r0
 264:	0f be       	out	0x3f, r0	; 63
 266:	0f 90       	pop	r0
 268:	1f 90       	pop	r1
 26a:	18 95       	reti

0000026c <_Z21InitPhaseControlTimerv>:

void InitPhaseControlTimer () {
  TCCR_A = TCCR_A_FOR_TIMER;
 26c:	82 e0       	ldi	r24, 0x02	; 2
 26e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
  TCCR_B = CS_FOR_4_PRESC;
 272:	87 e0       	ldi	r24, 0x07	; 7
 274:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
  TCNT2 = 0;	
 278:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
 27c:	08 95       	ret

0000027e <_Z22StartPhaseControlTimerj>:
}

void StartPhaseControlTimer(uint16_t Period) {
  cli();
 27e:	f8 94       	cli
  OCR_A = ((uint32_t)Period * F_CPU_SH) / PRESCALER_4 - 1;
 280:	a0 e0       	ldi	r26, 0x00	; 0
 282:	b0 e0       	ldi	r27, 0x00	; 0
 284:	88 0f       	add	r24, r24
 286:	99 1f       	adc	r25, r25
 288:	aa 1f       	adc	r26, r26
 28a:	bb 1f       	adc	r27, r27
 28c:	88 0f       	add	r24, r24
 28e:	99 1f       	adc	r25, r25
 290:	aa 1f       	adc	r26, r26
 292:	bb 1f       	adc	r27, r27
 294:	8f ef       	ldi	r24, 0xFF	; 255
 296:	89 0f       	add	r24, r25
 298:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
  TCNT2 = 0;
 29c:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
  TIMSK_ = (1<<OCIE_A);
 2a0:	82 e0       	ldi	r24, 0x02	; 2
 2a2:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
  sei();
 2a6:	78 94       	sei
 2a8:	08 95       	ret

000002aa <_Z21StopPhaseControlTimerv>:
}

void StopPhaseControlTimer() { TIMSK_ &= ~(1<<OCIE_A); }
 2aa:	e0 e7       	ldi	r30, 0x70	; 112
 2ac:	f0 e0       	ldi	r31, 0x00	; 0
 2ae:	80 81       	ld	r24, Z
 2b0:	8d 7f       	andi	r24, 0xFD	; 253
 2b2:	80 83       	st	Z, r24
 2b4:	08 95       	ret

000002b6 <_exit>:
 2b6:	f8 94       	cli

000002b8 <__stop_program>:
 2b8:	ff cf       	rjmp	.-2      	; 0x2b8 <__stop_program>
