;#include <mega328p.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000006 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000007 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000008 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;    #asm
;PCODE: $0000000D VOL: 0
       .equ __i2c_port=8 ;PORTC
;PCODE: $0000000E VOL: 0
       .equ __sda_bit=4
;PCODE: $0000000F VOL: 0
       .equ __scl_bit=5
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0007     #endasm
;
;#include <i2c.h>    // Функции I2C
;#include <ds1307.h> // Функции DS1307
;#include <stdio.h>  // Функции стандартного ввода-вывода
;#include <delay.h>  // Функции ожидания
;
;#define RS0 0
;#define RS1 1
;
;/* Настройки для UART */
;#define HI(x) ((x)>>8)
;#define LO(x) ((x)& 0xFF)
;
;#define F_CPU 16000000UL  // Частота МК
;#define BAUDRATE 9600L  // Скорость передачи UART
;#define BAUDRATE_REG (F_CPU/(16*BAUDRATE)-1)
;
;// Инициализация UART
;void init_UART()
; 0000 001B {

	.CSEG
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 001C 	UCSR0A = 0;						                    // Асинхронный режим, 1 стоповый бит, без проверки четности
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 001D 	UCSR0B = (1<<TXEN0);					            // Включаем передатчик
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 001E 	UCSR0C = (1<<UCSZ01) | (1<<UCSZ00) | (0<<UCPOL0);	// 8 бит данных
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 001F 	UBRR0H = HI(BAUDRATE_REG);				            // Задаем скорость передачи
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0020 	UBRR0L = LO(BAUDRATE_REG);
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0021 }
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;
;// Дни недели
;const char * weekdays[7] = {"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"};

	.DSEG
;
;void main(void)
; 0000 0027 {

	.CSEG
;PCODE: $00000020 VOL: 0
; 0000 0028     // Параметры часов
; 0000 0029     unsigned char rs = (1 << RS1)|(1 << RS0);
; 0000 002A     unsigned char sqwe = 1;
; 0000 002B     unsigned char out = 0;
; 0000 002C 
; 0000 002D     // Дата и время
; 0000 002E     unsigned char week_day, day, month, year;
; 0000 002F     unsigned char hour, minute, second;
; 0000 0030 
; 0000 0031     // Делитель тактовой частоты: 1
; 0000 0032     #pragma optsize-
; 0000 0033     CLKPR=(1<<CLKPCE);
;PCODE: $00000021 VOL: 0
;	rs -> R17
;	sqwe -> R16
;	out -> R19
;	week_day -> R18
;	day -> R21
;	month -> R20
;	year -> Y+3
;	hour -> Y+2
;	minute -> Y+1
;	second -> Y+0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0034     CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0035     #ifdef _OPTIMIZE_SIZE_
; 0000 0036     #pragma optsize+
; 0000 0037     #endif
; 0000 0038 
; 0000 0039     // Выключить аналоговый компаратор
; 0000 003A     ACSR=(1<<ACD);
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 003B     // Выключить АЦП
; 0000 003C     ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 003D 
; 0000 003E     // Запустить UART
; 0000 003F     init_UART();
;PCODE: $00000030 VOL: 0
; 0000 0040 
; 0000 0041     // Запустить I2C
; 0000 0042     i2c_init();
;PCODE: $00000031 VOL: 0
; 0000 0043 
; 0000 0044     // Настройка часов
; 0000 0045     rtc_init(rs, sqwe, out);
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0046 
; 0000 0047     // Установка даты: день недели, день, месяц, год
; 0000 0048     rtc_set_date(6, 20, 12, 24);
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0049 
; 0000 004A     // Установка времени: часы, минуты, секунды
; 0000 004B     rtc_set_time(16, 1, 30);
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 004C 
; 0000 004D     while (1) // смотрим время каждую секунду
;PCODE: $00000044 VOL: 0
; 0000 004E     {
; 0000 004F         rtc_get_date(&week_day,&day,&month,&year);
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0050         printf("%02u\\%02u\\%02u %p\r", day, month, year, weekdays[week_day-1]);
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 0051 
; 0000 0052         rtc_get_time(&hour,&minute,&second);
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 0053         printf("%02u:%02u:%02u\r", hour, minute, second);
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 0054 
; 0000 0055         delay_ms(1000);
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 0056     }
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 0057 }
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
